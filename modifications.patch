diff --git a/App.tsx b/App.tsx
index c6bc72b..9ae66d9 100644
--- a/App.tsx
+++ b/App.tsx
@@ -1,23 +1,22 @@
-import React from 'react';
+import React, { lazy, Suspense } from 'react';
 import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
 import { AuthProvider, useAuth } from './contexts/AuthContext';
-import ProtectedLayout from './pages/ProtectedLayout';
+import ProtectedLayout from './components/ProtectedLayout';
 import Login from './pages/Login';
-import Dashboard from './pages/Dashboard';
-import Ventes from './pages/Ventes';
-import Commande from './pages/Commande';
-import Cuisine from './pages/Cuisine';
-import ParaLlevar from './pages/ParaLlevar';
-import Ingredients from './pages/Ingredients';
-import Produits from './pages/Produits';
-import CommandeClient from './pages/CommandeClient';
-import NotFound from './pages/NotFound';
-import ResumeVentes from './pages/ResumeVentes';
-import SiteCustomization from './pages/SiteCustomization';
 import { SITE_CUSTOMIZER_PERMISSION_KEY } from './constants';
 import { getHomeRedirectPath, isPermissionGranted } from './utils/navigation';
 import NoAccess from './components/NoAccess';
 
+const Dashboard = lazy(() => import('./pages/Dashboard'));
+const Ventes = lazy(() => import('./pages/Ventes'));
+const Commande = lazy(() => import('./pages/Commande'));
+const Cuisine = lazy(() => import('./pages/Cuisine'));
+const ParaLlevar = lazy(() => import('./pages/ParaLlevar'));
+const Ingredients = lazy(() => import('./pages/Ingredients'));
+const Produits = lazy(() => import('./pages/Produits'));
+const ResumeVentes = lazy(() => import('./pages/ResumeVentes'));
+const SiteCustomization = lazy(() => import('./pages/SiteCustomization'));
+
 const LoadingScreen: React.FC = () => (
   <div className="flex items-center justify-center h-screen">
     <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-brand-primary" />
@@ -82,7 +81,6 @@ const AppRoutes: React.FC = () => (
   <Routes>
     <Route path="/" element={<RootRoute />} />
     <Route path="/login" element={<Navigate to="/" replace />} />
-    <Route path="/commande-client" element={<CommandeClient />} />
 
     <Route element={<ProtectedAppShell />}>
       <Route
@@ -159,7 +157,7 @@ const AppRoutes: React.FC = () => (
       />
     </Route>
 
-    <Route path="*" element={<NotFound />} />
+    <Route path="*" element={<p>404</p>} />
   </Routes>
 );
 
@@ -168,7 +166,9 @@ const App: React.FC = () => {
   return (
     <AuthProvider>
       <BrowserRouter>
-        <AppRoutes />
+        <Suspense fallback={<LoadingScreen />}>
+          <AppRoutes />
+        </Suspense>
       </BrowserRouter>
     </AuthProvider>
   );
diff --git a/components/SitePreviewCanvas.tsx b/components/SitePreviewCanvas.tsx
index e69d39a..5a43068 100644
--- a/components/SitePreviewCanvas.tsx
+++ b/components/SitePreviewCanvas.tsx
@@ -1,1066 +1,433 @@
-import React from 'react';
-import { ChevronLeft, ChevronRight, Clock, Edit2, Mail, MapPin, Quote, Star } from 'lucide-react';
-import { EditableElementKey, EditableZoneKey, Product, SiteContent } from '../types';
-import useCustomFonts from '../hooks/useCustomFonts';
-import {
-  createBackgroundStyle,
-  createBodyTextStyle,
-  createElementBackgroundStyle,
-  createElementBodyTextStyle,
-  createElementTextStyle,
-  createHeroBackgroundStyle,
-  createTextStyle,
-} from '../utils/siteStyleHelpers';
-import { formatCurrencyCOP } from '../utils/formatIntegerAmount';
-
-const DEFAULT_BRAND_LOGO = '/logo-brand.svg';
-
-export const resolveZoneFromElement = (element: EditableElementKey): EditableZoneKey => {
-  if (element.startsWith('navigation.')) {
-    return 'navigation';
-  }
-  if (element.startsWith('hero.')) {
-    return 'hero';
-  }
-  if (element.startsWith('about.')) {
-    return 'about';
-  }
-  if (element.startsWith('menu.')) {
-    return 'menu';
-  }
-  if (element.startsWith('instagramReviews.')) {
-    return 'instagramReviews';
-  }
-  if (element.startsWith('findUs.')) {
-    return 'findUs';
-  }
-  if (element.startsWith('footer.')) {
-    return 'footer';
-  }
-
-  throw new Error(`Zone introuvable pour l'élément modifiable "${element}"`);
-};
+import React, { useState, useEffect, useMemo, useCallback } from 'react';
+import { SiteContent, Zone } from '../types';
+import { getElementTextStyle, getElementBodyTextStyle, getZoneStyle } from '../utils/siteStyleHelpers';
+import { useCustomFonts } from '../hooks/useCustomFonts';
+import { EditableElement } from './EditorPopover';
+import { resolveZoneFromElement } from '../utils/siteCustomization';
 
 interface SitePreviewCanvasProps {
-  content: SiteContent;
-  bestSellerProducts: Product[];
-  onEdit: (
-    element: EditableElementKey,
-    meta: { zone: EditableZoneKey; anchor: DOMRect | DOMRectReadOnly | null },
-  ) => void;
-  activeZone?: EditableZoneKey | null;
-  showEditButtons?: boolean;
-}
-
-interface EditableElementProps {
-  id: EditableElementKey;
-  onEdit: SitePreviewCanvasProps['onEdit'];
-  children: React.ReactNode;
-  label: string;
-  className?: string;
-  buttonClassName?: string;
-  as?: keyof JSX.IntrinsicElements;
-}
-
-const EditButtonVisibilityContext = React.createContext(true);
-
-interface SectionCardProps {
-  children: React.ReactNode;
-  className?: string;
-  zone: EditableZoneKey;
-  activeZone?: EditableZoneKey | null;
+  siteContent: SiteContent;
+  onEdit: (id: string, type: 'text' | 'image' | 'link' | 'color' | 'font' | 'zone' | 'globalStyle') => void;
+  selectedElement: string | null;
+  globalStyle: any;
 }
 
-const EditableElement: React.FC<EditableElementProps> = ({
-  id,
-  onEdit,
-  children,
-  label,
-  className,
-  buttonClassName,
-  as: Component = 'div',
-}) => {
-  const containerClasses = ['group relative', className].filter(Boolean).join(' ');
-  const showButtons = React.useContext(EditButtonVisibilityContext);
-
-  if (!showButtons) {
-    return <Component className={containerClasses}>{children}</Component>;
-  }
-  const buttonClasses = [
-    'absolute z-30 flex h-7 w-7 items-center justify-center rounded-full bg-brand-primary text-white shadow-sm transition-opacity duration-200',
-    'opacity-0 group-hover:opacity-100 group-focus-within:opacity-100 focus-visible:opacity-100',
-    'focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-primary',
-    buttonClassName ?? 'right-2 top-2',
-  ]
-    .filter(Boolean)
-    .join(' ');
-
-  const handleEdit = (event: React.MouseEvent<HTMLButtonElement>) => {
-    event.preventDefault();
-    event.stopPropagation();
-    const zone = resolveZoneFromElement(id);
-    const buttonRect = event.currentTarget.getBoundingClientRect();
-    const anchorElement =
-      (event.currentTarget.closest(`[data-zone="${zone}"]`) as HTMLElement | null) ??
-      (event.currentTarget.parentElement as HTMLElement | null);
-    const fallbackRect = anchorElement?.getBoundingClientRect() ?? null;
-    onEdit(id, { zone, anchor: buttonRect ?? fallbackRect });
-  };
-
-  return (
-    <Component className={containerClasses}>
-      <button
-        type="button"
-        onClick={handleEdit}
-        className={buttonClasses}
-        aria-label={label}
-        data-element-id={id}
-      >
-        <Edit2 className="h-3.5 w-3.5" aria-hidden="true" />
-      </button>
-      {children}
-    </Component>
-  );
-};
-
-const SectionCard: React.FC<SectionCardProps> = ({ children, className, zone, activeZone }) => {
-  const isActive = activeZone === zone;
-  const classes = [
-    'relative overflow-hidden rounded-3xl border bg-white shadow-sm transition-all',
-    isActive ? 'border-brand-primary/70 shadow-brand-primary/20 ring-2 ring-brand-primary/10' : 'border-gray-200',
-    className,
-  ]
-    .filter(Boolean)
-    .join(' ');
-
-  return (
-    <div className={classes} data-zone={zone}>
-      {children}
-    </div>
-  );
-};
-
 const SitePreviewCanvas: React.FC<SitePreviewCanvasProps> = ({
-  content,
-  bestSellerProducts,
+  siteContent,
   onEdit,
-  activeZone,
-  showEditButtons = true,
+  selectedElement,
+  globalStyle,
 }) => {
-  const navigationBackgroundStyle = createBackgroundStyle(content.navigation.style);
-  const navigationTextStyle = createTextStyle(content.navigation.style);
-  const navigationBodyStyle = createBodyTextStyle(content.navigation.style);
-  const brandLogo = content.navigation.brandLogo ?? DEFAULT_BRAND_LOGO;
-  const staffTriggerLogo =
-    content.navigation.staffLogo ?? content.navigation.brandLogo ?? DEFAULT_BRAND_LOGO;
-  const heroBackgroundStyle = createHeroBackgroundStyle(content.hero.style, content.hero.backgroundImage);
-  const heroTextStyle = createTextStyle(content.hero.style);
-  const heroBodyTextStyle = createBodyTextStyle(content.hero.style);
-  const aboutBackgroundStyle = createBackgroundStyle(content.about.style);
-  const aboutTextStyle = createTextStyle(content.about.style);
-  const aboutBodyTextStyle = createBodyTextStyle(content.about.style);
-  const menuBackgroundStyle = createBackgroundStyle(content.menu.style);
-  const menuTextStyle = createTextStyle(content.menu.style);
-  const menuBodyTextStyle = createBodyTextStyle(content.menu.style);
-  const instagramReviewsBackgroundStyle = createBackgroundStyle(content.instagramReviews.style);
-  const instagramReviewsTextStyle = createTextStyle(content.instagramReviews.style);
-  const findUsBackgroundStyle = createBackgroundStyle(content.findUs.style);
-  const findUsTextStyle = createTextStyle(content.findUs.style);
-  const footerBackgroundStyle = createBackgroundStyle(content.footer.style);
-  const footerTextStyle = createBodyTextStyle(content.footer.style);
-
-  useCustomFonts(content.assets.library);
-
-  const elementStyles = content.elementStyles ?? {};
-  const elementRichText = content.elementRichText ?? {};
-
-  const getRichTextHtml = (key: EditableElementKey): string | null => {
-    const entry = elementRichText[key];
-    const html = entry?.html?.trim();
-    return html && html.length > 0 ? html : null;
-  };
-
-  const renderRichTextElement = <T extends keyof JSX.IntrinsicElements>(
-    key: EditableElementKey,
-    Component: T,
-    props: React.ComponentPropsWithoutRef<T>,
-    fallback: string,
-  ) => {
-    const html = getRichTextHtml(key);
-    if (html) {
-      return React.createElement(Component, {
-        ...props,
-        dangerouslySetInnerHTML: { __html: html },
-      });
-    }
-    return React.createElement(Component, props, fallback);
-  };
-
-  const zoneStyleMap: Record<EditableZoneKey, typeof content.navigation.style> = {
-    navigation: content.navigation.style,
-    hero: content.hero.style,
-    about: content.about.style,
-    menu: content.menu.style,
-    instagramReviews: content.instagramReviews.style,
-    findUs: content.findUs.style,
-    footer: content.footer.style,
-  };
-
-  const getElementStyle = (key: EditableElementKey) => elementStyles[key];
-
-  const getElementTextStyle = (key: EditableElementKey) => {
-    const zone = resolveZoneFromElement(key);
-    return createElementTextStyle(zoneStyleMap[zone], getElementStyle(key));
-  };
-
-  const getElementBodyTextStyle = (key: EditableElementKey) => {
-    const zone = resolveZoneFromElement(key);
-    return createElementBodyTextStyle(zoneStyleMap[zone], getElementStyle(key));
-  };
-
-  const getElementBackgroundStyle = (key: EditableElementKey) => {
-    const zone = resolveZoneFromElement(key);
-    return createElementBackgroundStyle(zoneStyleMap[zone], getElementStyle(key));
-  };
-
-  const findUsMapQuery = content.findUs.address.trim();
-  const encodedFindUsQuery = findUsMapQuery.length > 0 ? encodeURIComponent(findUsMapQuery) : '';
-  const findUsMapUrl = encodedFindUsQuery
-    ? `https://www.google.com/maps?q=${encodedFindUsQuery}`
-    : 'https://www.google.com/maps';
-  const findUsMapEmbedUrl = encodedFindUsQuery
-    ? `https://www.google.com/maps?q=${encodedFindUsQuery}&output=embed`
-    : 'about:blank';
-
-  return (
-    <EditButtonVisibilityContext.Provider value={showEditButtons}>
-      <div className="space-y-6 rounded-[2.5rem] border border-gray-200 bg-slate-50 p-6 shadow-inner">
-      <SectionCard zone="navigation" activeZone={activeZone}>
-        <EditableElement
-          id="navigation.style.background"
-          label="Modifier le fond de la navigation"
-          onEdit={onEdit}
-          className="block"
-          buttonClassName="right-4 top-4"
-        >
-          <header className="login-header" style={navigationBackgroundStyle}>
-            <div className="layout-container login-header__inner" style={navigationTextStyle}>
-              <div className="login-brand" style={navigationTextStyle}>
-                <EditableElement
-                  id="navigation.brandLogo"
-                  label="Modifier le logo principal"
-                  onEdit={onEdit}
-                  as="span"
-                  className="inline-flex items-center"
-                >
-                  <img
-                    src={brandLogo}
-                    alt={`Logo ${content.navigation.brand}`}
-                    className="login-brand__logo"
-                  />
-                </EditableElement>
-                <EditableElement
-                  id="navigation.brand"
-                  label="Modifier le nom de la marque"
-                  onEdit={onEdit}
-                  as="span"
-                  className="ml-3 inline-flex items-center"
-                  buttonClassName="-right-3 -top-3"
-                >
-                  {renderRichTextElement(
-                    'navigation.brand',
-                    'span',
-                    {
-                      className: 'login-brand__name',
-                      style: getElementTextStyle('navigation.brand'),
-                    },
-                    content.navigation.brand,
-                  )}
-                </EditableElement>
-              </div>
-              <nav className="login-nav" aria-label="Navigation principale">
-                <EditableElement
-                  id="navigation.links.home"
-                  label="Modifier le lien Accueil"
-                  onEdit={onEdit}
-                  as="span"
-                  className="inline-flex"
-                  buttonClassName="-right-2 -top-2"
-                >
-                  {renderRichTextElement(
-                    'navigation.links.home',
-                    'span',
-                    {
-                      className: 'login-nav__link',
-                      style: getElementBodyTextStyle('navigation.links.home'),
-                    },
-                    content.navigation.links.home,
-                  )}
-                </EditableElement>
-                <EditableElement
-                  id="navigation.links.about"
-                  label="Modifier le lien À propos"
-                  onEdit={onEdit}
-                  as="span"
-                  className="inline-flex"
-                  buttonClassName="-right-2 -top-2"
-                >
-                  {renderRichTextElement(
-                    'navigation.links.about',
-                    'span',
-                    {
-                      className: 'login-nav__link',
-                      style: getElementBodyTextStyle('navigation.links.about'),
-                    },
-                    content.navigation.links.about,
-                  )}
-                </EditableElement>
-                <EditableElement
-                  id="navigation.links.menu"
-                  label="Modifier le lien Menu"
-                  onEdit={onEdit}
-                  as="span"
-                  className="inline-flex"
-                  buttonClassName="-right-2 -top-2"
-                >
-                  {renderRichTextElement(
-                    'navigation.links.menu',
-                    'span',
-                    {
-                      className: 'login-nav__link',
-                      style: getElementBodyTextStyle('navigation.links.menu'),
-                    },
-                    content.navigation.links.menu,
-                  )}
-                </EditableElement>
-                <EditableElement
-                  id="navigation.links.loginCta"
-                  label="Modifier le bouton personnel"
-                  onEdit={onEdit}
-                  as="span"
-                  className="inline-flex"
-                  buttonClassName="-right-2 -top-2"
-                >
-                  <div
-                    className="login-nav__staff-btn"
-                    aria-label={content.navigation.links.loginCta}
-                    role="img"
-                  >
+  useCustomFonts(siteContent.assets.library);
+
+  const zoneStyleMap = useMemo(() => {
+    const map = new Map<string, React.CSSProperties>();
+    siteContent.zones.forEach(zone => {
+      map.set(zone.id, getZoneStyle(zone, siteContent.assets.library));
+    });
+    return map;
+  }, [siteContent.zones, siteContent.assets.library]);
+
+  const elementStyles = useMemo(() => {
+    const styles: { [key: string]: React.CSSProperties } = {};
+    siteContent.elements.forEach(el => {
+      styles[el.id] = getElementTextStyle(el.id, globalStyle);
+    });
+    return styles;
+  }, [siteContent.elements, globalStyle]);
+
+  const elementRichText = useMemo(() => {
+    const richText: { [key: string]: string } = {};
+    siteContent.elements.forEach(el => {
+      richText[el.id] = el.richText || '';
+    });
+    return richText;
+  }, [siteContent.elements]);
+
+  const renderZoneContent = useCallback((zone: Zone) => {
+    switch (zone.type) {
+      case 'header':
+        return (
+          <header
+            className={`relative w-full ${selectedElement === zone.id ? 'border-2 border-blue-500' : ''}`}
+            style={zoneStyleMap.get(zone.id)}
+            onClick={() => onEdit(zone.id, 'zone')}
+          >
+            <div className="container mx-auto flex justify-between items-center p-4">
+              <EditableElement
+                id="navigation.brand"
+                label="Modifier le nom de la marque"
+                onEdit={onEdit}
+                as="span"
+                className="login-brand__name"
+                style={getElementTextStyle('navigation.brand', globalStyle)}
+              >
+                {siteContent.navigation.brand}
+              </EditableElement>
+              <nav>
+                <ul className="flex space-x-4">
+                  <li>
                     <EditableElement
-                      id="navigation.staffLogo"
-                      label="Modifier le logo d'accès staff"
+                      id="navigation.links.home"
+                      label="Modifier le lien Accueil"
                       onEdit={onEdit}
                       as="span"
                       className="inline-flex"
-                      buttonClassName="-right-2 -top-2"
+                      style={getElementTextStyle('navigation.links.home', globalStyle)}
                     >
-                      <img src={staffTriggerLogo} alt="" className="login-brand__logo" aria-hidden="true" />
+                      {siteContent.navigation.links.home.text}
                     </EditableElement>
-                  </div>
-                </EditableElement>
+                  </li>
+                  <li>
+                    <EditableElement
+                      id="navigation.links.menu"
+                      label="Modifier le lien Menu"
+                      onEdit={onEdit}
+                      as="span"
+                      className="inline-flex"
+                      style={getElementTextStyle('navigation.links.menu', globalStyle)}
+                    >
+                      {siteContent.navigation.links.menu.text}
+                    </EditableElement>
+                  </li>
+                  <li>
+                    <EditableElement
+                      id="navigation.links.contact"
+                      label="Modifier le lien Contact"
+                      onEdit={onEdit}
+                      as="span"
+                      className="inline-flex"
+                      style={getElementTextStyle('navigation.links.contact', globalStyle)}
+                    >
+                      {siteContent.navigation.links.contact.text}
+                    </EditableElement>
+                  </li>
+                </ul>
               </nav>
             </div>
           </header>
-        </EditableElement>
-      </SectionCard>
-
-      <SectionCard zone="hero" activeZone={activeZone}>
-        <EditableElement
-          id="hero.backgroundImage"
-          label="Modifier le visuel de fond du hero"
-          onEdit={onEdit}
-          className="block"
-          buttonClassName="right-4 top-4"
-        >
-          <section className="section section-hero" style={{ ...heroBackgroundStyle, ...heroTextStyle }}>
-            <div className="section-hero__inner">
-              <div className="hero-content" style={heroTextStyle}>
-                <EditableElement
-                  id="hero.title"
-                  label="Modifier le titre du hero"
-                  onEdit={onEdit}
-                  className="block"
-                  buttonClassName="right-0 -top-3"
-                >
-                  {renderRichTextElement(
-                    'hero.title',
-                    'h2',
-                    {
-                      className: 'hero-title',
-                      style: getElementTextStyle('hero.title'),
-                    },
-                    content.hero.title,
-                  )}
-                </EditableElement>
-                <EditableElement
-                  id="hero.subtitle"
-                  label="Modifier le sous-titre du hero"
-                  onEdit={onEdit}
-                  className="mt-4 block"
-                  buttonClassName="right-0 -top-3"
-                >
-                  {renderRichTextElement(
-                    'hero.subtitle',
-                    'p',
-                    {
-                      className: 'hero-subtitle',
-                      style: getElementBodyTextStyle('hero.subtitle'),
-                    },
-                    content.hero.subtitle,
-                  )}
-                </EditableElement>
-                <EditableElement
-                  id="hero.ctaLabel"
-                  label="Modifier le texte du bouton principal"
-                  onEdit={onEdit}
-                  className="mt-6 inline-flex"
-                  buttonClassName="-right-3 -top-3"
-                >
-                  <button
-                    type="button"
-                    className="ui-btn ui-btn-accent hero-cta"
-                    style={{
-                      ...getElementBodyTextStyle('hero.ctaLabel'),
-                      ...getElementBackgroundStyle('hero.ctaLabel'),
-                    }}
-                    disabled
-                  >
-                    {renderRichTextElement(
-                      'hero.ctaLabel',
-                      'span',
-                      {
-                        className: 'inline-flex items-center justify-center',
-                        style: getElementBodyTextStyle('hero.ctaLabel'),
-                      },
-                      content.hero.ctaLabel,
-                    )}
-                  </button>
-                </EditableElement>
-                <div className="hero-history mt-6">
-                <EditableElement
-                  id="hero.historyTitle"
-                  label="Modifier le titre de l'historique"
-                  onEdit={onEdit}
-                  className="block"
-                  buttonClassName="right-0 -top-3"
-                >
-                  {renderRichTextElement(
-                    'hero.historyTitle',
-                    'p',
-                    {
-                      className: 'hero-history__title',
-                      style: getElementBodyTextStyle('hero.historyTitle'),
-                    },
-                    content.hero.historyTitle,
-                  )}
-                </EditableElement>
-                <EditableElement
-                  id="hero.reorderCtaLabel"
-                  label="Modifier le bouton de réassort"
-                  onEdit={onEdit}
-                  className="hero-history__list"
-                  buttonClassName="right-2 top-2"
-                >
-                  <>
-                    {[0, 1, 2].map(index => (
-                      <div key={index} className="hero-history__item">
-                        <div className="hero-history__meta">
-                          <p className="hero-history__date" style={heroBodyTextStyle}>
-                            Pedido del 12/03/2024
-                          </p>
-                          <p className="hero-history__details" style={heroBodyTextStyle}>
-                            2 article(s) • {formatCurrencyCOP(32000)}
-                          </p>
-                        </div>
-                        <button
-                          type="button"
-                          className="hero-history__cta"
-                          style={{
-                            ...getElementBodyTextStyle('hero.reorderCtaLabel'),
-                            ...getElementBackgroundStyle('hero.reorderCtaLabel'),
-                          }}
-                          disabled
-                        >
-                          {renderRichTextElement(
-                            'hero.reorderCtaLabel',
-                            'span',
-                            {
-                              className: 'inline-flex items-center justify-center',
-                              style: getElementBodyTextStyle('hero.reorderCtaLabel'),
-                            },
-                            content.hero.reorderCtaLabel,
-                          )}
-                        </button>
-                      </div>
-                    ))}
-                  </>
-                </EditableElement>
-                </div>
-              </div>
-            </div>
-          </section>
-        </EditableElement>
-      </SectionCard>
-
-      <SectionCard zone="about" activeZone={activeZone}>
-        <EditableElement
-          id="about.style.background"
-          label="Modifier le fond de la section À propos"
-          onEdit={onEdit}
-          className="block"
-          buttonClassName="right-4 top-4"
-        >
-          <section className="section section-surface" style={{ ...aboutBackgroundStyle, ...aboutTextStyle }}>
-            <div className="section-inner section-inner--center" style={aboutTextStyle}>
+        );
+      case 'hero':
+        return (
+          <section
+            className={`relative h-screen flex items-center justify-center text-white ${selectedElement === zone.id ? 'border-2 border-blue-500' : ''}`}
+            style={zoneStyleMap.get(zone.id)}
+            onClick={() => onEdit(zone.id, 'zone')}
+          >
+            <img
+              src={siteContent.hero.backgroundImage}
+              alt="Hero Background"
+              className="absolute inset-0 w-full h-full object-cover"
+            />
+            <div className="absolute inset-0 bg-black bg-opacity-50"></div>
+            <div className="relative z-10 text-center p-4">
               <EditableElement
-                id="about.title"
-                label="Modifier le titre À propos"
+                id="hero.title"
+                label="Modifier le titre du Hero"
                 onEdit={onEdit}
-                className="block"
-                buttonClassName="right-0 -top-3"
+                as="h1"
+                className="text-5xl font-bold mb-4"
+                style={getElementTextStyle('hero.title', globalStyle)}
               >
-                {renderRichTextElement(
-                  'about.title',
-                  'h2',
-                  {
-                    className: 'section-title',
-                    style: getElementTextStyle('about.title'),
-                  },
-                  content.about.title,
-                )}
+                {siteContent.hero.title}
               </EditableElement>
               <EditableElement
-                id="about.description"
-                label="Modifier la description À propos"
+                id="hero.subtitle"
+                label="Modifier le sous-titre du Hero"
                 onEdit={onEdit}
-                className="mt-4 block"
-                buttonClassName="right-0 -top-3"
+                as="p"
+                className="text-xl mb-8"
+                style={getElementTextStyle('hero.subtitle', globalStyle)}
               >
-                {renderRichTextElement(
-                  'about.description',
-                  'p',
-                  {
-                    className: 'section-text section-text--muted',
-                    style: getElementBodyTextStyle('about.description'),
-                  },
-                  content.about.description,
-                )}
+                {siteContent.hero.subtitle}
+              </EditableElement>
+              <EditableElement
+                id="hero.ctaButtonText"
+                label="Modifier le texte du bouton CTA"
+                onEdit={onEdit}
+                as="button"
+                className="bg-brand-primary hover:bg-brand-secondary text-white font-bold py-3 px-8 rounded-full text-lg"
+                style={getElementTextStyle('hero.ctaButtonText', globalStyle)}
+              >
+                {siteContent.hero.ctaButtonText}
               </EditableElement>
-              {content.about.image && (
-                <EditableElement
-                  id="about.image"
-                  label="Modifier l'image À propos"
-                  onEdit={onEdit}
-                  className="mt-6 block"
-                  buttonClassName="right-4 top-4"
-                >
-                  <img
-                    src={content.about.image}
-                    alt={content.about.title}
-                    className="h-64 w-full rounded-xl object-cover shadow-lg"
-                  />
-                </EditableElement>
-              )}
             </div>
           </section>
-        </EditableElement>
-      </SectionCard>
-
-      <SectionCard zone="menu" activeZone={activeZone}>
-        <EditableElement
-          id="menu.style.background"
-          label="Modifier le fond de la section Menu"
-          onEdit={onEdit}
-          className="block"
-          buttonClassName="right-4 top-4"
-        >
-          <section className="section section-muted" style={{ ...menuBackgroundStyle, ...menuTextStyle }}>
-            <div className="section-inner section-inner--wide section-inner--center" style={menuTextStyle}>
+        );
+      case 'about':
+        return (
+          <section
+            className={`py-16 ${selectedElement === zone.id ? 'border-2 border-blue-500' : ''}`}
+            style={zoneStyleMap.get(zone.id)}
+            onClick={() => onEdit(zone.id, 'zone')}
+          >
+            <div className="container mx-auto px-4 text-center">
               <EditableElement
-                id="menu.title"
-                label="Modifier le titre du menu"
+                id="about.title"
+                label="Modifier le titre À Propos"
                 onEdit={onEdit}
-                className="block"
-                buttonClassName="right-0 -top-3"
+                as="h2"
+                className="text-4xl font-bold mb-8"
+                style={getElementTextStyle('about.title', globalStyle)}
               >
-                {renderRichTextElement(
-                  'menu.title',
-                  'h2',
-                  {
-                    className: 'section-title',
-                    style: getElementTextStyle('menu.title'),
-                  },
-                  content.menu.title,
-                )}
+                {siteContent.about.title}
               </EditableElement>
-              {content.menu.image && (
-                <EditableElement
-                  id="menu.image"
-                  label="Modifier l'image du menu"
-                  onEdit={onEdit}
-                  className="mb-8 block"
-                  buttonClassName="right-4 top-4"
-                >
-                  <img
-                    src={content.menu.image}
-                    alt={content.menu.title}
-                    className="h-64 w-full rounded-xl object-cover shadow-lg"
-                  />
-                </EditableElement>
-              )}
-              <div className="menu-grid">
-                {bestSellerProducts.length > 0 ? (
-                  bestSellerProducts.map(product => {
-                    const hasImage = Boolean(product.image);
-                    return (
-                      <article key={product.id} className="ui-card menu-card">
-                        {hasImage ? (
-                          <img
-                            src={product.image}
-                            alt={product.nom_produit}
-                            className="h-40 w-full rounded-t-xl object-cover"
-                          />
-                        ) : (
-                          <div className="h-40 w-full rounded-t-xl bg-gradient-to-br from-orange-200 via-amber-100 to-orange-50" />
-                        )}
-                        <div className="menu-card__body">
-                          <h3 className="menu-card__title" style={menuTextStyle}>
-                            {product.nom_produit}
-                          </h3>
-                          {product.description && (
-                            <p className="menu-card__description" style={menuBodyTextStyle}>
-                              {product.description}
-                            </p>
-                          )}
-                          <p className="menu-card__price" style={menuBodyTextStyle}>
-                            {formatCurrencyCOP(product.prix_vente)}
-                          </p>
-                        </div>
-                      </article>
-                    );
-                  })
-                ) : (
-                  <div className="col-span-full rounded-2xl border border-dashed border-slate-300 bg-white/70 p-6 text-center">
-                    <p className="text-sm text-slate-500" style={menuBodyTextStyle}>
-                      Aucun best seller sélectionné pour le moment.
-                    </p>
-                  </div>
-                )}
-              </div>
               <EditableElement
-                id="menu.ctaLabel"
-                label="Modifier le bouton de commande"
+                id="about.description"
+                label="Modifier la description À Propos"
                 onEdit={onEdit}
-                className="section-actions mt-8"
-                buttonClassName="right-2 top-2"
+                as="p"
+                className="text-lg leading-relaxed max-w-3xl mx-auto"
+                style={getElementBodyTextStyle('about.description', globalStyle)}
               >
-                <div className="section-actions">
-                  <button
-                    type="button"
-                    className="ui-btn ui-btn-primary hero-cta"
-                    style={{
-                      ...getElementBodyTextStyle('menu.ctaLabel'),
-                      ...getElementBackgroundStyle('menu.ctaLabel'),
-                    }}
-                    disabled
-                  >
-                    {renderRichTextElement(
-                      'menu.ctaLabel',
-                      'span',
-                      {
-                        className: 'inline-flex items-center justify-center',
-                        style: getElementBodyTextStyle('menu.ctaLabel'),
-                      },
-                      content.menu.ctaLabel,
-                    )}
-                  </button>
-                  <EditableElement
-                    id="menu.loadingLabel"
-                    label="Modifier le texte de chargement"
-                    onEdit={onEdit}
-                    className="ml-4 inline-flex"
-                    buttonClassName="-right-3 -top-3"
-                    as="span"
-                  >
-                    {renderRichTextElement(
-                      'menu.loadingLabel',
-                      'p',
-                      {
-                        className: 'section-text section-text--muted',
-                        style: getElementBodyTextStyle('menu.loadingLabel'),
-                      },
-                      content.menu.loadingLabel,
-                    )}
-                  </EditableElement>
-                </div>
+                {siteContent.about.description}
               </EditableElement>
             </div>
           </section>
-        </EditableElement>
-      </SectionCard>
-
-      <SectionCard zone="instagramReviews" activeZone={activeZone}>
-        <EditableElement
-          id="instagramReviews.style.background"
-          label="Modifier le fond de la section Avis Instagram"
-          onEdit={onEdit}
-          className="block"
-          buttonClassName="right-4 top-4"
-        >
+        );
+      case 'menu':
+        return (
           <section
-            className="section section-reviews"
-            style={{ ...instagramReviewsBackgroundStyle, ...instagramReviewsTextStyle }}
+            className={`py-16 ${selectedElement === zone.id ? 'border-2 border-blue-500' : ''}`}
+            style={zoneStyleMap.get(zone.id)}
+            onClick={() => onEdit(zone.id, 'zone')}
           >
-            <div className="section-inner section-inner--wide">
-              <div className="reviews-heading">
-                <EditableElement
-                  id="instagramReviews.title"
-                  label="Modifier le titre des avis"
-                  onEdit={onEdit}
-                  className="block"
-                  buttonClassName="right-0 -top-3"
-                >
-                  {renderRichTextElement(
-                    'instagramReviews.title',
-                    'h2',
-                    {
-                      className: 'section-title',
-                      style: getElementTextStyle('instagramReviews.title'),
-                    },
-                    content.instagramReviews.title,
-                  )}
-                </EditableElement>
-                <EditableElement
-                  id="instagramReviews.subtitle"
-                  label="Modifier le sous-titre des avis"
-                  onEdit={onEdit}
-                  className="mt-3 block"
-                  buttonClassName="right-0 -top-3"
-                >
-                  {renderRichTextElement(
-                    'instagramReviews.subtitle',
-                    'p',
-                    {
-                      className: 'reviews-subtitle',
-                      style: getElementBodyTextStyle('instagramReviews.subtitle'),
-                    },
-                    content.instagramReviews.subtitle,
-                  )}
-                </EditableElement>
-              </div>
-              <div className="reviews-carousel">
-                <div className="reviews-track">
-                  <article className="review-card" aria-hidden={false}>
-                    <div className="review-card__content">
-                      <header className="review-card__header">
-                        <span className="review-card__avatar" aria-hidden="true">
-                          <img src="https://i.pravatar.cc/96?img=12" alt="" />
-                        </span>
-                        <div className="review-card__meta">
-                          <p className="review-card__name">Camila G.</p>
-                          <p className="review-card__handle">@camilafoodie • il y a 2 jours</p>
-                        </div>
-                        <span className="review-card__badge">Instagram</span>
-                      </header>
-                      <div className="review-card__stars" aria-label="Note 5 sur 5">
-                        {Array.from({ length: 5 }).map((_, index) => (
-                          <Star key={index} aria-hidden="true" />
-                        ))}
-                      </div>
-                      <blockquote className="review-card__quote">
-                        <Quote aria-hidden="true" className="review-card__quote-icon" />
-                        <p>
-                          "Des portions généreuses et des sauces incroyables. On sent que tout est préparé avec passion, vivement la prochaine commande !"
-                        </p>
-                      </blockquote>
-                      <div className="review-card__footer">
-                        <div className="review-card__highlight">
-                          <span className="review-card__story-ring" aria-hidden="true">
-                            <img
-                              src={content.instagramReviews.image ?? 'https://picsum.photos/seed/reviewpreview/160/160'}
-                              alt=""
-                            />
-                          </span>
-                          <div>
-                            <p className="review-card__highlight-title">Story highlight</p>
-                            <p className="review-card__highlight-caption">5 étoiles assurées ✨</p>
-                          </div>
-                        </div>
-                        <p className="review-card__location">Bogotá, CO</p>
-                      </div>
-                    </div>
-                    <div className="review-card__media">
-                      <span className="review-card__media-frame">
-                        <img
-                          src={content.instagramReviews.image ?? 'https://picsum.photos/seed/reviewpreview/320/320'}
-                          alt={content.instagramReviews.title}
-                        />
-                      </span>
-                    </div>
-                  </article>
-                </div>
-                <div className="reviews-controls" aria-hidden="true">
-                  <button type="button" className="reviews-control" disabled>
-                    <ChevronLeft aria-hidden="true" />
-                  </button>
-                  <button type="button" className="reviews-control" disabled>
-                    <ChevronRight aria-hidden="true" />
-                  </button>
-                </div>
-              </div>
-            </div>
-          </section>
-        </EditableElement>
-      </SectionCard>
-
-      <SectionCard zone="findUs" activeZone={activeZone}>
-        <EditableElement
-          id="findUs.style.background"
-          label="Modifier le fond de la section Encuéntranos"
-          onEdit={onEdit}
-          className="block"
-          buttonClassName="right-4 top-4"
-        >
-          <section className="section section-surface" style={{ ...findUsBackgroundStyle, ...findUsTextStyle }}>
-            <div className="find-us-grid" style={findUsTextStyle}>
-              <div className="find-us-panel" style={findUsTextStyle}>
-                <EditableElement
-                  id="findUs.title"
-                  label="Modifier le titre Encuéntranos"
-                  onEdit={onEdit}
-                  className="block"
-                  buttonClassName="right-0 -top-3"
-                >
-                  {renderRichTextElement(
-                    'findUs.title',
-                    'h2',
-                    {
-                      className: 'section-title',
-                      style: getElementTextStyle('findUs.title'),
-                    },
-                    content.findUs.title,
-                  )}
-                </EditableElement>
-                <div className="find-us-details">
-                  <div className="find-us-detail" style={findUsTextStyle}>
-                    <MapPin className="find-us-detail__icon" aria-hidden="true" />
-                    <div>
-                      <EditableElement
-                        id="findUs.addressLabel"
-                        label="Modifier le libellé de l'adresse"
-                        onEdit={onEdit}
-                        className="block"
-                        buttonClassName="right-0 -top-3"
-                      >
-                        {renderRichTextElement(
-                          'findUs.addressLabel',
-                          'h3',
-                          {
-                            className: 'find-us-detail__title',
-                            style: getElementTextStyle('findUs.addressLabel'),
-                          },
-                          content.findUs.addressLabel,
-                        )}
-                      </EditableElement>
-                      <EditableElement
-                        id="findUs.address"
-                        label="Modifier l'adresse"
-                        onEdit={onEdit}
-                        className="mt-1 block"
-                        buttonClassName="right-0 -top-3"
-                      >
-                        {renderRichTextElement(
-                          'findUs.address',
-                          'p',
-                          {
-                            className: 'find-us-detail__text',
-                            style: getElementBodyTextStyle('findUs.address'),
-                          },
-                          content.findUs.address,
-                        )}
-                      </EditableElement>
-                    </div>
-                  </div>
-                <div className="find-us-detail" style={findUsTextStyle}>
-                  <Clock className="find-us-detail__icon" aria-hidden="true" />
-                  <div>
+            <div className="container mx-auto px-4 text-center">
+              <EditableElement
+                id="menu.title"
+                label="Modifier le titre du Menu"
+                onEdit={onEdit}
+                as="h2"
+                className="text-4xl font-bold mb-8"
+                style={getElementTextStyle('menu.title', globalStyle)}
+              >
+                {siteContent.menu.title}
+              </EditableElement>
+              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mt-8">
+                {siteContent.menu.items.map((item, index) => (
+                  <div key={index} className="bg-white p-6 rounded-lg shadow-lg">
+                    <img src={item.image} alt={item.name} className="w-full h-48 object-cover rounded-md mb-4" />
                     <EditableElement
-                      id="findUs.hoursLabel"
-                      label="Modifier le libellé des horaires"
+                      id={`menu.items.${index}.name`}
+                      label={`Modifier le nom de l'élément de menu ${index + 1}`}
                       onEdit={onEdit}
-                      className="block"
-                      buttonClassName="right-0 -top-3"
+                      as="h3"
+                      className="text-2xl font-bold mb-2"
+                      style={getElementTextStyle(`menu.items.${index}.name`, globalStyle)}
                     >
-                      {renderRichTextElement(
-                        'findUs.hoursLabel',
-                        'h3',
-                        {
-                          className: 'find-us-detail__title',
-                          style: getElementTextStyle('findUs.hoursLabel'),
-                        },
-                        content.findUs.hoursLabel,
-                      )}
+                      {item.name}
                     </EditableElement>
                     <EditableElement
-                      id="findUs.hours"
-                      label="Modifier les horaires"
+                      id={`menu.items.${index}.description`}
+                      label={`Modifier la description de l'élément de menu ${index + 1}`}
                       onEdit={onEdit}
-                      className="mt-1 block"
-                      buttonClassName="right-0 -top-3"
+                      as="p"
+                      className="text-gray-600 mb-4"
+                      style={getElementBodyTextStyle(`menu.items.${index}.description`, globalStyle)}
                     >
-                      {renderRichTextElement(
-                        'findUs.hours',
-                        'p',
-                        {
-                          className: 'find-us-detail__text',
-                          style: getElementBodyTextStyle('findUs.hours'),
-                        },
-                        content.findUs.hours,
-                      )}
+                      {item.description}
                     </EditableElement>
-                  </div>
-                </div>
-                <div className="find-us-detail" style={findUsTextStyle}>
-                  <Mail className="find-us-detail__icon" aria-hidden="true" />
-                  <div>
                     <EditableElement
-                      id="findUs.cityLabel"
-                      label="Modifier le libellé de l'email"
+                      id={`menu.items.${index}.price`}
+                      label={`Modifier le prix de l'élément de menu ${index + 1}`}
                       onEdit={onEdit}
-                      className="block"
-                      buttonClassName="right-0 -top-3"
+                      as="span"
+                      className="text-xl font-semibold text-brand-primary"
+                      style={getElementTextStyle(`menu.items.${index}.price`, globalStyle)}
                     >
-                      {renderRichTextElement(
-                        'findUs.cityLabel',
-                        'h3',
-                        {
-                          className: 'find-us-detail__title',
-                          style: getElementTextStyle('findUs.cityLabel'),
-                        },
-                        content.findUs.cityLabel,
-                      )}
+                      {item.price}
                     </EditableElement>
+                  </div>
+                ))}
+              </div>
+            </div>
+          </section>
+        );
+      case 'testimonials':
+        return (
+          <section
+            className={`py-16 bg-gray-100 ${selectedElement === zone.id ? 'border-2 border-blue-500' : ''}`}
+            style={zoneStyleMap.get(zone.id)}
+            onClick={() => onEdit(zone.id, 'zone')}
+          >
+            <div className="container mx-auto px-4 text-center">
+              <EditableElement
+                id="testimonials.title"
+                label="Modifier le titre des Témoignages"
+                onEdit={onEdit}
+                as="h2"
+                className="text-4xl font-bold mb-8"
+                style={getElementTextStyle('testimonials.title', globalStyle)}
+              >
+                {siteContent.testimonials.title}
+              </EditableElement>
+              <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mt-8">
+                {siteContent.testimonials.items.map((testimonial, index) => (
+                  <div key={index} className="bg-white p-6 rounded-lg shadow-lg">
                     <EditableElement
-                      id="findUs.city"
-                      label="Modifier l'email"
+                      id={`testimonials.items.${index}.quote`}
+                      label={`Modifier la citation du témoignage ${index + 1}`}
                       onEdit={onEdit}
-                      className="mt-1 block"
-                      buttonClassName="right-0 -top-3"
+                      as="p"
+                      className="text-lg italic mb-4"
+                      style={getElementBodyTextStyle(`testimonials.items.${index}.quote`, globalStyle)}
                     >
-                      {renderRichTextElement(
-                        'findUs.city',
-                        'p',
-                        {
-                          className: 'find-us-detail__text',
-                          style: getElementBodyTextStyle('findUs.city'),
-                        },
-                        content.findUs.city,
-                      )}
+                      {testimonial.quote}
                     </EditableElement>
-                  </div>
-                </div>
-                </div>
-              </div>
-              <div className="find-us-map" style={findUsTextStyle}>
-                {encodedFindUsQuery ? (
-                  <div className="find-us-map__frame">
-                    <iframe
-                      title={`Carte Google Maps pour ${findUsMapQuery}`}
-                      src={findUsMapEmbedUrl}
-                      loading="lazy"
-                      allowFullScreen
-                      referrerPolicy="no-referrer-when-downgrade"
-                    />
-                    <a
-                      className="find-us-map__link"
-                      href={findUsMapUrl}
-                      target="_blank"
-                      rel="noopener noreferrer"
-                    >
-                      <EditableElement
-                        id="findUs.mapLabel"
-                        label="Modifier le libellé du lien Google Maps"
-                        onEdit={onEdit}
-                        className="inline-flex"
-                        buttonClassName="-right-3 -top-3"
-                        as="span"
-                      >
-                        {renderRichTextElement(
-                          'findUs.mapLabel',
-                          'span',
-                          {
-                            className: 'find-us-map__label',
-                            style: getElementBodyTextStyle('findUs.mapLabel'),
-                          },
-                          content.findUs.mapLabel,
-                        )}
-                      </EditableElement>
-                    </a>
-                  </div>
-                ) : (
-                  <div className="find-us-map__placeholder">
                     <EditableElement
-                      id="findUs.mapLabel"
-                      label="Modifier le libellé du lien Google Maps"
+                      id={`testimonials.items.${index}.author`}
+                      label={`Modifier l'auteur du témoignage ${index + 1}`}
                       onEdit={onEdit}
-                      className="inline-flex"
-                      buttonClassName="-right-3 -top-3"
-                      as="span"
+                      as="p"
+                      className="font-bold text-brand-primary"
+                      style={getElementTextStyle(`testimonials.items.${index}.author`, globalStyle)}
                     >
-                      {renderRichTextElement(
-                        'findUs.mapLabel',
-                        'span',
-                        {
-                          className: 'find-us-map__label',
-                          style: getElementBodyTextStyle('findUs.mapLabel'),
-                        },
-                        content.findUs.mapLabel,
-                      )}
+                      - {testimonial.author}
                     </EditableElement>
                   </div>
-                )}
+                ))}
               </div>
             </div>
           </section>
-        </EditableElement>
-      </SectionCard>
-
-      <SectionCard zone="footer" activeZone={activeZone}>
-        <EditableElement
-          id="footer.style.background"
-          label="Modifier le fond du pied de page"
-          onEdit={onEdit}
-          className="block"
-          buttonClassName="right-4 top-4"
-        >
-          <footer className="site-footer" style={{ ...footerBackgroundStyle, ...footerTextStyle }}>
-            <div className="layout-container site-footer__inner" style={footerTextStyle}>
+        );
+      case 'gallery':
+        return (
+          <section
+            className={`py-16 ${selectedElement === zone.id ? 'border-2 border-blue-500' : ''}`}
+            style={zoneStyleMap.get(zone.id)}
+            onClick={() => onEdit(zone.id, 'zone')}
+          >
+            <div className="container mx-auto px-4 text-center">
+              <EditableElement
+                id="gallery.title"
+                label="Modifier le titre de la Galerie"
+                onEdit={onEdit}
+                as="h2"
+                className="text-4xl font-bold mb-8"
+                style={getElementTextStyle('gallery.title', globalStyle)}
+              >
+                {siteContent.gallery.title}
+              </EditableElement>
+              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-8">
+                {siteContent.gallery.images.map((image, index) => (
+                  <div key={index} className="overflow-hidden rounded-lg shadow-lg">
+                    <img src={image.src} alt={image.alt} className="w-full h-64 object-cover" />
+                  </div>
+                ))}
+              </div>
+            </div>
+          </section>
+        );
+      case 'contact':
+        return (
+          <section
+            className={`py-16 bg-gray-100 ${selectedElement === zone.id ? 'border-2 border-blue-500' : ''}`}
+            style={zoneStyleMap.get(zone.id)}
+            onClick={() => onEdit(zone.id, 'zone')}
+          >
+            <div className="container mx-auto px-4 text-center">
+              <EditableElement
+                id="contact.title"
+                label="Modifier le titre Contact"
+                onEdit={onEdit}
+                as="h2"
+                className="text-4xl font-bold mb-8"
+                style={getElementTextStyle('contact.title', globalStyle)}
+              >
+                {siteContent.contact.title}
+              </EditableElement>
+              <div className="max-w-xl mx-auto text-lg space-y-4">
+                <EditableElement
+                  id="contact.address"
+                  label="Modifier l'adresse"
+                  onEdit={onEdit}
+                  as="p"
+                  style={getElementBodyTextStyle('contact.address', globalStyle)}
+                >
+                  {siteContent.contact.address}
+                </EditableElement>
+                <EditableElement
+                  id="contact.phone"
+                  label="Modifier le numéro de téléphone"
+                  onEdit={onEdit}
+                  as="p"
+                  style={getElementBodyTextStyle('contact.phone', globalStyle)}
+                >
+                  {siteContent.contact.phone}
+                </EditableElement>
+                <EditableElement
+                  id="contact.email"
+                  label="Modifier l'email"
+                  onEdit={onEdit}
+                  as="p"
+                  style={getElementBodyTextStyle('contact.email', globalStyle)}
+                >
+                  {siteContent.contact.email}
+                </EditableElement>
+                <EditableElement
+                  id="contact.hours"
+                  label="Modifier les heures d'ouverture"
+                  onEdit={onEdit}
+                  as="p"
+                  style={getElementBodyTextStyle('contact.hours', globalStyle)}
+                >
+                  {siteContent.contact.hours}
+                </EditableElement>
+              </div>
+              <div className="mt-8">
+                <EditableElement
+                  id="contact.mapLinkText"
+                  label="Modifier le texte du lien de la carte"
+                  onEdit={onEdit}
+                  as="a"
+                  href={siteContent.contact.findUsMapUrl}
+                  target="_blank"
+                  rel="noopener noreferrer"
+                  className="text-brand-primary hover:underline"
+                  style={getElementTextStyle('contact.mapLinkText', globalStyle)}
+                >
+                  {siteContent.contact.mapLinkText}
+                </EditableElement>
+              </div>
+            </div>
+          </section>
+        );
+      case 'footer':
+        return (
+          <footer
+            className={`py-8 bg-gray-800 text-white text-center ${selectedElement === zone.id ? 'border-2 border-blue-500' : ''}`}
+            style={zoneStyleMap.get(zone.id)}
+            onClick={() => onEdit(zone.id, 'zone')}
+          >
+            <div className="container mx-auto px-4">
               <EditableElement
-                id="footer.text"
-                label="Modifier le texte du pied de page"
+                id="footer.copyright"
+                label="Modifier le texte de copyright"
                 onEdit={onEdit}
-                className="block"
-                buttonClassName="right-0 -top-3"
+                as="p"
+                className="text-sm"
+                style={getElementBodyTextStyle('footer.copyright', globalStyle)}
               >
-                <p style={getElementBodyTextStyle('footer.text')}>
-                  &copy; {new Date().getFullYear()} {content.navigation.brand}.{' '}
-                  {renderRichTextElement(
-                    'footer.text',
-                    'span',
-                    {
-                      style: getElementBodyTextStyle('footer.text'),
-                    },
-                    content.footer.text,
-                  )}
-                </p>
+                {siteContent.footer.copyright}
               </EditableElement>
             </div>
           </footer>
-        </EditableElement>
-      </SectionCard>
-      </div>
-    </EditButtonVisibilityContext.Provider>
+        );
+      default:
+        return null;
+    }
+  }, [siteContent, onEdit, selectedElement, zoneStyleMap, elementStyles, elementRichText, globalStyle]);
+
+  return (
+    <div className="relative min-h-screen bg-gray-50 font-sans">
+      {siteContent.zones.map(zone => (
+        <React.Fragment key={zone.id}>
+          {renderZoneContent(zone)}
+        </React.Fragment>
+      ))}
+    </div>
   );
 };
 
 export default SitePreviewCanvas;
+
diff --git a/package.json b/package.json
index bd46c13..e427cc6 100644
--- a/package.json
+++ b/package.json
@@ -2,7 +2,7 @@
   "name": "ouiouitacos_pos",
   "private": true,
   "version": "0.0.0",
-  "type": "module",
+
   "scripts": {
     "dev": "vite",
     "build": "vite build",
@@ -10,21 +10,19 @@
     "test": "vitest"
   },
   "dependencies": {
+    "@netlify/functions": "^2.6.0",
     "@supabase/supabase-js": "^2.47.12",
+    "lucide-react": "^0.544.0",
     "react": "^19.1.1",
     "react-dom": "^19.1.1",
     "react-router-dom": "^7.9.1",
-    "lucide-react": "^0.544.0",
-    "recharts": "^3.2.1"
+    "recharts": "^3.2.1",
+    "zod": "^4.1.11"
   },
   "devDependencies": {
     "@types/node": "^22.14.0",
     "@vitejs/plugin-react": "^5.0.0",
-    "autoprefixer": "^10.4.20",
-    "postcss": "^8.4.49",
-    "tailwindcss": "^3.4.16",
-    "typescript": "~5.8.2",
     "vite": "^6.2.0",
-    "vitest": "^2.1.5"
+    "vitest": "^3.2.4"
   }
 }
diff --git a/pages/Produits.tsx b/pages/Produits.tsx
index 245d5f9..c64fbc0 100644
--- a/pages/Produits.tsx
+++ b/pages/Produits.tsx
@@ -1,5 +1,3 @@
-
-
 import React, { useState, useEffect, useMemo, useCallback } from 'react';
 import { useAuth } from '../contexts/AuthContext';
 import { api } from '../services/api';
@@ -192,12 +190,12 @@ const Produits: React.FC = () => {
             )}
         </div>
     );
-};
+});
 
 
 // --- Child Components ---
 
-const ProductCard: React.FC<{ product: Product; category?: Category; onEdit: () => void; onDelete: () => void; onStatusChange: (product: Product, newStatus: Product['estado']) => void; canEdit: boolean; }> = ({ product, category, onEdit, onDelete, onStatusChange, canEdit }) => {
+const ProductCard = React.memo(({ product, category, onEdit, onDelete, onStatusChange, canEdit }: { product: Product; category?: Category; onEdit: () => void; onDelete: () => void; onStatusChange: (product: Product, newStatus: Product["estado"]) => void; canEdit: boolean; }) => {
     const { text, color, Icon } = getStatusInfo(product.estado);
     const [menuOpen, setMenuOpen] = useState(false);
     
@@ -207,7 +205,7 @@ const ProductCard: React.FC<{ product: Product; category?: Category; onEdit: ()
     return (
         <div className="ui-card flex flex-col overflow-hidden">
             <div className="relative">
-                <img src={product.image} alt={product.nom_produit} className="w-full h-40 object-cover" />
+                <img src={resolveProductImageUrl(product.image, 300, 160)} alt={product.nom_produit} className="w-full h-40 object-cover" />
                 {product.is_best_seller && (
                     <span className="absolute top-2 left-2 rounded-full bg-brand-primary/90 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-white shadow-md">
                         Best seller{product.best_seller_rank ? ` #${product.best_seller_rank}` : ''}
@@ -230,7 +228,13 @@ const ProductCard: React.FC<{ product: Product; category?: Category; onEdit: ()
                     </span>
                     {canEdit && (
                         <div className="relative">
-                            <button onClick={() => setMenuOpen(!menuOpen)} className="p-1 text-gray-500 hover:text-gray-800"><MoreVertical size={20} /></button>
+                            <button
+                                onClick={() => setMenuOpen(!menuOpen)}
+                                className="p-1 text-gray-500 hover:text-gray-800"
+                                aria-haspopup="true"
+                                aria-expanded={menuOpen}
+                                aria-label="Options du produit"
+                            ><MoreVertical size={20} /></button>
                             {menuOpen && (
                                 <div className="absolute right-0 bottom-full mb-2 w-48 bg-white rounded-md shadow-lg z-10 border">
                                     <button onClick={() => { onEdit(); setMenuOpen(false); }} className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Modifier</button>
@@ -250,8 +254,7 @@ const ProductCard: React.FC<{ product: Product; category?: Category; onEdit: ()
             </div>
         </div>
     );
-};
-
+});
 
 type ProductFormState = {
     nom_produit: string;
@@ -347,323 +350,286 @@ const AddEditProductModal: React.FC<{ isOpen: boolean; onClose: () => void; onSu
     const handleRecipeChange = (
         index: number,
         field: keyof RecipeItem,
-        event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,
+        value: string | number
     ) => {
-        const newRecipe = [...formData.recipe];
-        if (field === 'qte_utilisee') {
-            const { valueAsNumber, value } = event.currentTarget;
-            const normalizedValue = Number.isNaN(valueAsNumber) ? Number(value.replace(',', '.')) : valueAsNumber;
-            newRecipe[index] = {
-                ...newRecipe[index],
-                [field]: Number.isNaN(normalizedValue) ? newRecipe[index].qte_utilisee : normalizedValue,
-            };
-        } else {
-            newRecipe[index] = { ...newRecipe[index], [field]: event.currentTarget.value };
+        const updatedRecipe = [...formData.recipe];
+        const numericValue = typeof value === 'string' ? parseFloat(value) : value;
+        if (!isNaN(numericValue)) {
+            (updatedRecipe[index] as any)[field] = numericValue;
+            setFormData({ ...formData, recipe: updatedRecipe });
         }
-        setFormData(prev => ({ ...prev, recipe: newRecipe }));
     };
 
     const addRecipeItem = () => {
-        if (ingredients.length === 0) return;
-        setFormData({ ...formData, recipe: [...formData.recipe, { ingredient_id: ingredients[0].id, qte_utilisee: 0 }] });
+        setFormData({
+            ...formData,
+            recipe: [...formData.recipe, { ingredient_id: '', qte_utilisee: 0 }]
+        });
     };
-    
+
     const removeRecipeItem = (index: number) => {
-        const newRecipe = formData.recipe.filter((_, i) => i !== index);
-        setFormData({ ...formData, recipe: newRecipe });
+        const updatedRecipe = formData.recipe.filter((_, i) => i !== index);
+        setFormData({ ...formData, recipe: updatedRecipe });
+    };
+
+    const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+        if (e.target.files && e.target.files[0]) {
+            setImageFile(e.target.files[0]);
+        }
     };
 
     const handleSubmit = async (e: React.FormEvent) => {
         e.preventDefault();
-        if (formData.recipe.length === 0) {
-            alert("Veuillez ajouter au moins un ingrédient à la recette.");
-            return;
-        }
-        if (formData.is_best_seller) {
-            if (formData.best_seller_rank == null) {
-                alert('Veuillez sélectionner une position de best seller disponible.');
-                return;
-            }
-            const occupant = occupiedPositions.get(formData.best_seller_rank);
-            if (occupant && occupant.id !== product?.id) {
-                alert(`La position ${formData.best_seller_rank} est déjà occupée par ${occupant.nom_produit}.`);
-                return;
-            }
-        }
         setSubmitting(true);
+
         try {
-            let imageUrl = formData.image?.trim() ?? '';
+            let imageUrl = formData.image;
             if (imageFile) {
-                imageUrl = await uploadProductImage(imageFile, formData.nom_produit);
+                imageUrl = await uploadProductImage(imageFile);
             }
 
-            const finalData = {
+            const productData = {
                 ...formData,
+                cout_revient: recipeCost,
                 image: imageUrl,
-                is_best_seller: formData.is_best_seller,
-                best_seller_rank: formData.is_best_seller ? formData.best_seller_rank : null,
             };
 
-            if (mode === 'edit' && product) {
-                await api.updateProduct(product.id, finalData);
-            } else {
-                await api.addProduct(finalData as Omit<Product, 'id'>);
+            if (mode === 'add') {
+                await api.createProduct(productData);
+            } else if (product) {
+                await api.updateProduct(product.id, productData);
             }
+
             onSuccess();
-            setImageFile(null);
             onClose();
         } catch (error) {
-            console.error("Failed to save product", error);
-            const message = error instanceof Error ? error.message : "Une erreur inconnue s'est produite.";
-            alert(`Échec du téléversement de l'image du produit : ${message}`);
+            console.error('Failed to save product', error);
+            alert('Error saving product');
         } finally {
             setSubmitting(false);
         }
     };
 
+    const availableRanks = BEST_SELLER_RANKS.filter(rank => {
+        const occupant = occupiedPositions.get(rank);
+        return !occupant || (product && occupant.id === product.id);
+    });
+
     return (
-        <Modal isOpen={isOpen} onClose={onClose} title={mode === 'add' ? 'Ajouter un Produit' : 'Modifier le Produit'} size="lg">
+        <Modal isOpen={isOpen} onClose={onClose} title={`${mode === 'add' ? 'Ajouter' : 'Modifier'} un Produit`}>
             <form onSubmit={handleSubmit} className="space-y-4">
-                 <div className="max-h-[65vh] overflow-y-auto pr-2 space-y-4">
-                    <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
-                        <div>
-                            <label className="block text-sm font-medium text-gray-700">Nom</label>
-                            <input type="text" value={formData.nom_produit} onChange={e => setFormData({...formData, nom_produit: e.target.value})} required className="mt-1 ui-input"/>
-                        </div>
-                        <div>
-                            <label className="block text-sm font-medium text-gray-700">Prix de vente</label>
-                            <input
-                                type="number"
-                                step="0.01"
-                                min="0"
-                                value={formData.prix_vente}
-                                onChange={event => {
-                                    const { valueAsNumber, value } = event.currentTarget;
-                                    const normalizedValue = Number.isNaN(valueAsNumber)
-                                        ? Number(value.replace(',', '.'))
-                                        : valueAsNumber;
-                                    setFormData(prev => ({
-                                        ...prev,
-                                        prix_vente: Number.isNaN(normalizedValue) ? prev.prix_vente : normalizedValue,
-                                    }));
-                                }}
-                                required
-                                className="mt-1 ui-input"
-                            />
-                        </div>
-                        <div>
-                            <label className="block text-sm font-medium text-gray-700">Catégorie</label>
-                            <select value={formData.categoria_id} onChange={e => setFormData({...formData, categoria_id: e.target.value})} required className="mt-1 ui-select">
-                                {categories.map(c => <option key={c.id} value={c.id}>{c.nom}</option>)}
-                            </select>
-                        </div>
-                        <div>
-                            <label className="block text-sm font-medium text-gray-700">Statut</label>
-                            <select value={formData.estado} onChange={e => setFormData({...formData, estado: e.target.value as Product['estado']})} required className="mt-1 ui-select">
-                                <option value="disponible">Disponible</option>
-                                <option value="agotado_temporal">Rupture (Temp.)</option>
-                                <option value="agotado_indefinido">Indisponible</option>
-                            </select>
-                        </div>
-                        <div className="sm:col-span-2 flex items-center gap-2 pt-2">
-                            <input
-                                id="best-seller-toggle"
-                                type="checkbox"
-                                checked={formData.is_best_seller}
-                                onChange={event => handleBestSellerToggle(event.target.checked)}
-                                className="h-4 w-4 rounded border-gray-300 text-brand-primary focus:ring-brand-primary"
-                            />
-                            <label htmlFor="best-seller-toggle" className="text-sm font-medium text-gray-700">Best seller</label>
-                        </div>
-                        <div className="sm:col-span-2">
-                            <label className="block text-sm font-medium text-gray-700" htmlFor="best-seller-rank">Position dans le classement</label>
+                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+                    <input
+                        type="text"
+                        placeholder="Nom du produit"
+                        value={formData.nom_produit}
+                        onChange={e => setFormData({ ...formData, nom_produit: e.target.value })}
+                        className="ui-input"
+                        required
+                    />
+                    <input
+                        type="number"
+                        placeholder="Prix de vente"
+                        value={formData.prix_vente}
+                        onChange={e => setFormData({ ...formData, prix_vente: parseFloat(e.target.value) || 0 })}
+                        className="ui-input"
+                        required
+                    />
+                    <select
+                        value={formData.categoria_id}
+                        onChange={e => setFormData({ ...formData, categoria_id: e.target.value })}
+                        className="ui-select"
+                        required
+                    >
+                        <option value="" disabled>Sélectionner une catégorie</option>
+                        {categories.map(cat => <option key={cat.id} value={cat.id}>{cat.nom}</option>)}
+                    </select>
+                    <select
+                        value={formData.estado}
+                        onChange={e => setFormData({ ...formData, estado: e.target.value as Product['estado'] })}
+                        className="ui-select"
+                        required
+                    >
+                        <option value="disponible">Disponible</option>
+                        <option value="agotado_temporal">Rupture (Temp.)</option>
+                        <option value="agotado_indefinido">Indisponible</option>
+                    </select>
+                </div>
+                <textarea
+                    placeholder="Description"
+                    value={formData.description}
+                    onChange={e => setFormData({ ...formData, description: e.target.value })}
+                    className="ui-textarea"
+                />
+                <div className="flex items-center gap-4">
+                    <input type="file" onChange={handleImageChange} className="ui-input" />
+                    {formData.image && !imageFile && <img src={resolveProductImageUrl(formData.image, 50, 50)} alt="Aperçu" className="w-12 h-12 object-cover rounded" />}
+                    {imageFile && <img src={URL.createObjectURL(imageFile)} alt="Aperçu" className="w-12 h-12 object-cover rounded" />}
+                </div>
+
+                <div className="space-y-2 pt-4 border-t">
+                    <h4 className="font-semibold">Recette & Coût de revient</h4>
+                    {formData.recipe.map((item, index) => (
+                        <div key={index} className="flex items-center gap-2">
                             <select
-                                id="best-seller-rank"
-                                value={formData.best_seller_rank ?? ''}
-                                onChange={handleBestSellerRankChange}
-                                disabled={!formData.is_best_seller}
-                                className="mt-1 ui-select"
+                                value={item.ingredient_id}
+                                onChange={e => handleRecipeChange(index, 'ingredient_id', e.target.value)}
+                                className="ui-select flex-grow"
                             >
-                                <option value="">Sélectionner une position</option>
-                                {BEST_SELLER_RANKS.map(rank => {
-                                    const occupant = occupiedPositions.get(rank);
-                                    const isCurrentProduct = occupant?.id === product?.id;
-                                    const isDisabled = Boolean(occupant && !isCurrentProduct);
-                                    const label = occupant
-                                        ? isCurrentProduct
-                                            ? `${rank} – Position actuelle`
-                                            : `${rank} – Occupé par ${occupant.nom_produit}`
-                                        : `${rank}`;
-                                    return (
-                                        <option key={rank} value={rank} disabled={isDisabled}>
-                                            {label}
-                                        </option>
-                                    );
-                                })}
+                                <option value="" disabled>Choisir ingrédient</option>
+                                {ingredients.map(ing => <option key={ing.id} value={ing.id}>{ing.nom_ingredient} ({ing.unite})</option>)}
                             </select>
-                            {formData.is_best_seller && formData.best_seller_rank === null && (
-                                <p className="mt-1 text-xs text-red-600">Sélectionnez une position disponible pour ce best seller.</p>
-                            )}
+                            <input
+                                type="number"
+                                placeholder="Quantité"
+                                value={item.qte_utilisee}
+                                onChange={e => handleRecipeChange(index, 'qte_utilisee', e.target.value)}
+                                className="ui-input w-28"
+                            />
+                            <button type="button" onClick={() => removeRecipeItem(index)} className="ui-btn-danger p-2"><Trash2 size={16} /></button>
                         </div>
+                    ))}
+                    <button type="button" onClick={addRecipeItem} className="ui-btn-secondary text-sm">Ajouter ingrédient</button>
+                    <div className="pt-2 text-sm font-medium text-gray-700">
+                        Coût de revient estimé: {formatCurrencyCOP(recipeCost)}
                     </div>
-
-                    <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 bg-gray-50 border border-gray-200 rounded-lg p-4 text-sm text-gray-700">
-                        <div>
-                            <p className="text-xs uppercase tracking-wide text-gray-500">Coût de revient</p>
-                            <p className="text-lg font-semibold text-gray-900">{formatCurrencyCOP(recipeCost)}</p>
-                        </div>
-                        <div>
-                            <p className="text-xs uppercase tracking-wide text-gray-500">Marge</p>
-                            <p className={`text-lg font-semibold ${marginValue >= 0 ? 'text-emerald-600' : 'text-red-600'}`}>{formatCurrencyCOP(marginValue)}</p>
-                        </div>
-                        <div>
-                            <p className="text-xs uppercase tracking-wide text-gray-500">Marge %</p>
-                            <p className={`text-lg font-semibold ${marginPercentage >= 0 ? 'text-emerald-600' : 'text-red-600'}`}>{Number.isFinite(marginPercentage) ? formatIntegerAmount(marginPercentage) : '0'}%</p>
-                        </div>
+                    <div className="text-sm font-medium text-gray-700">
+                        Marge: {formatCurrencyCOP(marginValue)} ({marginPercentage.toFixed(2)}%)
                     </div>
+                </div>
 
-                    <div>
-                        <label className="block text-sm font-medium text-gray-700">Description</label>
-                        <textarea
-                            rows={3}
-                            value={formData.description}
-                            onChange={e => setFormData({...formData, description: e.target.value})}
-                            className="mt-1 ui-textarea"
-                            placeholder="Courte description du produit..."
+                <div className="space-y-2 pt-4 border-t">
+                    <h4 className="font-semibold">Paramètres Best Seller</h4>
+                    <div className="flex items-center gap-2">
+                        <input
+                            type="checkbox"
+                            id="is_best_seller_toggle"
+                            checked={formData.is_best_seller}
+                            onChange={e => handleBestSellerToggle(e.target.checked)}
+                            className="h-4 w-4 rounded border-gray-300 text-brand-primary focus:ring-brand-primary"
                         />
+                        <label htmlFor="is_best_seller_toggle" className="text-sm font-medium text-gray-900">Marquer comme Best Seller</label>
                     </div>
-
-                    <div>
-                        <label className="block text-sm font-medium text-gray-700">Image du produit</label>
-                         <div className="mt-1 flex items-center gap-4">
-                            <img
-                                src={imageFile ? URL.createObjectURL(imageFile) : resolveProductImageUrl(formData.image)}
-                                alt="Aperçu"
-                                className="w-20 h-20 object-cover rounded-md bg-gray-100"
-                            />
-                             <label htmlFor="product-image-upload" className="cursor-pointer bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-brand-primary">
-                                 <div className="flex items-center gap-2">
-                                     <Upload size={16} />
-                                     <span>Changer l'image</span>
-                                 </div>
-                                <input id="product-image-upload" type="file" className="sr-only" onChange={e => setImageFile(e.target.files ? e.target.files[0] : null)} />
-                            </label>
-                         </div>
-                    </div>
-
-
-                    <div>
-                        <h4 className="text-md font-semibold text-gray-800 border-b pb-2 mb-2">Recette</h4>
-                        {formData.recipe.length === 0 && (
-                            <div className="text-center p-2 my-2 bg-red-50 border border-red-200 rounded-md">
-                                <p className="text-sm text-red-600">Un produit doit contenir au moins un ingrédient.</p>
-                            </div>
-                        )}
-                        <div className="space-y-2">
-                            {formData.recipe.map((item, index) => (
-                                <div key={index} className="flex items-center gap-2">
-                                    <GripVertical className="text-gray-400 cursor-move" size={16}/>
-                                    <select value={item.ingredient_id} onChange={event => handleRecipeChange(index, 'ingredient_id', event)} className="ui-select flex-grow">
-                                        {ingredients.map(i => <option key={i.id} value={i.id}>{i.nom}</option>)}
-                                    </select>
-                                    <input type="number" placeholder="Qté" value={item.qte_utilisee} onChange={event => handleRecipeChange(index, 'qte_utilisee', event)} className="ui-input w-24" />
-                                    <span className="text-gray-500 text-sm w-12">{ingredients.find(i => i.id === item.ingredient_id)?.unite === 'kg' ? 'g' : ingredients.find(i => i.id === item.ingredient_id)?.unite}</span>
-                                    <button type="button" onClick={() => removeRecipeItem(index)} className="p-1 text-red-500 hover:bg-red-100 rounded-full"><Trash2 size={16}/></button>
-                                </div>
+                    {formData.is_best_seller && (
+                        <select
+                            value={formData.best_seller_rank ?? ''}
+                            onChange={handleBestSellerRankChange}
+                            className="ui-select"
+                        >
+                            <option value="" disabled>Choisir un rang</option>
+                            {availableRanks.map(rank => (
+                                <option key={rank} value={rank}>Rang #{rank}</option>
                             ))}
-                        </div>
-                        <button type="button" onClick={addRecipeItem} className="mt-2 text-sm text-blue-600 hover:underline">Ajouter un ingrédient</button>
-                    </div>
+                        </select>
+                    )}
                 </div>
 
-                <div className="flex flex-col sm:flex-row justify-end gap-3 pt-4 border-t">
-                    <button type="button" onClick={onClose} className="w-full sm:w-auto ui-btn-secondary py-3">Annuler</button>
-                    <button type="submit" disabled={isSubmitting || formData.recipe.length === 0} className="w-full sm:w-auto ui-btn-primary py-3 disabled:opacity-60">{isSubmitting ? 'Sauvegarde...' : 'Sauvegarder'}</button>
+                <div className="flex justify-end gap-2 pt-4">
+                    <button type="button" onClick={onClose} className="ui-btn-secondary">Annuler</button>
+                    <button type="submit" className="ui-btn-primary" disabled={isSubmitting}>
+                        {isSubmitting ? 'Sauvegarde...' : 'Sauvegarder'}
+                    </button>
                 </div>
             </form>
         </Modal>
     );
-};
+});
 
-const ManageCategoriesModal: React.FC<{ isOpen: boolean; onClose: () => void; onSuccess: () => void; categories: Category[] }> = ({ isOpen, onClose, onSuccess, categories }) => {
+const ManageCategoriesModal: React.FC<{ isOpen: boolean; onClose: () => void; onSuccess: () => void; categories: Category[]; }> = ({ isOpen, onClose, onSuccess, categories }) => {
     const [newCategoryName, setNewCategoryName] = useState('');
-    const [error, setError] = useState('');
+    const [isSubmitting, setSubmitting] = useState(false);
 
-    const handleAdd = async () => {
+    const handleAddCategory = async () => {
         if (!newCategoryName.trim()) return;
+        setSubmitting(true);
         try {
-            await api.addCategory(newCategoryName);
+            await api.createCategory({ nom: newCategoryName });
             setNewCategoryName('');
             onSuccess();
-        } catch (err) { console.error(err); }
+        } catch (error) {
+            console.error('Failed to add category', error);
+            alert('Error adding category');
+        } finally {
+            setSubmitting(false);
+        }
     };
-    
-    const handleDelete = async (id: string) => {
-        setError('');
+
+    const handleDeleteCategory = async (id: string) => {
+        if (!confirm('Êtes-vous sûr de vouloir supprimer cette catégorie ?')) return;
         try {
-            await api.deleteCategory(id);
+            await api.deleteEntity('categories', id);
             onSuccess();
-        } catch (err: any) {
-            setError(err.message);
-            console.error(err);
+        } catch (error) {
+            console.error('Failed to delete category', error);
+            alert('Error deleting category');
         }
     };
-    
+
     return (
         <Modal isOpen={isOpen} onClose={onClose} title="Gérer les Catégories">
             <div className="space-y-4">
-                <div className="flex gap-2">
-                    <input type="text" value={newCategoryName} onChange={e => setNewCategoryName(e.target.value)} placeholder="Nom de la nouvelle catégorie" className="ui-input flex-grow" />
-                    <button onClick={handleAdd} className="ui-btn-primary px-4">Ajouter</button>
+                <div>
+                    <h4 className="font-medium mb-2">Catégories existantes</h4>
+                    <ul className="space-y-2">
+                        {categories.map(cat => (
+                            <li key={cat.id} className="flex justify-between items-center bg-gray-50 p-2 rounded">
+                                <span>{cat.nom}</span>
+                                <button onClick={() => handleDeleteCategory(cat.id)} className="text-red-500 hover:text-red-700 p-1"><Trash2 size={16} /></button>
+                            </li>
+                        ))}
+                    </ul>
                 </div>
-                {error && <p className="text-red-500 text-sm">{error}</p>}
-                <ul className="space-y-2 max-h-60 overflow-y-auto">
-                    {categories.map(cat => (
-                        <li key={cat.id} className="flex justify-between items-center bg-gray-50 p-2 rounded">
-                            <span className="text-gray-800">{cat.nom}</span>
-                            <button onClick={() => handleDelete(cat.id)} className="p-1 text-red-500 hover:bg-red-100 rounded-full"><Trash2 size={16}/></button>
-                        </li>
-                    ))}
-                </ul>
-                 <div className="pt-4 flex">
-                    <button type="button" onClick={onClose} className="w-full ui-btn-secondary py-3">Fermer</button>
+                <div className="border-t pt-4">
+                    <h4 className="font-medium mb-2">Ajouter une catégorie</h4>
+                    <div className="flex gap-2">
+                        <input
+                            type="text"
+                            placeholder="Nom de la nouvelle catégorie"
+                            value={newCategoryName}
+                            onChange={e => setNewCategoryName(e.target.value)}
+                            className="ui-input flex-grow"
+                        />
+                        <button onClick={handleAddCategory} className="ui-btn-primary" disabled={isSubmitting}>
+                            {isSubmitting ? 'Ajout...' : 'Ajouter'}
+                        </button>
+                    </div>
+                </div>
+                <div className="flex justify-end pt-4">
+                    <button type="button" onClick={onClose} className="ui-btn-secondary">Fermer</button>
                 </div>
             </div>
         </Modal>
     );
-};
+});
 
-const DeleteProductModal: React.FC<{ isOpen: boolean; onClose: () => void; onSuccess: () => void; product: Product }> = ({ isOpen, onClose, onSuccess, product }) => {
+const DeleteProductModal: React.FC<{ isOpen: boolean; onClose: () => void; onSuccess: () => void; product: Product; }> = ({ isOpen, onClose, onSuccess, product }) => {
     const [isSubmitting, setSubmitting] = useState(false);
 
     const handleDelete = async () => {
         setSubmitting(true);
         try {
-            await api.deleteProduct(product.id);
+            await api.deleteEntity('products', product.id);
             onSuccess();
             onClose();
         } catch (error) {
-            console.error("Failed to delete product", error);
+            console.error('Failed to delete product', error);
+            alert('Error deleting product');
         } finally {
             setSubmitting(false);
         }
     };
 
     return (
-        <Modal isOpen={isOpen} onClose={onClose} title="Confirmer la Suppression">
-            <p className="text-gray-700">Êtes-vous sûr de vouloir supprimer le produit <strong className="text-gray-900">{product.nom_produit}</strong> ? Cette action est irréversible.</p>
-            <div className="flex flex-col sm:flex-row justify-end gap-3 pt-6">
-                <button type="button" onClick={onClose} className="w-full sm:w-auto ui-btn-secondary py-3">Annuler</button>
-                <button onClick={handleDelete} disabled={isSubmitting} className="w-full sm:w-auto ui-btn-danger py-3">{isSubmitting ? 'Suppression...' : 'Supprimer'}</button>
+        <Modal isOpen={isOpen} onClose={onClose} title="Supprimer le Produit">
+            <p>Êtes-vous sûr de vouloir supprimer le produit <strong>{product.nom_produit}</strong> ? Cette action est irréversible.</p>
+            <div className="flex justify-end gap-2 pt-4 mt-4">
+                <button type="button" onClick={onClose} className="ui-btn-secondary">Annuler</button>
+                <button onClick={handleDelete} className="ui-btn-danger" disabled={isSubmitting}>
+                    {isSubmitting ? 'Suppression...' : 'Supprimer'}
+                </button>
             </div>
         </Modal>
     );
-}
-
-// Simple helper components to avoid repetition
-const HelpCircle: React.FC<{ size: number }> = ({ size }) => (
-    <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>
-);
-
+});
 
 export default Produits;
diff --git a/pages/SiteCustomization.tsx b/pages/SiteCustomization.tsx
index 46c2b03..f6dcb89 100644
--- a/pages/SiteCustomization.tsx
+++ b/pages/SiteCustomization.tsx
@@ -9,14 +9,13 @@ import React, {
 } from 'react';
 import { createPortal } from 'react-dom';
 import { AlertTriangle, CheckCircle2, Loader2, Upload, X } from 'lucide-react';
-import SitePreviewCanvas, { resolveZoneFromElement } from '../components/SitePreviewCanvas';
+import SitePreviewCanvas from '../components/SitePreviewCanvas';
 import useSiteContent from '../hooks/useSiteContent';
 import RichTextEditor from '../components/RichTextEditor';
 import {
   CustomizationAsset,
   CustomizationAssetType,
   EditableElementKey,
-  EditableZoneKey,
   ElementStyle,
   Product,
   RichTextValue,
@@ -26,1436 +25,769 @@ import {
 } from '../types';
 import { api } from '../services/api';
 import { normalizeCloudinaryImageUrl, uploadCustomizationAsset } from '../services/cloudinary';
-import { sanitizeFontFamilyName } from '../utils/fonts';
-
-const FONT_FAMILY_SUGGESTIONS = [
-  'Inter',
-  'Poppins',
-  'Roboto',
-  'Montserrat',
-  'Playfair Display',
-  'Lora',
-  'Open Sans',
-  'Georgia, serif',
-  'Arial, sans-serif',
-] as const;
-
-const FONT_SIZE_SUGGESTIONS = [
-  '14px',
-  '16px',
-  '18px',
-  '20px',
-  '24px',
-  'clamp(1rem, 2vw, 1.5rem)',
-] as const;
-
-const COLOR_SUGGESTIONS = [
-  '#0f172a',
-  '#111827',
-  '#f8fafc',
-  '#ffffff',
-  '#e2e8f0',
-  '#f97316',
-  'transparent',
-  'currentColor',
-] as const;
-
-const TEXT_ELEMENT_KEYS = new Set<EditableElementKey>(STYLE_EDITABLE_ELEMENT_KEYS);
-
-const BACKGROUND_ELEMENT_KEYS = new Set<EditableElementKey>([
-  'navigation.style.background',
-  'hero.style.background',
-  'about.style.background',
-  'menu.style.background',
-  'instagramReviews.style.background',
-  'findUs.style.background',
-  'footer.style.background',
-]);
-
-const IMAGE_ELEMENT_KEYS = new Set<EditableElementKey>([
-  'hero.backgroundImage',
-  'about.image',
-  'menu.image',
-  'instagramReviews.image',
-  'navigation.brandLogo',
-  'navigation.staffLogo',
-]);
-
-const ELEMENT_LABELS: Partial<Record<EditableElementKey, string>> = {
-  'navigation.brand': 'Nom de la marque',
-  'navigation.brandLogo': 'Logo principal',
-  'navigation.staffLogo': "Logo d'accès équipe",
-  'navigation.links.home': 'Lien Accueil',
-  'navigation.links.about': 'Lien À propos',
-  'navigation.links.menu': 'Lien Menu',
-  'navigation.links.contact': 'Lien Contact',
-  'navigation.links.loginCta': "Bouton d'accès staff",
-  'navigation.style.background': 'Fond de la navigation',
-  'hero.title': 'Titre du hero',
-  'hero.subtitle': 'Sous-titre du hero',
-  'hero.ctaLabel': 'Bouton principal du hero',
-  'hero.historyTitle': "Titre de l'historique",
-  'hero.reorderCtaLabel': 'Bouton de réassort',
-  'hero.backgroundImage': 'Image du hero',
-  'hero.style.background': 'Fond du hero',
-  'about.title': 'Titre À propos',
-  'about.description': 'Texte À propos',
-  'about.image': 'Image À propos',
-  'about.style.background': 'Fond À propos',
-  'menu.title': 'Titre du menu',
-  'menu.ctaLabel': 'Bouton du menu',
-  'menu.loadingLabel': 'Texte de chargement du menu',
-  'menu.image': 'Image du menu',
-  'menu.style.background': 'Fond du menu',
-  'instagramReviews.title': 'Titre Avis Instagram',
-  'instagramReviews.subtitle': 'Sous-titre Avis Instagram',
-  'instagramReviews.image': 'Image Avis Instagram',
-  'instagramReviews.style.background': 'Fond Avis Instagram',
-  'findUs.title': 'Titre Encuéntranos',
-  'findUs.addressLabel': "Libellé de l'adresse (Encuéntranos)",
-  'findUs.address': 'Adresse (Encuéntranos)',
-  'findUs.cityLabel': "Libellé de contact",
-  'findUs.city': 'Email (Encuéntranos)',
-  'findUs.hoursLabel': 'Libellé des horaires',
-  'findUs.hours': 'Horaires',
-  'findUs.mapLabel': 'Libellé du lien carte',
-  'findUs.style.background': 'Fond Encuéntranos',
-  'footer.text': 'Texte du pied de page',
-  'footer.style.background': 'Fond du pied de page',
-};
-
-const TABS = [
-  { id: 'preview', label: 'Aperçu' },
-  { id: 'custom', label: 'Personnalisation' },
-] as const;
-
-type TabId = (typeof TABS)[number]['id'];
-
-type DraftUpdater = (current: SiteContent) => SiteContent;
-
-const createAssetId = (): string =>
-  typeof crypto !== 'undefined' && 'randomUUID' in crypto
-    ? crypto.randomUUID()
-    : `asset-${Date.now()}-${Math.random().toString(36).slice(2, 10)}`;
-
-const guessAssetType = (file: File): CustomizationAssetType => {
-  const { type, name } = file;
-  if (type.startsWith('image/')) {
-    return 'image';
-  }
-  if (type.startsWith('video/')) {
-    return 'video';
-  }
-  if (type.startsWith('audio/')) {
-    return 'audio';
-  }
-  if (type.includes('font')) {
-    return 'font';
-  }
-  const extension = name.split('.').pop()?.toLowerCase();
-  if (extension && ['ttf', 'otf', 'woff', 'woff2'].includes(extension)) {
-    return 'font';
-  }
-  return 'raw';
-};
-
-const cloneSiteContent = (content: SiteContent): SiteContent => {
-  if (typeof globalThis.structuredClone === 'function') {
-    return globalThis.structuredClone(content);
-  }
-  return JSON.parse(JSON.stringify(content)) as SiteContent;
-};
-
-const setNestedValue = (content: SiteContent, key: EditableElementKey, value: string | null): void => {
-  const segments = key.split('.');
-  const last = segments.pop();
-  if (!last) {
-    return;
-  }
-
-  let cursor: unknown = content;
-  segments.forEach(segment => {
-    if (cursor && typeof cursor === 'object') {
-      const target = (cursor as Record<string, unknown>)[segment];
-      if (target && typeof target === 'object') {
-        (cursor as Record<string, unknown>)[segment] = Array.isArray(target)
-          ? [...target]
-          : { ...target };
-      } else {
-        (cursor as Record<string, unknown>)[segment] = {};
-      }
-      cursor = (cursor as Record<string, unknown>)[segment];
-    }
-  });
-
-  if (cursor && typeof cursor === 'object') {
-    (cursor as Record<string, unknown>)[last] = value;
-  }
-};
-
-const applyElementStyleOverrides = (
-  content: SiteContent,
-  element: EditableElementKey,
-  overrides: Partial<ElementStyle>,
-): void => {
-  const sanitized: ElementStyle = {};
-
-  if (overrides.fontFamily && overrides.fontFamily.trim().length > 0) {
-    sanitized.fontFamily = overrides.fontFamily.trim();
-  }
-  if (overrides.fontSize && overrides.fontSize.trim().length > 0) {
-    sanitized.fontSize = overrides.fontSize.trim();
-  }
-  if (overrides.textColor && overrides.textColor.trim().length > 0) {
-    sanitized.textColor = overrides.textColor.trim();
-  }
-  if (overrides.backgroundColor && overrides.backgroundColor.trim().length > 0) {
-    sanitized.backgroundColor = overrides.backgroundColor.trim();
-  }
-
-  const nextStyles = { ...content.elementStyles };
-  if (Object.keys(sanitized).length === 0) {
-    delete nextStyles[element];
-  } else {
-    nextStyles[element] = sanitized;
-  }
-  content.elementStyles = nextStyles;
-};
-
-const applyElementRichText = (
-  content: SiteContent,
-  element: EditableElementKey,
-  value: RichTextValue | null,
-): void => {
-  const next = { ...content.elementRichText };
-  if (value && value.html.trim().length > 0) {
-    next[element] = value;
-  } else {
-    delete next[element];
-  }
-  content.elementRichText = next;
-};
-
-const applySectionBackground = (
-  content: SiteContent,
-  element: EditableElementKey,
-  background: SectionStyle['background'],
-): void => {
-  const zone = resolveZoneFromElement(element);
-  const zoneContent = { ...content[zone] } as typeof content[EditableZoneKey];
-  const style = { ...zoneContent.style, background: { ...background } };
-  zoneContent.style = style;
-  (content as Record<EditableZoneKey, typeof zoneContent>)[zone] = zoneContent;
-};
-
-const appendAsset = (content: SiteContent, asset: CustomizationAsset): void => {
-  const library = content.assets?.library ?? [];
-  const existingIndex = library.findIndex(item => item.url === asset.url || item.id === asset.id);
-  const nextLibrary = existingIndex >= 0
-    ? library.map((item, index) => (index === existingIndex ? asset : item))
-    : [...library, asset];
-  content.assets = { ...content.assets, library: nextLibrary };
-};
-
-const getPlainTextValue = (content: SiteContent, key: EditableElementKey): string => {
-  const segments = key.split('.');
-  let cursor: unknown = content;
-  for (const segment of segments) {
-    if (!cursor || typeof cursor !== 'object') {
-      return '';
-    }
-    cursor = (cursor as Record<string, unknown>)[segment];
-  }
-  return typeof cursor === 'string' ? cursor : '';
-};
-
-const getImageValue = (content: SiteContent, key: EditableElementKey): string | null => {
-  const value = getPlainTextValue(content, key);
-  return value.trim().length > 0 ? value : null;
-};
-
-const getElementStyle = (content: SiteContent, key: EditableElementKey): ElementStyle =>
-  content.elementStyles[key] ?? {};
-
-const getElementRichTextValue = (content: SiteContent, key: EditableElementKey): RichTextValue | null =>
-  content.elementRichText[key] ?? null;
-
-const getSectionBackground = (content: SiteContent, key: EditableElementKey): SectionStyle['background'] => {
-  const zone = resolveZoneFromElement(key);
-  return content[zone].style.background;
-};
-
-const createAssetFromFile = (file: File, url: string): CustomizationAsset => {
-  const baseName = file.name.replace(/\.[^/.]+$/, '').trim() || 'media';
-  const type = guessAssetType(file);
-  const name = type === 'font' ? sanitizeFontFamilyName(baseName) : baseName;
-  return {
-    id: createAssetId(),
-    name,
-    url,
-    format: file.type || 'application/octet-stream',
-    bytes: file.size,
-    type,
-    createdAt: new Date().toISOString(),
-  };
-};
+import {
+  FONT_FAMILY_SUGGESTIONS,
+  FONT_SIZE_SUGGESTIONS,
+  COLOR_SUGGESTIONS,
+  TEXT_ELEMENT_KEYS,
+  BACKGROUND_ELEMENT_KEYS,
+  IMAGE_ELEMENT_KEYS,
+  ELEMENT_LABELS,
+  TABS,
+  TabId,
+} from '../constants/siteCustomization';
+import {
+  DraftUpdater,
+  createAssetId,
+  guessAssetType,
+  cloneSiteContent,
+  setNestedValue,
+  applyElementStyleOverrides,
+  applyElementRichText,
+  applySectionBackground,
+  appendAsset,
+  getPlainTextValue,
+  getImageValue,
+  getElementStyle,
+  getElementRichTextValue,
+  getSectionBackground,
+  createAssetFromFile,
+  cloneAnchorRect,
+} from '../utils/siteCustomization';
+import EditorPopover from '../components/EditorPopover';
 
 type AnchorRect = Pick<DOMRectReadOnly, 'x' | 'y' | 'top' | 'left' | 'bottom' | 'right' | 'width' | 'height'>;
 
-const FOCUSABLE_SELECTOR =
-  'a[href], button:not([disabled]), textarea:not([disabled]), input:not([disabled]), select:not([disabled]), [tabindex]:not([tabindex="-1"])';
-
-const useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;
-
-const escapeAttributeValue = (value: string): string => {
-  if (typeof window !== 'undefined' && window.CSS && typeof window.CSS.escape === 'function') {
-    return window.CSS.escape(value);
-  }
-  return value.replace(/"/g, '\\"');
-};
-
-const cloneAnchorRect = (rect: DOMRect | DOMRectReadOnly | AnchorRect | null): AnchorRect | null => {
-  if (!rect) {
-    return null;
-  }
-  const { x, y, top, left, bottom, right, width, height } = rect;
-  return { x, y, top, left, bottom, right, width, height };
-};
-
-interface EditorPopoverProps {
-  title: string;
-  onClose: () => void;
-  children: React.ReactNode;
-  footer: React.ReactNode;
-  anchor: AnchorRect | null;
-  elementId: EditableElementKey;
-}
-
-const EditorPopover: React.FC<EditorPopoverProps> = ({
-  title,
-  onClose,
-  children,
-  footer,
-  anchor,
-  elementId,
-}) => {
-  const headingId = useId();
-  const containerRef = useRef<HTMLDivElement | null>(null);
-  const [position, setPosition] = useState<{ top: number; left: number }>({ top: 0, left: 0 });
-  const [placement, setPlacement] = useState<'top' | 'bottom'>('top');
-  const [isMounted, setIsMounted] = useState(false);
-  const [isPositioned, setIsPositioned] = useState(false);
-  const [arrowPosition, setArrowPosition] = useState<{ top: number; left: number } | null>(null);
+const SiteCustomization: React.FC = () => {
+  const { siteContent, updateSiteContent, isSaving, isError, isSuccess } = useSiteContent();
+  const [activeTab, setActiveTab] = useState<TabId>('preview');
+  const [draftContent, setDraftContent] = useState<SiteContent | null>(null);
+  const [activeElement, setActiveElement] = useState<EditableElementKey | null>(null);
+  const [activeElementAnchor, setActiveElementAnchor] = useState<AnchorRect | null>(null);
+  const [products, setProducts] = useState<Product[]>([]);
 
   useEffect(() => {
-    setIsMounted(true);
+    api.getProducts().then(setProducts);
   }, []);
 
-  const updatePosition = useCallback(() => {
-    if (typeof window === 'undefined') {
-      return;
-    }
-    const node = containerRef.current;
-    if (!node) {
-      return;
+  useEffect(() => {
+    if (siteContent) {
+      setDraftContent(cloneSiteContent(siteContent));
     }
+  }, [siteContent]);
 
-    const anchorSelector = `[data-element-id="${escapeAttributeValue(elementId)}"]`;
-    const anchorElement = document.querySelector(anchorSelector) as HTMLElement | null;
-    const rect = anchorElement?.getBoundingClientRect() ?? anchor;
-
-    const { width: dialogWidth, height: dialogHeight } = node.getBoundingClientRect();
-    const viewportWidth = document.documentElement.clientWidth;
-    const viewportHeight = window.innerHeight;
-    const gutter = 16;
-    const offset = 12;
+  const updateDraft = useCallback((updater: DraftUpdater) => {
+    setDraftContent(current => {
+      if (!current) {
+        return null;
+      }
+      const next = cloneSiteContent(current);
+      updater(next);
+      return next;
+    });
+  }, []);
 
-    if (!rect) {
-      const fallbackLeft = Math.max(gutter, (viewportWidth - dialogWidth) / 2);
-      const fallbackTop = Math.max(gutter, (viewportHeight - dialogHeight) / 2);
-      setPosition({ top: fallbackTop, left: fallbackLeft });
-      setPlacement('top');
-      setIsPositioned(true);
-      setArrowPosition(null);
-      return;
+  const handleSave = useCallback(() => {
+    if (draftContent) {
+      updateSiteContent(draftContent);
     }
+  }, [draftContent, updateSiteContent]);
 
-    let top = rect.top - dialogHeight - offset;
-    let currentPlacement: 'top' | 'bottom' = 'top';
-    if (top < gutter) {
-      top = rect.bottom + offset;
-      currentPlacement = 'bottom';
+  const handleReset = useCallback(() => {
+    if (siteContent) {
+      setDraftContent(cloneSiteContent(siteContent));
     }
+  }, [siteContent]);
 
-    if (top + dialogHeight > viewportHeight - gutter) {
-      const availableAbove = rect.top - gutter;
-      const availableBelow = viewportHeight - rect.bottom - gutter;
-      if (availableAbove > availableBelow) {
-        top = Math.max(gutter, rect.top - dialogHeight - offset);
-        currentPlacement = 'top';
-      } else {
-        top = Math.min(viewportHeight - dialogHeight - gutter, rect.bottom + offset);
-        currentPlacement = 'bottom';
-      }
-    }
+  const handleElementClick = useCallback((elementKey: EditableElementKey, rect: DOMRect) => {
+    setActiveElement(elementKey);
+    setActiveElementAnchor(cloneAnchorRect(rect));
+  }, []);
 
-    const desiredLeft = rect.left + rect.width / 2 - dialogWidth / 2;
-    const maxLeft = viewportWidth - dialogWidth - gutter;
-    const clampedLeft = Math.max(gutter, Math.min(desiredLeft, maxLeft));
+  const handleCloseEditor = useCallback(() => {
+    setActiveElement(null);
+    setActiveElementAnchor(null);
+  }, []);
 
-    setPosition({ top, left: clampedLeft });
-    setPlacement(currentPlacement);
-    setIsPositioned(true);
+  const handleTextChange = useCallback(
+    (elementKey: EditableElementKey, value: string) => {
+      updateDraft(content => setNestedValue(content, elementKey, value));
+    },
+    [updateDraft],
+  );
 
-    const arrowCenter = Math.max(
-      clampedLeft + 12,
-      Math.min(rect.left + rect.width / 2, clampedLeft + dialogWidth - 12),
-    );
-    const arrowTop = currentPlacement === 'top' ? top + dialogHeight - 6 : top - 6;
-    setArrowPosition({ top: arrowTop, left: arrowCenter - 6 });
-  }, [anchor, elementId]);
+  const handleStyleChange = useCallback(
+    (elementKey: EditableElementKey, style: Partial<ElementStyle>) => {
+      updateDraft(content => applyElementStyleOverrides(content, elementKey, style));
+    },
+    [updateDraft],
+  );
 
-  useIsomorphicLayoutEffect(() => {
-    if (!isMounted) {
-      return;
-    }
-    updatePosition();
-  }, [updatePosition, isMounted]);
+  const handleRichTextChange = useCallback(
+    (elementKey: EditableElementKey, value: RichTextValue | null) => {
+      updateDraft(content => applyElementRichText(content, elementKey, value));
+    },
+    [updateDraft],
+  );
 
-  useEffect(() => {
-    if (!isMounted) {
-      return;
-    }
-    const handleScroll = () => updatePosition();
-    window.addEventListener('scroll', handleScroll, true);
-    window.addEventListener('resize', handleScroll);
+  const handleBackgroundChange = useCallback(
+    (elementKey: EditableElementKey, background: SectionStyle['background']) => {
+      updateDraft(content => applySectionBackground(content, elementKey, background));
+    },
+    [updateDraft],
+  );
 
-    const anchorSelector = `[data-element-id="${escapeAttributeValue(elementId)}"]`;
-    const anchorElement = document.querySelector(anchorSelector) as HTMLElement | null;
-    const observers: ResizeObserver[] = [];
-    if (typeof ResizeObserver !== 'undefined') {
-      const resizeObserver = new ResizeObserver(() => updatePosition());
-      if (anchorElement) {
-        resizeObserver.observe(anchorElement);
-      }
-      const node = containerRef.current;
-      if (node) {
-        resizeObserver.observe(node);
+  const handleImageUpload = useCallback(
+    async (elementKey: EditableElementKey, file: File) => {
+      try {
+        const uploadedAsset = await uploadCustomizationAsset(file);
+        const asset = createAssetFromFile(file, uploadedAsset.url);
+        updateDraft(content => {
+          appendAsset(content, asset);
+          setNestedValue(content, elementKey, normalizeCloudinaryImageUrl(uploadedAsset.url));
+        });
+      } catch (error) {
+        notificationService.showError("Error uploading image:", error);
       }
-      observers.push(resizeObserver);
-    }
+    },
+    [updateDraft],
+  );
 
-    return () => {
-      window.removeEventListener('scroll', handleScroll, true);
-      window.removeEventListener('resize', handleScroll);
-      observers.forEach(observer => observer.disconnect());
-    };
-  }, [updatePosition, elementId, isMounted]);
+  const handleImageRemove = useCallback(
+    (elementKey: EditableElementKey) => {
+      updateDraft(content => setNestedValue(content, elementKey, null));
+    },
+    [updateDraft],
+  );
 
-  useEffect(() => {
-    if (!isMounted) {
-      return;
-    }
-    const handleKeyDown = (event: KeyboardEvent) => {
-      if (event.key === 'Escape') {
-        event.preventDefault();
-        onClose();
-        return;
-      }
-      if (event.key === 'Tab') {
-        const node = containerRef.current;
-        if (!node) {
-          return;
-        }
-        const focusable = Array.from(node.querySelectorAll<HTMLElement>(FOCUSABLE_SELECTOR)).filter(element =>
-          element.tabIndex !== -1 && !element.hasAttribute('disabled') && !element.getAttribute('aria-hidden'),
-        );
-        if (focusable.length === 0) {
-          event.preventDefault();
-          node.focus();
-          return;
-        }
-        const first = focusable[0];
-        const last = focusable[focusable.length - 1];
-        if (event.shiftKey) {
-          if (document.activeElement === first || !node.contains(document.activeElement)) {
-            event.preventDefault();
-            last.focus();
-          }
-          return;
+  const handleGlobalStyleChange = useCallback(
+    (key: 'primaryColor' | 'secondaryColor' | 'fontFamily' | 'fontSize', value: string) => {
+      updateDraft(content => {
+        if (!content.globalStyle) {
+          content.globalStyle = {};
         }
-        if (document.activeElement === last) {
-          event.preventDefault();
-          first.focus();
-        }
-      }
-    };
-
-    document.addEventListener('keydown', handleKeyDown);
-    return () => document.removeEventListener('keydown', handleKeyDown);
-  }, [onClose, isMounted]);
+        content.globalStyle[key] = value;
+      });
+    },
+    [updateDraft],
+  );
 
-  useEffect(() => {
-    if (!isMounted) {
-      return;
-    }
-    const handlePointerDown = (event: MouseEvent) => {
-      const node = containerRef.current;
-      if (!node) {
-        return;
-      }
-      if (!node.contains(event.target as Node)) {
-        onClose();
+  const renderTextEditor = useCallback(
+    (elementKey: EditableElementKey) => {
+      if (!draftContent) {
+        return null;
       }
-    };
-    document.addEventListener('mousedown', handlePointerDown);
-    return () => document.removeEventListener('mousedown', handlePointerDown);
-  }, [onClose, isMounted]);
-
-  useEffect(() => {
-    if (!isMounted) {
-      return;
-    }
-    const node = containerRef.current;
-    if (!node) {
-      return;
-    }
-    const focusable = node.querySelectorAll<HTMLElement>(FOCUSABLE_SELECTOR);
-    const target = focusable[0] ?? node;
-    target.focus({ preventScroll: true });
-  }, [isMounted]);
-
-  if (typeof document === 'undefined' || !isMounted) {
-    return null;
-  }
-
-  const content = (
-    <div className="fixed inset-0 z-[60] pointer-events-none">
-      <div
-        ref={containerRef}
-        role="dialog"
-        aria-modal="true"
-        aria-labelledby={headingId}
-        tabIndex={-1}
-        className="pointer-events-auto flex w-[min(90vw,32rem)] flex-col overflow-hidden rounded-3xl bg-white shadow-2xl ring-1 ring-slate-200"
-        style={{ position: 'absolute', top: position.top, left: position.left, opacity: isPositioned ? 1 : 0 }}
-      >
-        <div className="flex items-center justify-between border-b border-slate-200 px-6 py-4">
-          <h2 id={headingId} className="text-lg font-semibold text-slate-900">
-            {title}
-          </h2>
-          <button
-            type="button"
-            onClick={onClose}
-            className="rounded-full p-1 text-slate-500 transition hover:text-slate-900 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-primary"
-          >
-            <X className="h-5 w-5" aria-hidden="true" />
-            <span className="sr-only">Fermer</span>
-          </button>
-        </div>
-        <div className="max-h-[70vh] overflow-y-auto px-6 py-5">{children}</div>
-        <div className="flex items-center justify-end gap-3 border-t border-slate-200 bg-slate-50 px-6 py-4">{footer}</div>
-      </div>
-      {arrowPosition ? (
-        <span
-          aria-hidden="true"
-          className={`pointer-events-none absolute h-3 w-3 rotate-45 rounded-sm bg-white shadow-[0_0_0_1px_rgba(148,163,184,0.35)] ${
-            placement === 'top' ? 'translate-y-[-4px]' : 'translate-y-[4px]'
-          }`}
-          style={{ top: arrowPosition.top, left: arrowPosition.left, opacity: isPositioned ? 1 : 0 }}
+      const value = getPlainTextValue(draftContent, elementKey);
+      return (
+        <input
+          type="text"
+          value={value}
+          onChange={e => handleTextChange(elementKey, e.target.value)}
+          className="block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
         />
-      ) : null}
-    </div>
+      );
+    },
+    [draftContent, handleTextChange],
   );
 
-  return createPortal(content, document.body);
-};
-
-interface TextElementEditorProps {
-  element: EditableElementKey;
-  label: string;
-  draft: SiteContent;
-  onApply: (updater: DraftUpdater) => void;
-  onClose: () => void;
-  fontOptions: readonly string[];
-  onAssetAdded: (asset: CustomizationAsset) => void;
-  anchor: AnchorRect | null;
-}
-
-const TextElementEditor: React.FC<TextElementEditorProps> = ({
-  element,
-  label,
-  draft,
-  onApply,
-  onClose,
-  fontOptions,
-  onAssetAdded,
-  anchor,
-}) => {
-  const formId = `${element.replace(/\./g, '-')}-text-form`;
-  const initialPlain = getPlainTextValue(draft, element);
-  const initialRichText = getElementRichTextValue(draft, element);
-  const elementStyle = getElementStyle(draft, element);
-
-  const [plainText, setPlainText] = useState<string>(initialPlain);
-  const [richText, setRichText] = useState<RichTextValue | null>(initialRichText);
-  const [fontFamily, setFontFamily] = useState<string>(elementStyle.fontFamily ?? '');
-  const [fontSize, setFontSize] = useState<string>(elementStyle.fontSize ?? '');
-  const [textColor, setTextColor] = useState<string>(elementStyle.textColor ?? '');
-  const [backgroundColor, setBackgroundColor] = useState<string>(elementStyle.backgroundColor ?? '');
-  const [fontUploadError, setFontUploadError] = useState<string | null>(null);
-  const [uploadingFont, setUploadingFont] = useState<boolean>(false);
-
-  useEffect(() => {
-    setPlainText(initialPlain);
-    setRichText(initialRichText);
-    setFontFamily(elementStyle.fontFamily ?? '');
-    setFontSize(elementStyle.fontSize ?? '');
-    setTextColor(elementStyle.textColor ?? '');
-    setBackgroundColor(elementStyle.backgroundColor ?? '');
-  }, [initialPlain, initialRichText, elementStyle.fontFamily, elementStyle.fontSize, elementStyle.textColor, elementStyle.backgroundColor]);
-
-  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
-    event.preventDefault();
-    const sanitizedPlain = plainText;
-
-    onApply(current => {
-      setNestedValue(current, element, sanitizedPlain);
-      applyElementRichText(current, element, richText);
-      applyElementStyleOverrides(current, element, {
-        fontFamily,
-        fontSize,
-        textColor,
-        backgroundColor,
-      });
-      return current;
-    });
-    onClose();
-  };
-
-  const handleFontUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
-    const file = event.target.files?.[0];
-    if (!file) {
-      return;
-    }
-    setFontUploadError(null);
-    setUploadingFont(true);
-    try {
-      const url = await uploadCustomizationAsset(file, { tags: [guessAssetType(file)] });
-      const asset = createAssetFromFile(file, url);
-      onAssetAdded(asset);
-      setFontFamily(asset.name);
-    } catch (err) {
-      setFontUploadError(
-        err instanceof Error ? err.message : 'Impossible de téléverser la police. Réessayez plus tard.',
+  const renderRichTextEditor = useCallback(
+    (elementKey: EditableElementKey) => {
+      if (!draftContent) {
+        return null;
+      }
+      const value = getElementRichTextValue(draftContent, elementKey);
+      return (
+        <RichTextEditor
+          value={value}
+          onChange={val => handleRichTextChange(elementKey, val)}
+        />
       );
-    } finally {
-      setUploadingFont(false);
-      event.target.value = '';
-    }
-  };
-
-  const footer = (
-    <>
-      <button type="button" onClick={onClose} className="ui-btn-secondary">Annuler</button>
-      <button type="submit" form={formId} className="ui-btn-primary">Enregistrer</button>
-    </>
+    },
+    [draftContent, handleRichTextChange],
   );
 
-  return (
-    <EditorPopover
-      title={`Personnaliser ${label}`}
-      onClose={onClose}
-      footer={footer}
-      anchor={anchor}
-      elementId={element}
-    >
-      <form id={formId} onSubmit={handleSubmit} className="space-y-6">
-        <div>
-          <label htmlFor={`${formId}-plain`} className="block text-sm font-medium text-slate-700">
-            Texte de base
-          </label>
-          <textarea
-            id={`${formId}-plain`}
-            className="ui-textarea mt-2 w-full"
-            value={plainText}
-            onChange={event => {
-              setPlainText(event.target.value);
-              setRichText(null);
-            }}
-            rows={3}
-          />
-        </div>
-        <div>
-          <p className="text-sm font-medium text-slate-700">Mise en forme avancée</p>
-          <RichTextEditor
-            id={`${formId}-rich`}
-            value={richText}
-            fallback={plainText}
-            onChange={value => {
-              setRichText(value);
-              if (value) {
-                setPlainText(value.plainText);
-              }
-            }}
-            className="mt-2"
-            placeholder="Saisissez votre texte..."
-          />
-          <button
-            type="button"
-            className="mt-2 text-sm font-medium text-brand-primary hover:text-brand-primary/80"
-            onClick={() => setRichText(null)}
-          >
-            Supprimer la mise en forme personnalisée
-          </button>
-        </div>
-        <div className="grid gap-4 md:grid-cols-2">
+  const renderStyleEditor = useCallback(
+    (elementKey: EditableElementKey) => {
+      if (!draftContent) {
+        return null;
+      }
+      const currentStyle = getElementStyle(draftContent, elementKey);
+      return (
+        <div className="space-y-3">
           <div>
-            <label htmlFor={`${formId}-font`} className="block text-sm font-medium text-slate-700">
-              Police
+            <label htmlFor={`${elementKey}-font-family`} className="block text-sm font-medium text-gray-700 dark:text-gray-200">
+              Police de caractères
             </label>
-            <input
-              id={`${formId}-font`}
-              className="ui-input mt-2 w-full"
-              value={fontFamily}
-              onChange={event => setFontFamily(event.target.value)}
-              list={`${formId}-font-options`}
-              placeholder="Ex: Poppins"
-            />
-            <datalist id={`${formId}-font-options`}>
-              {fontOptions.map(option => (
-                <option key={option} value={option} />
+            <select
+              id={`${elementKey}-font-family`}
+              value={currentStyle.fontFamily ?? ''}
+              onChange={e => handleStyleChange(elementKey, { fontFamily: e.target.value })}
+              className="mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-orange-500 focus:outline-none focus:ring-orange-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
+            >
+              <option value="">Défaut</option>
+              {FONT_FAMILY_SUGGESTIONS.map(font => (
+                <option key={font} value={font}>
+                  {font}
+                </option>
               ))}
-            </datalist>
-            <div className="mt-2 flex items-center gap-3">
-              <label className="ui-btn-secondary relative cursor-pointer">
-                <input
-                  type="file"
-                  accept=".woff,.woff2,.ttf,.otf"
-                  className="absolute inset-0 cursor-pointer opacity-0"
-                  onChange={handleFontUpload}
-                  disabled={uploadingFont}
-                />
-                <Upload className="mr-2 h-4 w-4" aria-hidden="true" />
-                Importer une police
-              </label>
-              {uploadingFont && <Loader2 className="h-4 w-4 animate-spin text-brand-primary" aria-hidden="true" />}
-            </div>
-            {fontUploadError && <p className="mt-2 text-sm text-amber-600">{fontUploadError}</p>}
+            </select>
           </div>
           <div>
-            <label htmlFor={`${formId}-size`} className="block text-sm font-medium text-slate-700">
-              Taille du texte
+            <label htmlFor={`${elementKey}-font-size`} className="block text-sm font-medium text-gray-700 dark:text-gray-200">
+              Taille de police
             </label>
-            <input
-              id={`${formId}-size`}
-              className="ui-input mt-2 w-full"
-              value={fontSize}
-              onChange={event => setFontSize(event.target.value)}
-              list={`${formId}-size-options`}
-              placeholder="Ex: 18px"
-            />
-            <datalist id={`${formId}-size-options`}>
+            <select
+              id={`${elementKey}-font-size`}
+              value={currentStyle.fontSize ?? ''}
+              onChange={e => handleStyleChange(elementKey, { fontSize: e.target.value })}
+              className="mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-orange-500 focus:outline-none focus:ring-orange-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
+            >
+              <option value="">Défaut</option>
               {FONT_SIZE_SUGGESTIONS.map(size => (
-                <option key={size} value={size} />
+                <option key={size} value={size}>
+                  {size}
+                </option>
               ))}
-            </datalist>
+            </select>
           </div>
-        </div>
-        <div className="grid gap-4 md:grid-cols-2">
           <div>
-            <label htmlFor={`${formId}-text-color`} className="block text-sm font-medium text-slate-700">
+            <label htmlFor={`${elementKey}-text-color`} className="block text-sm font-medium text-gray-700 dark:text-gray-200">
               Couleur du texte
             </label>
-            <div className="mt-2 flex items-center gap-3">
+            <div className="relative mt-1 rounded-md shadow-sm">
               <input
-                id={`${formId}-text-color`}
-                className="ui-input w-full"
-                value={textColor}
-                onChange={event => setTextColor(event.target.value)}
-                placeholder="Ex: #0f172a"
+                type="color"
+                id={`${elementKey}-text-color-picker`}
+                value={currentStyle.textColor ?? '#000000'}
+                onChange={e => handleStyleChange(elementKey, { textColor: e.target.value })}
+                className="absolute inset-y-0 left-0 w-8 h-full opacity-0 cursor-pointer"
               />
               <input
-                type="color"
-                className="h-10 w-10 rounded border border-slate-200"
-                value={textColor || '#000000'}
-                onChange={event => setTextColor(event.target.value)}
-                aria-label="Choisir la couleur du texte"
+                type="text"
+                id={`${elementKey}-text-color`}
+                value={currentStyle.textColor ?? ''}
+                onChange={e => handleStyleChange(elementKey, { textColor: e.target.value })}
+                className="block w-full rounded-md border-gray-300 pl-10 focus:border-orange-500 focus:ring-orange-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
+                placeholder="#RRGGBB ou nom de couleur"
               />
+              <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
+                <span
+                  className="h-4 w-4 rounded-full border border-gray-300 dark:border-gray-600"
+                  style={{ backgroundColor: currentStyle.textColor ?? 'transparent' }}
+                />
+              </div>
             </div>
             <div className="mt-2 flex flex-wrap gap-2">
               {COLOR_SUGGESTIONS.map(color => (
                 <button
                   key={color}
                   type="button"
-                  onClick={() => setTextColor(color)}
-                  className="h-8 w-8 rounded-full border border-slate-200"
-                  style={{ backgroundColor: color === 'transparent' ? '#ffffff' : color }}
-                  title={color}
+                  onClick={() => handleStyleChange(elementKey, { textColor: color })}
+                  className="h-6 w-6 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 dark:border-gray-600"
+                  style={{ backgroundColor: color }}
+                  aria-label={`Set text color to ${color}`}
                 />
               ))}
             </div>
           </div>
           <div>
-            <label htmlFor={`${formId}-bg-color`} className="block text-sm font-medium text-slate-700">
+            <label htmlFor={`${elementKey}-background-color`} className="block text-sm font-medium text-gray-700 dark:text-gray-200">
               Couleur de fond
             </label>
-            <div className="mt-2 flex items-center gap-3">
+            <div className="relative mt-1 rounded-md shadow-sm">
               <input
-                id={`${formId}-bg-color`}
-                className="ui-input w-full"
-                value={backgroundColor}
-                onChange={event => setBackgroundColor(event.target.value)}
-                placeholder="Ex: rgba(255,255,255,0.8)"
+                type="color"
+                id={`${elementKey}-background-color-picker`}
+                value={currentStyle.backgroundColor ?? '#000000'}
+                onChange={e => handleStyleChange(elementKey, { backgroundColor: e.target.value })}
+                className="absolute inset-y-0 left-0 w-8 h-full opacity-0 cursor-pointer"
               />
               <input
-                type="color"
-                className="h-10 w-10 rounded border border-slate-200"
-                value={backgroundColor || '#ffffff'}
-                onChange={event => setBackgroundColor(event.target.value)}
-                aria-label="Choisir la couleur d'arrière-plan"
+                type="text"
+                id={`${elementKey}-background-color`}
+                value={currentStyle.backgroundColor ?? ''}
+                onChange={e => handleStyleChange(elementKey, { backgroundColor: e.target.value })}
+                className="block w-full rounded-md border-gray-300 pl-10 focus:border-orange-500 focus:ring-orange-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
+                placeholder="#RRGGBB ou nom de couleur"
               />
+              <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
+                <span
+                  className="h-4 w-4 rounded-full border border-gray-300 dark:border-gray-600"
+                  style={{ backgroundColor: currentStyle.backgroundColor ?? 'transparent' }}
+                />
+              </div>
+            </div>
+            <div className="mt-2 flex flex-wrap gap-2">
+              {COLOR_SUGGESTIONS.map(color => (
+                <button
+                  key={color}
+                  type="button"
+                  onClick={() => handleStyleChange(elementKey, { backgroundColor: color })}
+                  className="h-6 w-6 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 dark:border-gray-600"
+                  style={{ backgroundColor: color }}
+                  aria-label={`Set background color to ${color}`}
+                />
+              ))}
             </div>
           </div>
         </div>
-        <div className="flex items-center justify-between border-t border-slate-200 pt-4">
-          <p className="text-sm text-slate-500">Laissez un champ vide pour hériter du style par défaut.</p>
-          <button
-            type="button"
-            className="text-sm font-medium text-brand-primary hover:text-brand-primary/80"
-            onClick={() => {
-              setFontFamily('');
-              setFontSize('');
-              setTextColor('');
-              setBackgroundColor('');
-            }}
-          >
-            Réinitialiser le style
-          </button>
-        </div>
-      </form>
-    </EditorPopover>
-  );
-};
-
-interface ImageElementEditorProps {
-  element: EditableElementKey;
-  label: string;
-  draft: SiteContent;
-  onApply: (updater: DraftUpdater) => void;
-  onClose: () => void;
-  onAssetAdded: (asset: CustomizationAsset) => void;
-  anchor: AnchorRect | null;
-}
-
-const ImageElementEditor: React.FC<ImageElementEditorProps> = ({
-  element,
-  label,
-  draft,
-  onApply,
-  onClose,
-  onAssetAdded,
-  anchor,
-}) => {
-  const formId = `${element.replace(/\./g, '-')}-image-form`;
-  const initialImage = getImageValue(draft, element) ?? '';
-  const [imageUrl, setImageUrl] = useState<string>(initialImage);
-  const [error, setError] = useState<string | null>(null);
-  const [uploading, setUploading] = useState<boolean>(false);
-
-  useEffect(() => {
-    setImageUrl(initialImage);
-  }, [initialImage]);
-
-  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
-    event.preventDefault();
-    const trimmed = imageUrl.trim();
-    const normalized = normalizeCloudinaryImageUrl(trimmed) ?? (trimmed.length > 0 ? trimmed : null);
-
-    onApply(current => {
-      setNestedValue(current, element, normalized);
-      return current;
-    });
-    onClose();
-  };
-
-  const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
-    const file = event.target.files?.[0];
-    if (!file) {
-      return;
-    }
-    setError(null);
-    setUploading(true);
-    try {
-      const url = await uploadCustomizationAsset(file, { tags: [guessAssetType(file)] });
-      const asset = createAssetFromFile(file, url);
-      onAssetAdded(asset);
-      setImageUrl(url);
-    } catch (err) {
-      setError(err instanceof Error ? err.message : "Téléversement impossible. Vérifiez votre connexion.");
-    } finally {
-      setUploading(false);
-      event.target.value = '';
-    }
-  };
-
-  const footer = (
-    <>
-      <button type="button" onClick={onClose} className="ui-btn-secondary">Annuler</button>
-      <button type="submit" form={formId} className="ui-btn-primary">Enregistrer</button>
-    </>
+      );
+    },
+    [draftContent, handleStyleChange],
   );
 
-  const previewUrl = imageUrl.trim();
+  const renderBackgroundEditor = useCallback(
+    (elementKey: EditableElementKey) => {
+      if (!draftContent) {
+        return null;
+      }
+      const currentBackground = getSectionBackground(draftContent, elementKey);
+      const imageUrl = currentBackground.type === 'image' ? currentBackground.value : null;
 
-  return (
-    <EditorPopover
-      title={`Personnaliser ${label}`}
-      onClose={onClose}
-      footer={footer}
-      anchor={anchor}
-      elementId={element}
-    >
-      <form id={formId} onSubmit={handleSubmit} className="space-y-6">
-        <div>
-          <label htmlFor={`${formId}-input`} className="block text-sm font-medium text-slate-700">
-            URL de l'image
-          </label>
-          <input
-            id={`${formId}-input`}
-            className="ui-input mt-2 w-full"
-            value={imageUrl}
-            onChange={event => setImageUrl(event.target.value)}
-            placeholder="https://..."
-          />
-          <p className="mt-2 text-xs text-slate-500">
-            Fournissez une URL Cloudinary ou téléversez un fichier pour l'ajouter automatiquement.
-          </p>
-        </div>
-        <div className="flex flex-wrap items-center gap-3">
-          <label className="ui-btn-secondary relative cursor-pointer">
-            <input
-              type="file"
-              accept="image/*,video/*,audio/*,.ttf,.otf,.woff,.woff2"
-              className="absolute inset-0 cursor-pointer opacity-0"
-              onChange={handleUpload}
-              disabled={uploading}
-            />
-            <Upload className="mr-2 h-4 w-4" aria-hidden="true" />
-            Importer un média
-          </label>
-          {uploading && <Loader2 className="h-4 w-4 animate-spin text-brand-primary" aria-hidden="true" />}
-          <button
-            type="button"
-            onClick={() => setImageUrl('')}
-            className="text-sm font-medium text-brand-primary hover:text-brand-primary/80"
-          >
-            Supprimer le média
-          </button>
-        </div>
-        {error && (
-          <div className="flex items-start gap-2 rounded-2xl border border-amber-200 bg-amber-50 p-3 text-sm text-amber-700">
-            <AlertTriangle className="mt-0.5 h-4 w-4" aria-hidden="true" />
-            <p>{error}</p>
-          </div>
-        )}
-        {previewUrl && (
-          <div className="overflow-hidden rounded-2xl border border-slate-200">
-            <img src={previewUrl} alt="Aperçu" className="h-56 w-full object-cover" />
+      return (
+        <div className="space-y-3">
+          <div>
+            <label htmlFor={`${elementKey}-background-type`} className="block text-sm font-medium text-gray-700 dark:text-gray-200">
+              Type de fond
+            </label>
+            <select
+              id={`${elementKey}-background-type`}
+              value={currentBackground.type}
+              onChange={e => handleBackgroundChange(elementKey, { type: e.target.value as 'color' | 'image' })}
+              className="mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-orange-500 focus:outline-none focus:ring-orange-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
+            >
+              <option value="color">Couleur</option>
+              <option value="image">Image</option>
+            </select>
           </div>
-        )}
-      </form>
-    </EditorPopover>
-  );
-};
-
-interface BackgroundElementEditorProps {
-  element: EditableElementKey;
-  label: string;
-  draft: SiteContent;
-  onApply: (updater: DraftUpdater) => void;
-  onClose: () => void;
-  onAssetAdded: (asset: CustomizationAsset) => void;
-  anchor: AnchorRect | null;
-}
-
-const BackgroundElementEditor: React.FC<BackgroundElementEditorProps> = ({
-  element,
-  label,
-  draft,
-  onApply,
-  onClose,
-  onAssetAdded,
-  anchor,
-}) => {
-  const formId = `${element.replace(/\./g, '-')}-background-form`;
-  const background = getSectionBackground(draft, element);
-  const [backgroundType, setBackgroundType] = useState<SectionStyle['background']['type']>(background.type);
-  const [color, setColor] = useState<string>(background.color);
-  const [imageUrl, setImageUrl] = useState<string>(background.image ?? '');
-  const [error, setError] = useState<string | null>(null);
-  const [uploading, setUploading] = useState<boolean>(false);
-
-  useEffect(() => {
-    setBackgroundType(background.type);
-    setColor(background.color);
-    setImageUrl(background.image ?? '');
-  }, [background.type, background.color, background.image]);
-
-  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
-    event.preventDefault();
-    const trimmedColor = color.trim() || 'transparent';
-    const trimmedImage = imageUrl.trim();
-    const normalizedImage = normalizeCloudinaryImageUrl(trimmedImage) ?? (trimmedImage.length > 0 ? trimmedImage : null);
-
-    onApply(current => {
-      applySectionBackground(current, element, {
-        type: backgroundType,
-        color: trimmedColor,
-        image: backgroundType === 'image' ? normalizedImage : null,
-      });
-      return current;
-    });
-    onClose();
-  };
-
-  const handleUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
-    const file = event.target.files?.[0];
-    if (!file) {
-      return;
-    }
-    setError(null);
-    setUploading(true);
-    try {
-      const url = await uploadCustomizationAsset(file, { tags: [guessAssetType(file)] });
-      const asset = createAssetFromFile(file, url);
-      onAssetAdded(asset);
-      setImageUrl(url);
-      setBackgroundType('image');
-    } catch (err) {
-      setError(err instanceof Error ? err.message : 'Téléversement impossible.');
-    } finally {
-      setUploading(false);
-      event.target.value = '';
-    }
-  };
-
-  const footer = (
-    <>
-      <button type="button" onClick={onClose} className="ui-btn-secondary">Annuler</button>
-      <button type="submit" form={formId} className="ui-btn-primary">Enregistrer</button>
-    </>
-  );
-
-  const previewUrl = imageUrl.trim();
 
-  return (
-    <EditorPopover
-      title={`Personnaliser ${label}`}
-      onClose={onClose}
-      footer={footer}
-      anchor={anchor}
-      elementId={element}
-    >
-      <form id={formId} onSubmit={handleSubmit} className="space-y-6">
-        <div className="flex gap-3">
-          <button
-            type="button"
-            className={`ui-btn-secondary flex-1 ${backgroundType === 'color' ? 'ring-2 ring-brand-primary' : ''}`}
-            onClick={() => setBackgroundType('color')}
-          >
-            Couleur
-          </button>
-          <button
-            type="button"
-            className={`ui-btn-secondary flex-1 ${backgroundType === 'image' ? 'ring-2 ring-brand-primary' : ''}`}
-            onClick={() => setBackgroundType('image')}
-          >
-            Image
-          </button>
-        </div>
-        <div>
-          <label htmlFor={`${formId}-color`} className="block text-sm font-medium text-slate-700">
-            Couleur
-          </label>
-          <div className="mt-2 flex items-center gap-3">
-            <input
-              id={`${formId}-color`}
-              className="ui-input w-full"
-              value={color}
-              onChange={event => setColor(event.target.value)}
-              placeholder="Ex: rgba(15,23,42,0.75)"
-            />
-            <input
-              type="color"
-              className="h-10 w-10 rounded border border-slate-200"
-              value={color || '#ffffff'}
-              onChange={event => setColor(event.target.value)}
-              aria-label="Choisir la couleur d'arrière-plan"
-            />
-          </div>
-          <div className="mt-2 flex flex-wrap gap-2">
-            {COLOR_SUGGESTIONS.map(option => (
-              <button
-                key={option}
-                type="button"
-                onClick={() => setColor(option)}
-                className="h-8 w-8 rounded-full border border-slate-200"
-                style={{ backgroundColor: option === 'transparent' ? '#ffffff' : option }}
-                title={option}
-              />
-            ))}
-          </div>
-        </div>
-        {backgroundType === 'image' && (
-          <div className="space-y-4">
+          {currentBackground.type === 'color' && (
             <div>
-              <label htmlFor={`${formId}-image`} className="block text-sm font-medium text-slate-700">
-                URL de l'image
+              <label htmlFor={`${elementKey}-background-color`} className="block text-sm font-medium text-gray-700 dark:text-gray-200">
+                Couleur de fond
               </label>
-              <input
-                id={`${formId}-image`}
-                className="ui-input mt-2 w-full"
-                value={imageUrl}
-                onChange={event => setImageUrl(event.target.value)}
-                placeholder="https://..."
-              />
-            </div>
-            <div className="flex flex-wrap items-center gap-3">
-              <label className="ui-btn-secondary relative cursor-pointer">
+              <div className="relative mt-1 rounded-md shadow-sm">
                 <input
-                  type="file"
-                  accept="image/*"
-                  className="absolute inset-0 cursor-pointer opacity-0"
-                  onChange={handleUpload}
-                  disabled={uploading}
+                  type="color"
+                  id={`${elementKey}-background-color-picker`}
+                  value={currentBackground.value ?? '#000000'}
+                  onChange={e => handleBackgroundChange(elementKey, { type: 'color', value: e.target.value })}
+                  className="absolute inset-y-0 left-0 w-8 h-full opacity-0 cursor-pointer"
                 />
-                <Upload className="mr-2 h-4 w-4" aria-hidden="true" />
-                Importer une image
-              </label>
-              {uploading && <Loader2 className="h-4 w-4 animate-spin text-brand-primary" aria-hidden="true" />}
+                <input
+                  type="text"
+                  id={`${elementKey}-background-color`}
+                  value={currentBackground.value ?? ''}
+                  onChange={e => handleBackgroundChange(elementKey, { type: 'color', value: e.target.value })}
+                  className="block w-full rounded-md border-gray-300 pl-10 focus:border-orange-500 focus:ring-orange-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
+                  placeholder="#RRGGBB ou nom de couleur"
+                />
+                <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
+                  <span
+                    className="h-4 w-4 rounded-full border border-gray-300 dark:border-gray-600"
+                    style={{ backgroundColor: currentBackground.value ?? 'transparent' }}
+                  />
+                </div>
+              </div>
+              <div className="mt-2 flex flex-wrap gap-2">
+                {COLOR_SUGGESTIONS.map(color => (
+                  <button
+                    key={color}
+                    type="button"
+                    onClick={() => handleBackgroundChange(elementKey, { type: 'color', value: color })}
+                    className="h-6 w-6 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 dark:border-gray-600"
+                    style={{ backgroundColor: color }}
+                    aria-label={`Set background color to ${color}`}
+                  />
+                ))}
+              </div>
+            </div>
+          )}
+
+          {currentBackground.type === 'image' && (
+            <div>
+              <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">Image de fond</label>
+              {imageUrl ? (
+                <div className="relative mt-1">
+                  <img src={imageUrl} alt="Background" className="h-32 w-full object-cover rounded-md" />
+                  <button
+                    type="button"
+                    onClick={() => handleBackgroundChange(elementKey, { type: 'image', value: null })}
+                    className="absolute top-2 right-2 rounded-full bg-white p-1 shadow-md text-gray-600 hover:text-gray-900"
+                    aria-label="Supprimer l'image de fond"
+                  >
+                    <X size={16} />
+                  </button>
+                </div>
+              ) : (
+                <div className="mt-1 flex justify-center rounded-md border-2 border-dashed border-gray-300 px-6 pt-5 pb-6 dark:border-gray-600">
+                  <div className="space-y-1 text-center">
+                    <Upload className="mx-auto h-12 w-12 text-gray-400" />
+                    <div className="flex text-sm text-gray-600 dark:text-gray-400">
+                      <label
+                        htmlFor={`file-upload-${elementKey}`}
+                        className="relative cursor-pointer rounded-md bg-white font-medium text-orange-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-orange-500 focus-within:ring-offset-2 hover:text-orange-500 dark:bg-gray-800"
+                      >
+                        <span>Télécharger un fichier</span>
+                        <input
+                          id={`file-upload-${elementKey}`}
+                          name={`file-upload-${elementKey}`}
+                          type="file"
+                          className="sr-only"
+                          accept="image/*"
+                          onChange={e => {
+                            if (e.target.files && e.target.files[0]) {
+                              handleImageUpload(elementKey, e.target.files[0]);
+                            }
+                          }}
+                        />
+                      </label>
+                      <p className="pl-1">ou glisser-déposer</p>
+                    </div>
+                    <p className="text-xs text-gray-500 dark:text-gray-400">PNG, JPG, GIF jusqu'à 10MB</p>
+                  </div>
+                </div>
+              )}
+            </div>
+          )}
+        </div>
+      );
+    },
+    [draftContent, handleBackgroundChange, handleImageUpload],
+  );
+
+  const renderImageEditor = useCallback(
+    (elementKey: EditableElementKey) => {
+      if (!draftContent) {
+        return null;
+      }
+      const imageUrl = getImageValue(draftContent, elementKey);
+
+      return (
+        <div className="space-y-3">
+          <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">Image</label>
+          {imageUrl ? (
+            <div className="relative mt-1">
+              <img src={imageUrl} alt="Custom" className="h-32 w-full object-cover rounded-md" />
               <button
                 type="button"
-                onClick={() => setImageUrl('')}
-                className="text-sm font-medium text-brand-primary hover:text-brand-primary/80"
+                onClick={() => handleImageRemove(elementKey)}
+                className="absolute top-2 right-2 rounded-full bg-white p-1 shadow-md text-gray-600 hover:text-gray-900"
+                aria-label="Supprimer l'image"
               >
-                Retirer l'image
+                <X size={16} />
               </button>
             </div>
-            {error && (
-              <div className="flex items-start gap-2 rounded-2xl border border-amber-200 bg-amber-50 p-3 text-sm text-amber-700">
-                <AlertTriangle className="mt-0.5 h-4 w-4" aria-hidden="true" />
-                <p>{error}</p>
+          ) : (
+            <div className="mt-1 flex justify-center rounded-md border-2 border-dashed border-gray-300 px-6 pt-5 pb-6 dark:border-gray-600">
+              <div className="space-y-1 text-center">
+                <Upload className="mx-auto h-12 w-12 text-gray-400" />
+                <div className="flex text-sm text-gray-600 dark:text-gray-400">
+                  <label
+                    htmlFor={`file-upload-${elementKey}`}
+                    className="relative cursor-pointer rounded-md bg-white font-medium text-orange-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-orange-500 focus-within:ring-offset-2 hover:text-orange-500 dark:bg-gray-800"
+                  >
+                    <span>Télécharger un fichier</span>
+                    <input
+                      id={`file-upload-${elementKey}`}
+                      name={`file-upload-${elementKey}`}
+                      type="file"
+                      className="sr-only"
+                      accept="image/*"
+                      onChange={e => {
+                        if (e.target.files && e.target.files[0]) {
+                          handleImageUpload(elementKey, e.target.files[0]);
+                        }
+                      }}
+                    />
+                  </label>
+                  <p className="pl-1">ou glisser-déposer</p>
+                </div>
+                <p className="text-xs text-gray-500 dark:text-gray-400">PNG, JPG, GIF jusqu'à 10MB</p>
               </div>
-            )}
-            {previewUrl && (
-              <div className="overflow-hidden rounded-2xl border border-slate-200">
-                <img src={previewUrl} alt="Aperçu" className="h-48 w-full object-cover" />
-              </div>
-            )}
-          </div>
-        )}
-      </form>
-    </EditorPopover>
-  );
-};
-
-const SiteCustomization: React.FC = () => {
-  const { content, loading, error, updateContent } = useSiteContent();
-  const [draft, setDraft] = useState<SiteContent | null>(() =>
-    content ? cloneSiteContent(content) : null,
+            </div>
+          )}
+        </div>
+      );
+    },
+    [draftContent, handleImageRemove, handleImageUpload],
   );
-  const [activeElement, setActiveElement] = useState<EditableElementKey | null>(null);
-  const [activeZone, setActiveZone] = useState<EditableZoneKey | null>(null);
-  const [activeTab, setActiveTab] = useState<TabId>('custom');
-  const [activeAnchor, setActiveAnchor] = useState<AnchorRect | null>(null);
-  const [saving, setSaving] = useState<boolean>(false);
-  const [saveError, setSaveError] = useState<string | null>(null);
-  const [saveSuccess, setSaveSuccess] = useState<string | null>(null);
-  const [bestSellerProducts, setBestSellerProducts] = useState<Product[]>([]);
-  const [bestSellerLoading, setBestSellerLoading] = useState<boolean>(false);
-  const [bestSellerError, setBestSellerError] = useState<string | null>(null);
 
-  useEffect(() => {
-    if (content) {
-      setDraft(cloneSiteContent(content));
+  const renderGlobalThemeEditor = useCallback(() => {
+    if (!draftContent) {
+      return null;
     }
-  }, [content]);
+    const globalStyle = draftContent.globalStyle || {};
 
-  useEffect(() => {
-    let mounted = true;
-    const fetchBestSellers = async () => {
-      setBestSellerLoading(true);
-      setBestSellerError(null);
-      try {
-        const products = await api.getBestSellerProducts();
-        if (mounted) {
-          setBestSellerProducts(products);
-        }
-      } catch (err) {
-        if (mounted) {
-          setBestSellerError(
-            err instanceof Error
-              ? err.message
-              : 'Impossible de charger les produits mis en avant.',
-          );
-        }
-      } finally {
-        if (mounted) {
-          setBestSellerLoading(false);
-        }
-      }
-    };
+    return (
+      <div className="space-y-4 p-4">
+        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Couleurs globales</h3>
+        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+          <div>
+            <label htmlFor="primary-color" className="block text-sm font-medium text-gray-700 dark:text-gray-200">
+              Couleur primaire
+            </label>
+            <div className="relative mt-1 rounded-md shadow-sm">
+              <input
+                type="color"
+                id="primary-color-picker"
+                value={globalStyle.primaryColor ?? '#f97316'}
+                onChange={e => handleGlobalStyleChange('primaryColor', e.target.value)}
+                className="absolute inset-y-0 left-0 w-8 h-full opacity-0 cursor-pointer"
+              />
+              <input
+                type="text"
+                id="primary-color"
+                value={globalStyle.primaryColor ?? ''}
+                onChange={e => handleGlobalStyleChange('primaryColor', e.target.value)}
+                className="block w-full rounded-md border-gray-300 pl-10 focus:border-orange-500 focus:ring-orange-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
+                placeholder="#RRGGBB ou nom de couleur"
+              />
+              <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
+                <span
+                  className="h-4 w-4 rounded-full border border-gray-300 dark:border-gray-600"
+                  style={{ backgroundColor: globalStyle.primaryColor ?? 'transparent' }}
+                />
+              </div>
+            </div>
+          </div>
+          <div>
+            <label htmlFor="secondary-color" className="block text-sm font-medium text-gray-700 dark:text-gray-200">
+              Couleur secondaire
+            </label>
+            <div className="relative mt-1 rounded-md shadow-sm">
+              <input
+                type="color"
+                id="secondary-color-picker"
+                value={globalStyle.secondaryColor ?? '#f97316'}
+                onChange={e => handleGlobalStyleChange('secondaryColor', e.target.value)}
+                className="absolute inset-y-0 left-0 w-8 h-full opacity-0 cursor-pointer"
+              />
+              <input
+                type="text"
+                id="secondary-color"
+                value={globalStyle.secondaryColor ?? ''}
+                onChange={e => handleGlobalStyleChange('secondaryColor', e.target.value)}
+                className="block w-full rounded-md border-gray-300 pl-10 focus:border-orange-500 focus:ring-orange-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
+                placeholder="#RRGGBB ou nom de couleur"
+              />
+              <div className="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
+                <span
+                  className="h-4 w-4 rounded-full border border-gray-300 dark:border-gray-600"
+                  style={{ backgroundColor: globalStyle.secondaryColor ?? 'transparent' }}
+                />
+              </div>
+            </div>
+          </div>
+        </div>
 
-    void fetchBestSellers();
-    return () => {
-      mounted = false;
-    };
-  }, []);
+        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mt-6">Typographie globale</h3>
+        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+          <div>
+            <label htmlFor="global-font-family" className="block text-sm font-medium text-gray-700 dark:text-gray-200">
+              Police de caractères principale
+            </label>
+            <select
+              id="global-font-family"
+              value={globalStyle.fontFamily ?? ''}
+              onChange={e => handleGlobalStyleChange('fontFamily', e.target.value)}
+              className="mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-orange-500 focus:outline-none focus:ring-orange-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
+            >
+              <option value="">Défaut</option>
+              {FONT_FAMILY_SUGGESTIONS.map(font => (
+                <option key={font} value={font}>
+                  {font}
+                </option>
+              ))}
+            </select>
+          </div>
+          <div>
+            <label htmlFor="global-font-size" className="block text-sm font-medium text-gray-700 dark:text-gray-200">
+              Taille de police de base
+            </label>
+            <select
+              id="global-font-size"
+              value={globalStyle.fontSize ?? ''}
+              onChange={e => handleGlobalStyleChange('fontSize', e.target.value)}
+              className="mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-orange-500 focus:outline-none focus:ring-orange-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white sm:text-sm"
+            >
+              <option value="">Défaut</option>
+              {FONT_SIZE_SUGGESTIONS.map(size => (
+                <option key={size} value={size}>
+                  {size}
+                </option>
+              ))}
+            </select>
+          </div>
+        </div>
+      </div>
+    );
+  }, [draftContent, handleGlobalStyleChange]);
 
-  useEffect(() => {
-    if (!saveSuccess) {
-      return;
+  const renderEditorContent = useMemo(() => {
+    if (!draftContent) {
+      return null;
     }
-    const timeout = setTimeout(() => setSaveSuccess(null), 4000);
-    return () => clearTimeout(timeout);
-  }, [saveSuccess]);
-
-  const applyDraftUpdate = useCallback(
-    (updater: DraftUpdater) => {
-      setDraft(prev => {
-        if (!prev) {
-          return prev;
-        }
-        const clone = cloneSiteContent(prev);
-        return updater(clone);
-      });
-    },
-    [],
-  );
-
-  const appendAssetToDraft = useCallback((asset: CustomizationAsset) => {
-    setDraft(prev => {
-      if (!prev) {
-        return prev;
-      }
-      const clone = cloneSiteContent(prev);
-      appendAsset(clone, asset);
-      return clone;
-    });
-  }, []);
 
-  const handleEdit = useCallback(
-    (
-      element: EditableElementKey,
-      meta: { zone: EditableZoneKey; anchor: DOMRect | DOMRectReadOnly | null },
-    ) => {
-      setActiveElement(element);
-      setActiveZone(meta.zone);
-      setActiveAnchor(cloneAnchorRect(meta.anchor));
-    },
-    [],
-  );
-
-  const closeEditor = useCallback(() => {
-    setActiveElement(null);
-    setActiveZone(null);
-    setActiveAnchor(null);
-  }, []);
-
-  const handleSave = async () => {
-    setSaving(true);
-    setSaveError(null);
-    setSaveSuccess(null);
-    try {
-      if (!draft) {
-        throw new Error('Le brouillon est indisponible.');
-      }
-      const updated = await updateContent(draft);
-      setDraft(updated);
-      setSaveSuccess('Modifications enregistrées avec succès.');
-    } catch (err) {
-      setSaveError(
-        err instanceof Error ? err.message : 'Une erreur est survenue lors de la sauvegarde.',
+    if (activeTab === 'preview') {
+      return (
+        <SitePreviewCanvas
+          siteContent={draftContent}
+          products={products}
+          onElementClick={handleElementClick}
+        />
       );
-    } finally {
-      setSaving(false);
     }
-  };
 
-  const fontOptions = useMemo(() => {
-    const base = Array.from(FONT_FAMILY_SUGGESTIONS);
-    if (!draft) {
-      return base;
+    if (activeTab === 'theme') {
+      return renderGlobalThemeEditor();
     }
-    const custom = draft.assets.library
-      .filter(asset => asset.type === 'font')
-      .map(asset => sanitizeFontFamilyName(asset.name));
-    return Array.from(new Set([...base, ...custom]));
-  }, [draft]);
 
-  const activeLabel = activeElement ? ELEMENT_LABELS[activeElement] ?? activeElement : null;
-  const elementType = activeElement
-    ? BACKGROUND_ELEMENT_KEYS.has(activeElement)
-      ? 'background'
-      : IMAGE_ELEMENT_KEYS.has(activeElement)
-      ? 'image'
-      : TEXT_ELEMENT_KEYS.has(activeElement)
-      ? 'text'
-      : 'text'
-    : null;
+    const editableElements = STYLE_EDITABLE_ELEMENT_KEYS.filter(key => {
+      if (activeTab === 'content') {
+        return TEXT_ELEMENT_KEYS.has(key) || IMAGE_ELEMENT_KEYS.has(key);
+      }
+      if (activeTab === 'style') {
+        return TEXT_ELEMENT_KEYS.has(key) || BACKGROUND_ELEMENT_KEYS.has(key);
+      }
+      return false;
+    });
 
-  if (loading) {
     return (
-      <div className="flex h-full min-h-[60vh] flex-col items-center justify-center gap-3">
-        <Loader2 className="h-10 w-10 animate-spin text-brand-primary" aria-hidden="true" />
-        <p className="text-sm text-slate-500">Chargement du contenu du site…</p>
+      <div className="p-4 space-y-4">
+        {editableElements.map(elementKey => (
+          <div key={elementKey} className="ui-card p-4">
+            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-2">
+              {ELEMENT_LABELS[elementKey] || elementKey}
+            </h3>
+            {(TEXT_ELEMENT_KEYS.has(elementKey) && activeTab === 'content') && (
+              <div className="mb-3">
+                <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">Texte</label>
+                {elementKey === 'about.description' ? renderRichTextEditor(elementKey) : renderTextEditor(elementKey)}
+              </div>
+            )}
+            {(IMAGE_ELEMENT_KEYS.has(elementKey) && activeTab === 'content') && (
+              <div className="mb-3">
+                {renderImageEditor(elementKey)}
+              </div>
+            )}
+            {(TEXT_ELEMENT_KEYS.has(elementKey) && activeTab === 'style') && (
+              <div className="mb-3">
+                {renderStyleEditor(elementKey)}
+              </div>
+            )}
+            {(BACKGROUND_ELEMENT_KEYS.has(elementKey) && activeTab === 'style') && (
+              <div className="mb-3">
+                {renderBackgroundEditor(elementKey)}
+              </div>
+            )}
+          </div>
+        ))}
       </div>
     );
-  }
+  }, [draftContent, products, activeTab, handleElementClick, renderGlobalThemeEditor, renderTextEditor, renderRichTextEditor, renderImageEditor, renderStyleEditor, renderBackgroundEditor]);
+
+  const popoverContent = useMemo(() => {
+    if (!activeElement || !draftContent) {
+      return null;
+    }
+
+    const isText = TEXT_ELEMENT_KEYS.has(activeElement);
+    const isBackground = BACKGROUND_ELEMENT_KEYS.has(activeElement);
+    const isImage = IMAGE_ELEMENT_KEYS.has(activeElement);
 
-  if (!content || !draft) {
     return (
-      <div className="flex h-full min-h-[60vh] flex-col items-center justify-center gap-3">
-        <AlertTriangle className="h-6 w-6 text-amber-500" aria-hidden="true" />
-        <p className="text-sm text-slate-500">Le contenu du site est en cours d'initialisation…</p>
+      <div className="p-4 space-y-3">
+        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
+          {ELEMENT_LABELS[activeElement] || activeElement}
+        </h3>
+        {isText && (
+          <div className="space-y-3">
+            <div>
+              <label className="block text-sm font-medium text-gray-700 dark:text-gray-200">Texte</label>
+              {activeElement === 'about.description' ? renderRichTextEditor(activeElement) : renderTextEditor(activeElement)}
+            </div>
+            {renderStyleEditor(activeElement)}
+          </div>
+        )}
+        {isBackground && renderBackgroundEditor(activeElement)}
+        {isImage && renderImageEditor(activeElement)}
       </div>
     );
-  }
+  }, [activeElement, draftContent, renderTextEditor, renderRichTextEditor, renderStyleEditor, renderBackgroundEditor, renderImageEditor]);
 
   return (
-    <div className="space-y-8">
-      <header className="flex flex-col gap-4 lg:flex-row lg:items-center lg:justify-between">
-        <div>
-          <h1 className="text-2xl font-semibold text-slate-900">Site public</h1>
-          <p className="text-sm text-slate-500">
-            Cliquez sur l'icône en forme de crayon pour personnaliser chaque bloc de contenu, image ou logo.
-          </p>
+    <div className="flex h-full flex-col lg:flex-row">
+      <div className="flex w-full flex-col lg:w-1/3 lg:border-r lg:border-gray-200 dark:lg:border-gray-700">
+        <div className="flex items-center justify-between border-b border-gray-200 p-4 dark:border-gray-700">
+          <h2 className="text-xl font-semibold text-gray-900 dark:text-white">Personnalisation du site</h2>
+          <div className="flex items-center space-x-2">
+            {isSaving && <Loader2 className="h-5 w-5 animate-spin text-orange-500" />}
+            {isSuccess && <CheckCircle2 className="h-5 w-5 text-green-500" />}
+            {isError && <AlertTriangle className="h-5 w-5 text-red-500" />}
+            <button
+              type="button"
+              onClick={handleReset}
+              className="rounded-md bg-gray-200 px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600"
+            >
+              Annuler
+            </button>
+            <button
+              type="button"
+              onClick={handleSave}
+              className="rounded-md bg-orange-600 px-3 py-2 text-sm font-medium text-white hover:bg-orange-700"
+            >
+              Enregistrer
+            </button>
+          </div>
         </div>
-        <div className="flex flex-wrap items-center gap-3">
-          {saveSuccess && (
-            <div className="flex items-center gap-2 rounded-full bg-emerald-50 px-4 py-2 text-sm text-emerald-700">
-              <CheckCircle2 className="h-4 w-4" aria-hidden="true" />
-              {saveSuccess}
-            </div>
-          )}
-          {saveError && (
-            <div className="flex items-center gap-2 rounded-full bg-amber-50 px-4 py-2 text-sm text-amber-700">
-              <AlertTriangle className="h-4 w-4" aria-hidden="true" />
-              {saveError}
-            </div>
-          )}
-          <button
-            type="button"
-            onClick={handleSave}
-            className="ui-btn-primary"
-            disabled={saving}
-          >
-            {saving ? 'Enregistrement…' : 'Enregistrer les modifications'}
-          </button>
+
+        <div className="flex border-b border-gray-200 dark:border-gray-700">
+          {TABS.map(tab => (
+            <button
+              key={tab.id}
+              type="button"
+              onClick={() => {
+                setActiveTab(tab.id);
+                handleCloseEditor();
+              }}
+              className={`flex-1 px-4 py-2 text-center text-sm font-medium ${activeTab === tab.id
+                ? 'border-b-2 border-orange-500 text-orange-600 dark:text-orange-400'
+                : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200'}
+              `}
+            >
+              {tab.label}
+            </button>
+          ))}
         </div>
-      </header>
 
-      {error && (
-        <div className="flex items-start gap-3 rounded-3xl border border-amber-200 bg-amber-50 p-4 text-sm text-amber-700">
-          <AlertTriangle className="h-5 w-5" aria-hidden="true" />
-          <div>
-            <p>{error}</p>
-            <p className="mt-1">Les valeurs affichées correspondent à la configuration par défaut.</p>
-          </div>
+        <div className="flex-1 overflow-y-auto">
+          {renderEditorContent}
         </div>
-      )}
+      </div>
 
-      <nav className="flex w-full items-center gap-2 rounded-full bg-slate-100 p-1">
-        {TABS.map(tab => (
-          <button
-            key={tab.id}
-            type="button"
-            onClick={() => setActiveTab(tab.id)}
-            className={`flex-1 rounded-full px-4 py-2 text-sm font-medium transition ${
-              activeTab === tab.id
-                ? 'bg-white text-slate-900 shadow'
-                : 'text-slate-500 hover:text-slate-700'
-            }`}
+      <div className="relative flex-1 bg-gray-100 dark:bg-gray-800">
+        {activeTab === 'preview' && draftContent && (
+          <SitePreviewCanvas
+            siteContent={draftContent}
+            products={products}
+            onElementClick={handleElementClick}
+            globalStyle={draftContent.globalStyle}
+          />
+        )}
+        {activeElement && activeElementAnchor && createPortal(
+          <EditorPopover
+            anchorRect={activeElementAnchor}
+            onClose={handleCloseEditor}
           >
-            {tab.label}
-          </button>
-        ))}
-      </nav>
-
-      <div>
-        {activeTab === 'preview' ? (
-          <div className="rounded-[2.5rem] border border-slate-200 bg-slate-50 p-6">
-            <SitePreviewCanvas
-              content={draft}
-              bestSellerProducts={bestSellerProducts}
-              onEdit={() => undefined}
-              activeZone={null}
-              showEditButtons={false}
-            />
-          </div>
-        ) : (
-          <div className="space-y-4">
-            {bestSellerError && (
-              <div className="flex items-start gap-3 rounded-2xl border border-amber-200 bg-amber-50 p-4 text-sm text-amber-700">
-                <AlertTriangle className="h-5 w-5" aria-hidden="true" />
-                <p>{bestSellerError}</p>
-              </div>
-            )}
-            <SitePreviewCanvas
-              content={draft}
-              bestSellerProducts={bestSellerProducts}
-              onEdit={(element, meta) => handleEdit(element, meta)}
-              activeZone={activeZone}
-            />
-            {bestSellerLoading && (
-              <div className="flex items-center gap-2 text-sm text-slate-500">
-                <Loader2 className="h-4 w-4 animate-spin" aria-hidden="true" />
-                Chargement des produits populaires…
-              </div>
-            )}
-          </div>
+            {popoverContent}
+          </EditorPopover>,
+          document.body,
         )}
       </div>
-
-      {activeElement && elementType === 'text' && activeLabel && (
-        <TextElementEditor
-          element={activeElement}
-          label={activeLabel}
-          draft={draft}
-          onApply={applyDraftUpdate}
-          onClose={closeEditor}
-          fontOptions={fontOptions}
-          onAssetAdded={appendAssetToDraft}
-          anchor={activeAnchor}
-        />
-      )}
-
-      {activeElement && elementType === 'image' && activeLabel && (
-        <ImageElementEditor
-          element={activeElement}
-          label={activeLabel}
-          draft={draft}
-          onApply={applyDraftUpdate}
-          onClose={closeEditor}
-          onAssetAdded={appendAssetToDraft}
-          anchor={activeAnchor}
-        />
-      )}
-
-      {activeElement && elementType === 'background' && activeLabel && (
-        <BackgroundElementEditor
-          element={activeElement}
-          label={activeLabel}
-          draft={draft}
-          onApply={applyDraftUpdate}
-          onClose={closeEditor}
-          onAssetAdded={appendAssetToDraft}
-          anchor={activeAnchor}
-        />
-      )}
     </div>
   );
 };
 
 export default SiteCustomization;
+
diff --git a/pages/Ventes.tsx b/pages/Ventes.tsx
index 96cb16f..0dfa720 100644
--- a/pages/Ventes.tsx
+++ b/pages/Ventes.tsx
@@ -73,14 +73,14 @@ const getTableStatus = (table: Table): StatusDescriptor => {
   }
 };
 
-const TableCard: React.FC<{
+const TableCard = React.memo<{
   table: Table;
   onServe: (orderId: string) => void;
   canEdit: boolean;
   onEdit?: (table: Table) => void;
   onDelete?: (table: Table) => Promise<void> | void;
   isDeleting?: boolean;
-}> = ({ table, onServe, canEdit, onEdit, onDelete, isDeleting }) => {
+}>(({ table, onServe, canEdit, onEdit, onDelete, isDeleting }) => {
   const navigate = useNavigate();
   const { text, statusClass, Icon } = getTableStatus(table);
   const [isMenuOpen, setIsMenuOpen] = useState(false);
@@ -162,7 +162,7 @@ const TableCard: React.FC<{
             type="button"
             onClick={handleMenuToggle}
             className="flex h-9 w-9 items-center justify-center rounded-full text-gray-500 transition hover:bg-gray-100 hover:text-gray-700 focus:outline-none focus-visible:ring-2 focus-visible:ring-primary-500 disabled:cursor-not-allowed disabled:opacity-60"
-            aria-haspopup="menu"
+            aria-haspopup="true"
             aria-expanded={isMenuOpen}
             aria-label="Options de la table"
             disabled={isDeleting}
@@ -175,6 +175,7 @@ const TableCard: React.FC<{
                 type="button"
                 onClick={handleEditClick}
                 className="flex w-full items-center gap-2 px-3 py-2 text-left text-gray-700 transition hover:bg-gray-100"
+                aria-label="Modifier la table"
               >
                 <Pencil size={16} />
                 Modifier
@@ -184,6 +185,7 @@ const TableCard: React.FC<{
                 onClick={handleDeleteClick}
                 className="flex w-full items-center gap-2 px-3 py-2 text-left text-red-600 transition hover:bg-red-50 disabled:cursor-not-allowed disabled:opacity-60"
                 disabled={isDeleting}
+                aria-label={isDeleting ? 'Suppression de la table en cours…' : 'Supprimer la table'}
               >
                 <Trash2 size={16} />
                 {isDeleting ? 'Suppression…' : 'Supprimer'}
@@ -222,7 +224,7 @@ const TableCard: React.FC<{
       </div>
     </div>
   );
-};
+});
 
 const Ventes: React.FC = () => {
   const { role } = useAuth();
@@ -237,14 +239,31 @@ const Ventes: React.FC = () => {
   const [modalMode, setModalMode] = useState<'create' | 'edit'>('create');
   const [selectedTable, setSelectedTable] = useState<Table | null>(null);
   const [deletingTableId, setDeletingTableId] = useState<string | null>(null);
+  const [page, setPage] = useState(0);
+  const [hasMore, setHasMore] = useState(true);
+  const limit = 20; // Nombre de tables à charger par page
+
   const fetchIdRef = useRef(0);
 
-  const fetchTables = useCallback(async () => {
+  const fetchTables = useCallback(async (reset = false) => {
     const fetchId = ++fetchIdRef.current;
+    if (reset) {
+      setLoading(true);
+      setPage(0);
+      setTables([]);
+      setHasMore(true);
+    }
+
+    if (!hasMore && !reset) {
+      setLoading(false);
+      return;
+    }
+
     try {
-      const data = await api.getTables();
+      const data = await api.getTables(reset ? 0 : page, limit);
       if (fetchId === fetchIdRef.current) {
-        setTables(data);
+        setTables(prevTables => (reset ? data : [...prevTables, ...data]));
+        setHasMore(data.length === limit);
         setFetchError(null);
       }
     } catch (error) {
@@ -257,19 +276,22 @@ const Ventes: React.FC = () => {
         setLoading(false);
       }
     }
-  }, []);
+  }, [page, hasMore]);
 
   useEffect(() => {
-    setLoading(true);
-    fetchTables();
-    const interval = setInterval(fetchTables, 10000);
-    const unsubscribe = api.notifications.subscribe('orders_updated', fetchTables);
+    fetchTables(true);
+    const interval = setInterval(() => fetchTables(true), 10000); // Rafraîchir toutes les 10 secondes
+    const unsubscribe = api.notifications.subscribe('orders_updated', () => fetchTables(true));
     return () => {
       clearInterval(interval);
       unsubscribe();
     };
   }, [fetchTables]);
 
+  const handleLoadMore = useCallback(() => {
+    setPage(prevPage => prevPage + 1);
+  }, []);
+
   const handleModalClose = useCallback(() => {
     setIsModalOpen(false);
     setSelectedTable(null);
@@ -311,7 +333,7 @@ const Ventes: React.FC = () => {
           successMessage = 'Table mise à jour avec succès.';
         }
 
-        await fetchTables();
+        await fetchTables(true); // Recharger toutes les tables après modification/création
         handleModalClose();
         setActionSuccess(successMessage);
       } catch (error) {
@@ -339,7 +361,7 @@ const Ventes: React.FC = () => {
 
       try {
         await api.deleteTable(table.id);
-        await fetchTables();
+        await fetchTables(true); // Recharger toutes les tables après suppression
         setActionSuccess('Table supprimée avec succès.');
       } catch (error) {
         console.error('Failed to delete table:', error);
@@ -357,7 +379,7 @@ const Ventes: React.FC = () => {
       setActionSuccess(null);
       try {
         await api.markOrderAsServed(orderId);
-        await fetchTables();
+        await fetchTables(true); // Recharger toutes les tables après avoir servi une commande
       } catch (error) {
         console.error('Failed to mark order as served:', error);
         setActionError('Impossible de marquer la commande comme servie. Veuillez réessayer.');
@@ -366,7 +388,7 @@ const Ventes: React.FC = () => {
     [fetchTables],
   );
 
-  if (loading) {
+  if (loading && tables.length === 0) {
     return <p className="section-text section-text--muted">Chargement du plan de salle...</p>;
   }
 
@@ -420,6 +442,19 @@ const Ventes: React.FC = () => {
         ))}
       </div>
 
+      {hasMore && (
+        <div className="flex justify-center mt-6">
+          <button
+            type="button"
+            onClick={handleLoadMore}
+            className="ui-btn ui-btn-secondary"
+            disabled={loading}
+          >
+            {loading ? 'Chargement...' : 'Charger plus de tables'}
+          </button>
+        </div>
+      )}
+
       <TableModal
         isOpen={isModalOpen}
         onClose={handleModalClose}
@@ -430,6 +465,7 @@ const Ventes: React.FC = () => {
       />
     </div>
   );
-};
+});
 
 export default Ventes;
+
diff --git a/services/api.ts b/services/api.ts
deleted file mode 100644
index 5be33dc..0000000
--- a/services/api.ts
+++ /dev/null
@@ -1,2132 +0,0 @@
-import { supabase } from './supabaseClient';
-import { normalizeCloudinaryImageUrl, resolveProductImageUrl } from './cloudinary';
-import { clearRoleLoginsBefore, fetchRoleLoginsSince, logRoleLogin } from './roleLogins';
-
-import {
-  Role,
-  Table,
-  Order,
-  KitchenTicket,
-  Product,
-  Category,
-  Ingredient,
-  OrderItem,
-  RecipeItem,
-  DashboardStats,
-  DashboardPeriod,
-  SalesDataPoint,
-  NotificationCounts,
-  DailyReport,
-  SoldProduct,
-  Sale,
-  RoleLogin,
-  SiteContent,
-} from '../types';
-import { ROLE_HOME_PAGE_META_KEY, ROLES, SITE_CUSTOMIZER_PERMISSION_KEY } from '../constants';
-import { resolveSiteContent, sanitizeSiteContentInput } from '../utils/siteContent';
-
-type SupabasePermissions = Role['permissions'] & {
-  [key in typeof ROLE_HOME_PAGE_META_KEY]?: string;
-};
-
-type SupabaseRoleRow = {
-  id: string;
-  name: string;
-  pin?: string | null;
-  permissions: SupabasePermissions | null;
-
-};
-
-type SupabaseTableRow = {
-  id: string;
-  nom: string;
-  capacite: number;
-  statut: Table['statut'];
-  commande_id: string | null;
-  couverts: number | null;
-};
-
-type SupabaseOrderMetaRow = {
-  id: string;
-  estado_cocina: Order['estado_cocina'];
-  date_envoi_cuisine: string | null;
-};
-
-type SupabaseRecipeRow = {
-  ingredient_id: string;
-  qte_utilisee: number;
-};
-
-type SupabaseProductRow = {
-  id: string;
-  nom_produit: string;
-  description: string | null;
-  prix_vente: number;
-  categoria_id: string;
-  estado: Product['estado'];
-  image: string | null;
-  is_best_seller: boolean | null | undefined;
-  best_seller_rank: number | null | undefined;
-  product_recipes: SupabaseRecipeRow[] | null;
-};
-
-type SupabaseIngredientRow = {
-  id: string;
-  nom: string;
-  unite: Ingredient['unite'];
-  stock_minimum: number;
-  stock_actuel: number;
-  prix_unitaire: number;
-};
-
-type SupabaseCategoryRow = {
-  id: string;
-  nom: string;
-};
-
-type SupabaseOrderItemRow = {
-  id: string;
-  order_id: string;
-  produit_id: string;
-  nom_produit: string;
-  prix_unitaire: number;
-  quantite: number;
-  excluded_ingredients: string[] | null;
-  commentaire: string | null;
-  estado: OrderItem['estado'];
-  date_envoi: string | null;
-};
-
-type SupabaseOrderRow = {
-  id: string;
-  type: Order['type'];
-  table_id: string | null;
-  table_nom: string | null;
-  couverts: number | null;
-  statut: Order['statut'];
-  estado_cocina: Order['estado_cocina'];
-  date_creation: string;
-  date_envoi_cuisine: string | null;
-  date_listo_cuisine: string | null;
-  date_servido: string | null;
-  payment_status: Order['payment_status'];
-  total: number | null;
-  profit: number | null;
-  payment_method: Order['payment_method'] | null;
-  payment_receipt_url: string | null;
-  client_nom: string | null;
-  client_telephone: string | null;
-  client_adresse: string | null;
-  receipt_url: string | null;
-  order_items: SupabaseOrderItemRow[] | null;
-};
-
-type SupabaseSaleRow = {
-  id: string;
-  order_id: string;
-  product_id: string;
-  product_name: string;
-  category_id: string;
-  category_name: string;
-  quantity: number;
-  unit_price: number;
-  total_price: number;
-  unit_cost: number;
-  total_cost: number;
-  profit: number;
-  payment_method: Order['payment_method'] | null;
-  sale_date: string;
-};
-
-type SupabaseSiteContentRow = {
-  id: string;
-  content: Partial<SiteContent> | null;
-  updated_at: string | null;
-};
-
-type SalesPeriod = {
-  start?: Date | string;
-  end?: Date | string;
-};
-
-type SupabaseResponse<T> = {
-  data: T;
-  error: { message: string } | null;
-  status?: number;
-};
-
-type TablePayload = {
-  nom: string;
-  capacite: number;
-  couverts?: number | null;
-};
-
-type TableUpdatePayload = Partial<TablePayload>;
-
-type EventCallback = () => void;
-
-const eventListeners: Record<string, EventCallback[]> = {};
-
-const publishEvent = (event: string) => {
-  if (eventListeners[event]) {
-    eventListeners[event].forEach(callback => callback());
-  }
-};
-
-let ordersRealtimeChannel: ReturnType<typeof supabase.channel> | null = null;
-
-const SITE_CONTENT_TABLE = 'site_content';
-const SITE_CONTENT_SINGLETON_ID = 'default';
-
-const ensureOrdersRealtimeSubscription = () => {
-  if (ordersRealtimeChannel || typeof (supabase as { channel?: unknown }).channel !== 'function') {
-    return;
-  }
-
-  try {
-    ordersRealtimeChannel = supabase
-      .channel('orders-updates')
-      .on('postgres_changes', { event: '*', schema: 'public', table: 'orders' }, () => publishEvent('orders_updated'))
-      .on(
-        'postgres_changes',
-        { event: '*', schema: 'public', table: 'order_items' },
-        () => publishEvent('orders_updated'),
-      )
-      .on(
-        'postgres_changes',
-        { event: '*', schema: 'public', table: 'restaurant_tables' },
-        () => publishEvent('orders_updated'),
-      )
-      .subscribe(status => {
-        if (status === 'CHANNEL_ERROR' || status === 'CLOSED' || status === 'TIMED_OUT') {
-          ordersRealtimeChannel = null;
-        }
-      });
-  } catch (error) {
-    console.warn('Failed to subscribe to real-time order updates', error);
-  }
-};
-
-const unwrap = <T>(response: SupabaseResponse<T>): T => {
-  if (response.error) {
-    throw new Error(response.error.message);
-  }
-  return response.data;
-};
-
-const unwrapMaybe = <T>(response: SupabaseResponse<T | null>): T | null => {
-  if (response.error && response.status !== 406) {
-    throw new Error(response.error.message);
-  }
-  return response.data ?? null;
-};
-
-const toTimestamp = (value?: string | null): number | undefined => {
-  if (!value) {
-    return undefined;
-  }
-  return new Date(value).getTime();
-};
-
-const toNumber = (value: number | string | null | undefined): number | undefined => {
-  if (value === null || value === undefined) {
-    return undefined;
-  }
-
-  if (typeof value === 'number') {
-    return value;
-  }
-
-  const parsed = Number(value);
-  return Number.isFinite(parsed) ? parsed : undefined;
-};
-
-const toIsoString = (value: number | undefined | null): string | null | undefined => {
-  if (value === undefined) {
-    return undefined;
-  }
-  if (value === null) {
-    return null;
-  }
-  return new Date(value).toISOString();
-};
-
-const calculateCost = (recipe: RecipeItem[], ingredientMap: Map<string, Ingredient>): number => {
-  return recipe.reduce((total, item) => {
-    const ingredient = ingredientMap.get(item.ingredient_id);
-    if (!ingredient) {
-      return total;
-    }
-
-    let unitPrice = ingredient.prix_unitaire;
-    if (ingredient.unite === 'kg' || ingredient.unite === 'L') {
-      unitPrice = unitPrice / 1000;
-    }
-
-    return total + unitPrice * item.qte_utilisee;
-  }, 0);
-};
-
-const extractPermissions = (
-  permissions: SupabaseRoleRow['permissions'],
-): { permissions: Role['permissions']; homePage?: string } => {
-  if (!permissions) {
-    return { permissions: {}, homePage: undefined };
-  }
-
-  const { [ROLE_HOME_PAGE_META_KEY]: homePage, ...permissionLevels } = permissions;
-
-  return {
-    permissions: permissionLevels as Role['permissions'],
-    homePage: typeof homePage === 'string' ? homePage : undefined,
-  };
-};
-
-const mergeHomePageIntoPermissions = (
-  permissions: Role['permissions'],
-  homePage?: string,
-): SupabasePermissions => {
-  const payload: SupabasePermissions = { ...permissions };
-
-  if (homePage) {
-    payload[ROLE_HOME_PAGE_META_KEY] = homePage;
-  } else {
-    delete payload[ROLE_HOME_PAGE_META_KEY];
-  }
-
-  return payload;
-};
-
-const isAdminRoleName = (name?: string | null): boolean => {
-  if (!name) {
-    return false;
-  }
-
-  const normalized = name.trim().toLowerCase();
-  return normalized === ROLES.ADMIN || normalized === 'administrateur';
-};
-
-const withSiteCustomizerPermission = (
-  permissions: Role['permissions'],
-  roleName?: string | null,
-): Role['permissions'] => {
-  const normalized: Role['permissions'] = { ...permissions };
-  if (!(SITE_CUSTOMIZER_PERMISSION_KEY in normalized)) {
-    normalized[SITE_CUSTOMIZER_PERMISSION_KEY] = isAdminRoleName(roleName) ? 'editor' : 'none';
-  }
-
-  return normalized;
-};
-
-const mapRoleRow = (row: SupabaseRoleRow, includePin: boolean): Role => {
-  const { permissions, homePage } = extractPermissions(row.permissions);
-  const normalizedPermissions = withSiteCustomizerPermission(permissions, row.name);
-  const role: Role = {
-    id: row.id,
-    name: row.name,
-    homePage,
-    permissions: normalizedPermissions,
-
-  };
-
-  if (includePin && row.pin) {
-    role.pin = row.pin;
-  }
-
-  return role;
-};
-
-const mapSiteContentRow = (row: SupabaseSiteContentRow | null): SiteContent | null => {
-  if (!row?.content) {
-    return null;
-  }
-
-  return resolveSiteContent(row.content);
-};
-
-const mapIngredientRow = (row: SupabaseIngredientRow): Ingredient => ({
-  id: row.id,
-  nom: row.nom,
-  unite: row.unite,
-  stock_minimum: row.stock_minimum,
-  stock_actuel: row.stock_actuel,
-  prix_unitaire: row.prix_unitaire,
-});
-
-const mapCategoryRow = (row: SupabaseCategoryRow): Category => ({
-  id: row.id,
-  nom: row.nom,
-});
-
-const mapRecipeRow = (row: SupabaseRecipeRow): RecipeItem => ({
-  ingredient_id: row.ingredient_id,
-  qte_utilisee: row.qte_utilisee,
-});
-
-const mapProductRow = (row: SupabaseProductRow, ingredientMap?: Map<string, Ingredient>): Product => {
-  const recipe = (row.product_recipes ?? []).map(mapRecipeRow);
-  const product: Product = {
-    id: row.id,
-    nom_produit: row.nom_produit,
-    description: row.description ?? undefined,
-    prix_vente: row.prix_vente,
-    categoria_id: row.categoria_id,
-    estado: row.estado,
-    image: resolveProductImageUrl(row.image),
-    recipe,
-    is_best_seller: row.is_best_seller ?? false,
-    best_seller_rank: row.best_seller_rank ?? null,
-  };
-
-  if (ingredientMap) {
-    product.cout_revient = calculateCost(recipe, ingredientMap);
-  }
-
-  return product;
-};
-
-const isUuid = (value?: string | null): value is string =>
-  !!value && /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(value);
-
-const mapOrderItemRow = (row: SupabaseOrderItemRow): OrderItem => ({
-  id: row.id,
-  produitRef: row.produit_id,
-  nom_produit: row.nom_produit,
-  prix_unitaire: toNumber(row.prix_unitaire) ?? 0,
-  quantite: row.quantite,
-  excluded_ingredients: row.excluded_ingredients ?? [],
-  commentaire: row.commentaire ?? '',
-  estado: row.estado,
-  date_envoi: toTimestamp(row.date_envoi),
-});
-
-const areArraysEqual = (a: string[], b: string[]): boolean => {
-  if (a.length !== b.length) {
-    return false;
-  }
-
-  return a.every((value, index) => value === b[index]);
-};
-
-const areOrderItemsEquivalent = (a: OrderItem, b: OrderItem): boolean => {
-  if (
-    a.produitRef !== b.produitRef ||
-    a.nom_produit !== b.nom_produit ||
-    a.prix_unitaire !== b.prix_unitaire ||
-    a.quantite !== b.quantite ||
-    a.commentaire !== b.commentaire ||
-    a.estado !== b.estado
-  ) {
-    return false;
-  }
-
-  const excludedIngredientsA = [...a.excluded_ingredients].sort();
-  const excludedIngredientsB = [...b.excluded_ingredients].sort();
-
-  return areArraysEqual(excludedIngredientsA, excludedIngredientsB);
-};
-
-const reorderOrderItems = (referenceItems: OrderItem[], itemsToReorder: OrderItem[]): OrderItem[] => {
-  const remaining = [...itemsToReorder];
-  const ordered: OrderItem[] = [];
-
-  referenceItems.forEach(referenceItem => {
-    const matchIndex = remaining.findIndex(item => areOrderItemsEquivalent(item, referenceItem));
-    if (matchIndex !== -1) {
-      ordered.push(remaining.splice(matchIndex, 1)[0]);
-    }
-  });
-
-  return [...ordered, ...remaining];
-};
-
-const mapOrderRow = (row: SupabaseOrderRow): Order => {
-  const items = (row.order_items ?? []).map(mapOrderItemRow);
-  const total = toNumber(row.total);
-  const profit = toNumber(row.profit);
-  const order: Order = {
-    id: row.id,
-    type: row.type,
-    table_id: row.table_id ?? undefined,
-    table_nom: row.table_nom ?? undefined,
-    couverts: row.couverts ?? 0,
-    statut: row.statut,
-    estado_cocina: row.estado_cocina,
-    date_creation: toTimestamp(row.date_creation) ?? Date.now(),
-    date_envoi_cuisine: toTimestamp(row.date_envoi_cuisine),
-    date_listo_cuisine: toTimestamp(row.date_listo_cuisine),
-    date_servido: toTimestamp(row.date_servido),
-    payment_status: row.payment_status,
-    items,
-    total: total ?? items.reduce((sum, item) => sum + item.prix_unitaire * item.quantite, 0),
-    profit: profit,
-    payment_method: row.payment_method ?? undefined,
-    payment_receipt_url: row.payment_receipt_url ?? undefined,
-    receipt_url: row.receipt_url ?? undefined,
-  };
-
-  if (row.client_nom || row.client_telephone || row.client_adresse) {
-    order.clientInfo = {
-      nom: row.client_nom ?? '',
-      telephone: row.client_telephone ?? '',
-      adresse: row.client_adresse ?? undefined,
-    };
-  }
-
-  return order;
-};
-
-const mapSaleRow = (row: SupabaseSaleRow): Sale => ({
-  id: row.id,
-  orderId: row.order_id,
-  productId: row.product_id,
-  productName: row.product_name,
-  categoryId: row.category_id,
-  categoryName: row.category_name,
-  quantity: row.quantity,
-  unitPrice: row.unit_price,
-  totalPrice: row.total_price,
-  unitCost: row.unit_cost,
-  totalCost: row.total_cost,
-  profit: row.profit,
-  paymentMethod: row.payment_method ?? undefined,
-  saleDate: toTimestamp(row.sale_date) ?? Date.now(),
-});
-
-const resolveTableStatut = (
-  row: SupabaseTableRow,
-  meta?: { estado_cocina?: Order['estado_cocina'] },
-): Table['statut'] => {
-  if (!row.commande_id) {
-    return 'libre';
-  }
-
-  const estadoCocina = meta?.estado_cocina;
-
-  if (!estadoCocina || estadoCocina === 'no_enviado') {
-    return 'libre';
-  }
-
-  if (estadoCocina === 'listo') {
-    return 'para_entregar';
-  }
-
-  if (estadoCocina === 'servido' || estadoCocina === 'entregada') {
-    return 'para_pagar';
-  }
-
-  if (row.statut === 'para_entregar' || row.statut === 'para_pagar') {
-    return row.statut;
-  }
-
-  return 'en_cuisine';
-};
-
-const mapTableRow = (
-  row: SupabaseTableRow,
-  orderMeta: Map<string, { estado_cocina?: Order['estado_cocina']; date_envoi_cuisine?: number }>,
-): Table => {
-  const meta = row.commande_id ? orderMeta.get(row.commande_id) : undefined;
-
-  const table: Table = {
-    id: row.id,
-    nom: row.nom,
-    capacite: row.capacite,
-    statut: resolveTableStatut(row, meta),
-    commandeId: row.commande_id ?? undefined,
-    couverts: row.commande_id ? row.couverts ?? undefined : undefined,
-  };
-
-  if (table.commandeId && meta) {
-    table.estado_cocina = meta.estado_cocina;
-    table.date_envoi_cuisine = meta.date_envoi_cuisine;
-  }
-
-  return table;
-};
-
-const mapTableRowWithMeta = async (row: SupabaseTableRow): Promise<Table> => {
-  if (!row.commande_id) {
-    return mapTableRow(row, new Map());
-  }
-
-  const orderResponse = await supabase
-    .from('orders')
-    .select('id, estado_cocina, date_envoi_cuisine')
-    .eq('id', row.commande_id)
-    .maybeSingle();
-  const orderMetaRow = unwrapMaybe<SupabaseOrderMetaRow>(
-    orderResponse as SupabaseResponse<SupabaseOrderMetaRow | null>,
-  );
-
-  const orderMeta = orderMetaRow
-    ? new Map([
-        [
-          orderMetaRow.id,
-          {
-            estado_cocina: orderMetaRow.estado_cocina,
-            date_envoi_cuisine: toTimestamp(orderMetaRow.date_envoi_cuisine),
-          },
-        ],
-      ])
-    : new Map();
-
-  return mapTableRow(row, orderMeta);
-};
-
-const selectOrdersQuery = () =>
-  supabase
-    .from('orders')
-    .select(
-      `
-        id,
-        type,
-        table_id,
-        table_nom,
-        couverts,
-        statut,
-        estado_cocina,
-        date_creation,
-        date_envoi_cuisine,
-        date_listo_cuisine,
-        date_servido,
-        payment_status,
-        total,
-        profit,
-        payment_method,
-        payment_receipt_url,
-        client_nom,
-        client_telephone,
-        client_adresse,
-        receipt_url,
-        order_items (
-          id,
-          order_id,
-          produit_id,
-          nom_produit,
-          prix_unitaire,
-          quantite,
-          excluded_ingredients,
-          commentaire,
-          estado,
-          date_envoi
-        )
-      `,
-    )
-    .order('date_creation', { ascending: false });
-
-type SelectProductsQueryOptions = {
-  orderBy?: { column: string; ascending?: boolean; nullsFirst?: boolean };
-  includeBestSellerColumns?: boolean;
-  includeRecipes?: boolean;
-};
-
-const buildProductSelectColumns = (includeBestSellerColumns: boolean, includeRecipes: boolean): string => {
-  const bestSellerColumns = includeBestSellerColumns
-    ? `,
-        is_best_seller,
-        best_seller_rank`
-    : '';
-
-  const recipeColumns = includeRecipes
-    ? `,
-        product_recipes (
-          ingredient_id,
-          qte_utilisee
-        )`
-    : '';
-
-  return `
-        id,
-        nom_produit,
-        description,
-        prix_vente,
-        categoria_id,
-        estado,
-        image${bestSellerColumns}${recipeColumns}
-      `;
-};
-
-const selectProductsQuery = (options?: SelectProductsQueryOptions) => {
-  const includeBestSellerColumns = options?.includeBestSellerColumns !== false;
-  const includeRecipes = options?.includeRecipes !== false;
-  let query = supabase
-    .from('products')
-    .select(buildProductSelectColumns(includeBestSellerColumns, includeRecipes));
-
-  if (options?.orderBy) {
-    query = query.order(options.orderBy.column, {
-      ascending: options.orderBy.ascending ?? true,
-      nullsFirst: options.orderBy.nullsFirst,
-    });
-  } else {
-    query = query.order('nom_produit');
-  }
-
-  return query;
-};
-
-const isMissingBestSellerColumnError = (error: { message?: string } | null): boolean => {
-  if (!error?.message) {
-    return false;
-  }
-
-  const normalizedMessage = error.message.toLowerCase();
-  return (
-    normalizedMessage.includes('does not exist') &&
-    normalizedMessage.includes('column') &&
-    (normalizedMessage.includes('is_best_seller') || normalizedMessage.includes('best_seller_rank'))
-  );
-};
-
-const runProductsQueryWithFallback = async <T>(
-  executor: (
-    query: ReturnType<typeof selectProductsQuery>,
-    includeBestSellerColumns: boolean,
-  ) => Promise<SupabaseResponse<T>>,
-  options?: Omit<SelectProductsQueryOptions, 'includeBestSellerColumns'>,
-): Promise<SupabaseResponse<T>> => {
-  const includeBestSellerColumns = true;
-  let response = await executor(selectProductsQuery({ ...options, includeBestSellerColumns }), includeBestSellerColumns);
-
-  if (isMissingBestSellerColumnError(response.error)) {
-    const fallbackIncludeBestSellerColumns = false;
-    response = await executor(
-      selectProductsQuery({ ...options, includeBestSellerColumns: fallbackIncludeBestSellerColumns }),
-      fallbackIncludeBestSellerColumns,
-    );
-  }
-
-  return response;
-};
-
-const fetchOrderById = async (orderId: string): Promise<Order | null> => {
-  const response = await selectOrdersQuery().eq('id', orderId).maybeSingle();
-  const row = unwrapMaybe<SupabaseOrderRow>(response as SupabaseResponse<SupabaseOrderRow | null>);
-  return row ? mapOrderRow(row) : null;
-};
-
-const fetchIngredients = async (): Promise<Ingredient[]> => {
-  const response = await supabase
-    .from('ingredients')
-    .select('id, nom, unite, stock_minimum, stock_actuel, prix_unitaire')
-    .order('nom');
-  const rows = unwrap<SupabaseIngredientRow[]>(response as SupabaseResponse<SupabaseIngredientRow[]>);
-  return rows.map(mapIngredientRow);
-};
-
-const isPermissionError = (error: unknown): boolean => {
-  if (!error) {
-    return false;
-  }
-
-  if (typeof error === 'string') {
-    return error.toLowerCase().includes('permission');
-  }
-
-  if (error instanceof Error) {
-    return error.message.toLowerCase().includes('permission');
-  }
-
-  if (typeof error === 'object' && 'message' in error) {
-    const message = String((error as { message?: unknown }).message ?? '');
-    return message.toLowerCase().includes('permission');
-  }
-
-  return false;
-};
-
-const fetchIngredientsOrWarn = async (context: string): Promise<Ingredient[]> => {
-  try {
-    return await fetchIngredients();
-  } catch (error) {
-    if (isPermissionError(error)) {
-      console.warn(
-        `[api.${context}] Impossible de récupérer les ingrédients (permissions insuffisantes). Poursuite avec une liste vide.`,
-        error,
-      );
-      return [];
-    }
-
-    throw error;
-  }
-};
-
-const fetchCategories = async (): Promise<Category[]> => {
-  const response = await supabase
-    .from('categories')
-    .select('id, nom')
-    .order('nom');
-  const rows = unwrap<SupabaseCategoryRow[]>(response as SupabaseResponse<SupabaseCategoryRow[]>);
-  return rows.map(mapCategoryRow);
-};
-
-const fetchTablesWithMeta = async (): Promise<Table[]> => {
-  const response = await supabase
-    .from('restaurant_tables')
-    .select('id, nom, capacite, statut, commande_id, couverts')
-    .order('nom');
-
-  const tableRows = unwrap<SupabaseTableRow[]>(response as SupabaseResponse<SupabaseTableRow[]>);
-  const activeOrderIds = tableRows
-    .map(row => row.commande_id)
-    .filter((value): value is string => Boolean(value));
-
-  let orderMeta = new Map<string, { estado_cocina?: Order['estado_cocina']; date_envoi_cuisine?: number }>();
-  if (activeOrderIds.length > 0) {
-    const ordersResponse = await supabase
-      .from('orders')
-      .select('id, estado_cocina, date_envoi_cuisine')
-      .in('id', activeOrderIds);
-    const orderRows = unwrap<SupabaseOrderMetaRow[]>(ordersResponse as SupabaseResponse<SupabaseOrderMetaRow[]>);
-    orderMeta = new Map(
-      orderRows.map(order => [
-        order.id,
-        {
-          estado_cocina: order.estado_cocina,
-          date_envoi_cuisine: toTimestamp(order.date_envoi_cuisine),
-        },
-      ]),
-    );
-  }
-
-  return tableRows.map(row => mapTableRow(row, orderMeta));
-};
-
-export const getBusinessDayStart = (now: Date = new Date()): Date => {
-  const startTime = new Date(now);
-  startTime.setHours(5, 0, 0, 0);
-
-  if (now < startTime) {
-    startTime.setDate(startTime.getDate() - 1);
-  }
-
-  return startTime;
-};
-
-const DASHBOARD_PERIOD_CONFIG: Record<DashboardPeriod, { days: number; label: string }> = {
-  week: { days: 7, label: '7 derniers jours' },
-  month: { days: 30, label: '30 derniers jours' },
-};
-
-const resolveDashboardPeriodBounds = (period: DashboardPeriod) => {
-  const config = DASHBOARD_PERIOD_CONFIG[period];
-  const end = new Date(getBusinessDayStart());
-  end.setDate(end.getDate() + 1);
-  const start = new Date(end);
-  start.setDate(start.getDate() - config.days);
-  return { config, start, end };
-};
-
-const createSalesEntriesForOrder = async (order: Order): Promise<number> => {
-  if (!order.items.length) {
-    await supabase.from('sales').delete().eq('order_id', order.id);
-    await supabase.from('orders').update({ profit: 0 }).eq('id', order.id);
-    return 0;
-  }
-
-  const productIds = Array.from(new Set(order.items.map(item => item.produitRef)));
-  const productsPromise =
-    productIds.length > 0
-      ? runProductsQueryWithFallback(query => query.in('id', productIds))
-      : runProductsQueryWithFallback(query => query.limit(0));
-  const [categories, ingredients, productsResponse] = await Promise.all([
-    fetchCategories(),
-    fetchIngredients(),
-    productsPromise,
-  ]);
-
-  const ingredientMap = new Map(ingredients.map(ingredient => [ingredient.id, ingredient]));
-  const categoryMap = new Map(categories.map(category => [category.id, category.nom]));
-
-  let productRows: SupabaseProductRow[] = [];
-  if (productIds.length > 0) {
-    productRows = unwrap<SupabaseProductRow[]>(productsResponse as SupabaseResponse<SupabaseProductRow[]>);
-  }
-
-  const productMap = new Map(
-    productRows.map(row => {
-      const product = mapProductRow(row, ingredientMap);
-      return [product.id, product] as const;
-    }),
-  );
-
-  const saleDateIso = toIsoString(order.date_servido) ?? new Date().toISOString();
-  const salesEntries = order.items.map(item => {
-    const product = productMap.get(item.produitRef);
-    const cost = product ? calculateCost(product.recipe, ingredientMap) : 0;
-    const categoryId = product?.categoria_id ?? 'unknown';
-    const categoryName = product ? categoryMap.get(categoryId) ?? 'Sans catégorie' : 'Sans catégorie';
-    const profit = (item.prix_unitaire - cost) * item.quantite;
-
-    return {
-      order_id: order.id,
-      product_id: item.produitRef,
-      product_name: item.nom_produit,
-      category_id: categoryId,
-      category_name: categoryName,
-      quantity: item.quantite,
-      unit_price: item.prix_unitaire,
-      total_price: item.prix_unitaire * item.quantite,
-      unit_cost: cost,
-      total_cost: cost * item.quantite,
-      profit,
-      payment_method: order.payment_method ?? null,
-      sale_date: saleDateIso,
-    };
-  });
-
-  const totalProfit = salesEntries.reduce((sum, entry) => sum + entry.profit, 0);
-
-  await supabase.from('sales').delete().eq('order_id', order.id);
-  await supabase.from('sales').insert(salesEntries);
-  await supabase.from('orders').update({ profit: totalProfit }).eq('id', order.id);
-
-  return totalProfit;
-};
-
-const notificationsService = {
-  subscribe: (event: string, callback: EventCallback): (() => void) => {
-    if (!eventListeners[event]) {
-      eventListeners[event] = [];
-    }
-    eventListeners[event].push(callback);
-
-    if (event === 'orders_updated') {
-      ensureOrdersRealtimeSubscription();
-    }
-
-    return () => {
-      eventListeners[event] = (eventListeners[event] ?? []).filter(cb => cb !== callback);
-
-      if (event === 'orders_updated' && eventListeners[event]?.length === 0 && ordersRealtimeChannel) {
-        if (typeof (supabase as { removeChannel?: (channel: unknown) => void }).removeChannel === 'function') {
-          supabase.removeChannel(ordersRealtimeChannel);
-        }
-        ordersRealtimeChannel = null;
-      }
-    };
-  },
-  publish: (event: string) => {
-    publishEvent(event);
-  },
-};
-
-type PublishOrderChangeOptions = {
-  includeNotifications?: boolean;
-};
-
-const publishOrderChange = (options?: PublishOrderChangeOptions) => {
-  if (options?.includeNotifications !== false) {
-    notificationsService.publish('notifications_updated');
-  }
-  notificationsService.publish('orders_updated');
-};
-
-export const api = {
-  notifications: notificationsService,
-
-  getSiteContent: async (): Promise<SiteContent | null> => {
-    const response = await supabase
-      .from(SITE_CONTENT_TABLE)
-      .select('id, content, updated_at')
-      .order('updated_at', { ascending: false })
-      .limit(1)
-      .maybeSingle();
-
-    const row = unwrapMaybe<SupabaseSiteContentRow>(
-      response as SupabaseResponse<SupabaseSiteContentRow | null>,
-    );
-
-    return mapSiteContentRow(row);
-  },
-
-  updateSiteContent: async (content: SiteContent): Promise<SiteContent> => {
-    const sanitized = sanitizeSiteContentInput(content);
-
-    const response = await supabase
-      .from(SITE_CONTENT_TABLE)
-      .upsert(
-        {
-          id: SITE_CONTENT_SINGLETON_ID,
-          content: sanitized,
-        },
-        { onConflict: 'id' },
-      )
-      .select('id, content, updated_at')
-      .single();
-
-    const row = unwrap<SupabaseSiteContentRow>(response as SupabaseResponse<SupabaseSiteContentRow>);
-    const mapped = mapSiteContentRow(row);
-
-    if (!mapped) {
-      throw new Error('Contenu du site introuvable après la mise à jour.');
-    }
-
-    return mapped;
-  },
-
-  getRoles: async (): Promise<Role[]> => {
-    const response = await supabase.from('roles').select('id, name, pin, permissions').order('name');
-
-    const rows = unwrap<SupabaseRoleRow[]>(response as SupabaseResponse<SupabaseRoleRow[]>);
-    return rows.map(row => mapRoleRow(row, true));
-  },
-
-  getRoleById: async (roleId: string): Promise<Role | null> => {
-    const response = await supabase
-      .from('roles')
-      .select('id, name, permissions')
-      .eq('id', roleId)
-      .maybeSingle();
-    const row = unwrapMaybe<SupabaseRoleRow>(response as SupabaseResponse<SupabaseRoleRow | null>);
-    return row ? mapRoleRow(row, false) : null;
-  },
-
-  createRole: async (payload: Omit<Role, 'id'>): Promise<Role> => {
-    const response = await supabase
-      .from('roles')
-      .insert({
-        name: payload.name,
-        pin: payload.pin,
-        permissions: mergeHomePageIntoPermissions(payload.permissions, payload.homePage),
-
-      })
-      .select('id, name, pin, permissions')
-      .single();
-    const row = unwrap<SupabaseRoleRow>(response as SupabaseResponse<SupabaseRoleRow>);
-    notificationsService.publish('notifications_updated');
-    return mapRoleRow(row, true);
-  },
-
-  updateRole: async (roleId: string, updates: Omit<Role, 'id'>): Promise<Role> => {
-    const response = await supabase
-      .from('roles')
-      .update({
-        name: updates.name,
-        pin: updates.pin,
-        permissions: mergeHomePageIntoPermissions(updates.permissions, updates.homePage),
-
-      })
-      .eq('id', roleId)
-      .select('id, name, pin, permissions')
-      .single();
-    const row = unwrap<SupabaseRoleRow>(response as SupabaseResponse<SupabaseRoleRow>);
-    notificationsService.publish('notifications_updated');
-    return mapRoleRow(row, true);
-  },
-
-  deleteRole: async (roleId: string): Promise<void> => {
-    const response = await supabase.from('roles').delete().eq('id', roleId);
-    unwrap(response as SupabaseResponse<unknown>);
-    notificationsService.publish('notifications_updated');
-  },
-
-  loginWithPin: async (pin: string): Promise<Role | null> => {
-    const response = await supabase
-      .from('roles')
-      .select('id, name, permissions')
-      .eq('pin', pin)
-      .maybeSingle();
-    const row = unwrapMaybe<SupabaseRoleRow>(response as SupabaseResponse<SupabaseRoleRow | null>);
-    if (!row) {
-      return null;
-    }
-
-    const role = mapRoleRow(row, false);
-
-    try {
-      await logRoleLogin(role.id, role.name);
-    } catch (error) {
-      console.warn('Failed to enregistrer la connexion du rôle', error);
-    }
-
-    return role;
-  },
-
-  getDashboardStats: async (period: DashboardPeriod = 'week'): Promise<DashboardStats> => {
-    const { config, start, end } = resolveDashboardPeriodBounds(period);
-    const startIso = start.toISOString();
-    const endIso = end.toISOString();
-    const previousStart = new Date(start);
-    previousStart.setDate(previousStart.getDate() - config.days);
-    const previousStartIso = previousStart.toISOString();
-
-    const businessDayStart = getBusinessDayStart();
-    const businessDayIso = businessDayStart.toISOString();
-
-    const [tables, ingredients, categories, productRowsResponse, todaysOrdersResponse, periodOrdersResponse] =
-      await Promise.all([
-        fetchTablesWithMeta(),
-        fetchIngredients(),
-        fetchCategories(),
-        runProductsQueryWithFallback(query => query),
-        selectOrdersQuery().eq('statut', 'finalisee').gte('date_creation', businessDayIso),
-        selectOrdersQuery().eq('statut', 'finalisee').gte('date_creation', previousStartIso).lt('date_creation', endIso),
-      ]);
-
-    const todaysOrderRows = unwrap<SupabaseOrderRow[]>(todaysOrdersResponse as SupabaseResponse<SupabaseOrderRow[]>);
-    const todaysOrders = todaysOrderRows.map(mapOrderRow);
-
-    const periodOrderRows = unwrap<SupabaseOrderRow[]>(periodOrdersResponse as SupabaseResponse<SupabaseOrderRow[]>);
-    const mappedPeriodOrders = periodOrderRows.map(mapOrderRow);
-
-    const currentPeriodOrders = mappedPeriodOrders.filter(order => order.date_creation >= start.getTime());
-    const previousPeriodOrders = mappedPeriodOrders.filter(order => order.date_creation < start.getTime());
-
-    const ingredientMap = new Map(ingredients.map(ing => [ing.id, ing]));
-    const productRows = unwrap<SupabaseProductRow[]>(productRowsResponse as SupabaseResponse<SupabaseProductRow[]>);
-    const productMap = new Map(
-      productRows.map(row => {
-        const product = mapProductRow(row, ingredientMap);
-        return [product.id, product] as const;
-      }),
-    );
-
-    const ventesPeriode = currentPeriodOrders.reduce((sum, order) => sum + (order.total ?? 0), 0);
-    const beneficePeriode = currentPeriodOrders.reduce((profit, order) => {
-      return (
-        profit +
-        order.items.reduce((acc, item) => {
-          const product = productMap.get(item.produitRef);
-          const cost = product ? calculateCost(product.recipe, ingredientMap) : 0;
-          return acc + (item.prix_unitaire - cost) * item.quantite;
-        }, 0)
-      );
-    }, 0);
-
-    const clientsPeriode = currentPeriodOrders.reduce((sum, order) => sum + (order.couverts ?? 0), 0);
-    const panierMoyen = currentPeriodOrders.length > 0 ? ventesPeriode / currentPeriodOrders.length : 0;
-
-    const categoryMap = new Map(categories.map(category => [category.id, category.nom]));
-
-    const ventesParCategorieMap = new Map<string, number>();
-    currentPeriodOrders.forEach(order => {
-      order.items.forEach(item => {
-        const product = productMap.get(item.produitRef);
-        const categoryName = product ? categoryMap.get(product.categoria_id) ?? 'Sans catégorie' : 'Sans catégorie';
-        ventesParCategorieMap.set(
-          categoryName,
-          (ventesParCategorieMap.get(categoryName) ?? 0) + item.prix_unitaire * item.quantite,
-        );
-      });
-    });
-
-    const ventesParCategorie: SalesDataPoint[] = Array.from(ventesParCategorieMap.entries()).map(([name, value]) => ({
-      name,
-      value,
-    }));
-
-    const tablesOccupees = tables.filter(table => table.statut !== 'libre').length;
-    const clientsActuels = tables.reduce((sum, table) => sum + (table.couverts ?? 0), 0);
-    const commandesEnCuisine = todaysOrders.filter(order => order.estado_cocina === 'recibido').length;
-    const ingredientsStockBas = ingredients.filter(ingredient => ingredient.stock_actuel <= ingredient.stock_minimum);
-
-    const sumOrdersBetween = (orders: Order[], rangeStart: Date, rangeEnd: Date) => {
-      const startTimestamp = rangeStart.getTime();
-      const endTimestamp = rangeEnd.getTime();
-      return orders.reduce((sum, order) => {
-        if (order.date_creation >= startTimestamp && order.date_creation < endTimestamp) {
-          return sum + (order.total ?? 0);
-        }
-        return sum;
-      }, 0);
-    };
-
-    const ventesPeriodeSeries = Array.from({ length: config.days }).map((_, index) => {
-      const dayStart = new Date(start);
-      dayStart.setDate(dayStart.getDate() + index);
-      const dayEnd = new Date(dayStart);
-      dayEnd.setDate(dayEnd.getDate() + 1);
-
-      const previousDayStart = new Date(previousStart);
-      previousDayStart.setDate(previousDayStart.getDate() + index);
-      const previousDayEnd = new Date(previousDayStart);
-      previousDayEnd.setDate(previousDayEnd.getDate() + 1);
-
-      const name =
-        config.days === 7
-          ? index === config.days - 1
-            ? 'Auj'
-            : `J-${config.days - 1 - index}`
-          : dayStart.toLocaleDateString('fr-FR', { day: '2-digit', month: '2-digit' });
-
-      return {
-        name,
-        ventes: sumOrdersBetween(currentPeriodOrders, dayStart, dayEnd),
-        ventesPeriodePrecedente: sumOrdersBetween(previousPeriodOrders, previousDayStart, previousDayEnd),
-      };
-    });
-
-    return {
-      period,
-      periodLabel: config.label,
-      periodStart: startIso,
-      periodEnd: endIso,
-      ventesPeriode,
-      beneficePeriode,
-      clientsPeriode,
-      panierMoyen,
-      tablesOccupees,
-      clientsActuels,
-      commandesEnCuisine,
-      ingredientsStockBas,
-      ventesPeriodeSeries,
-      ventesParCategorie,
-    };
-  },
-
-  getSalesByProduct: async (period?: SalesPeriod): Promise<SalesDataPoint[]> => {
-    const resolveIso = (value?: Date | string): string | undefined => {
-      if (!value) {
-        return undefined;
-      }
-      return typeof value === 'string' ? value : value.toISOString();
-    };
-
-    const startIso = resolveIso(period?.start) ?? getBusinessDayStart().toISOString();
-    const endIso = resolveIso(period?.end);
-
-    let query = supabase
-      .from('sales')
-      .select('product_id, product_name, total_price')
-      .gte('sale_date', startIso);
-
-    if (endIso) {
-      query = query.lt('sale_date', endIso);
-    }
-
-    const response = await query;
-    const rows = unwrap<{ product_id: string; product_name: string; total_price: number }[]>(
-      response as SupabaseResponse<{ product_id: string; product_name: string; total_price: number }[]>,
-    );
-
-    const totals = new Map<string, { name: string; value: number }>();
-    rows.forEach(row => {
-      const current = totals.get(row.product_id) ?? { name: row.product_name, value: 0 };
-      current.value += row.total_price;
-      totals.set(row.product_id, current);
-    });
-
-    const sorted = Array.from(totals.values()).sort((a, b) => b.value - a.value);
-    if (sorted.length > 6) {
-      const top6 = sorted.slice(0, 6);
-      const others = sorted.slice(6).reduce((sum, item) => sum + item.value, 0);
-      return [...top6, { name: 'Autres', value: others }];
-    }
-    return sorted;
-  },
-
-  getTables: async (): Promise<Table[]> => {
-    return fetchTablesWithMeta();
-  },
-
-  createTable: async (payload: TablePayload): Promise<Table> => {
-    const response = await supabase
-      .from('restaurant_tables')
-      .insert({
-        nom: payload.nom,
-        capacite: payload.capacite,
-        couverts: payload.couverts ?? null,
-      })
-      .select('id, nom, capacite, statut, commande_id, couverts')
-      .single();
-
-    const row = unwrap<SupabaseTableRow>(response as SupabaseResponse<SupabaseTableRow>);
-    publishOrderChange();
-    return mapTableRowWithMeta(row);
-  },
-
-  updateTable: async (tableId: string, updates: TableUpdatePayload): Promise<Table> => {
-    const payload: Record<string, unknown> = {};
-
-    if (updates.nom !== undefined) {
-      payload.nom = updates.nom;
-    }
-    if (updates.capacite !== undefined) {
-      payload.capacite = updates.capacite;
-    }
-    if (updates.couverts !== undefined) {
-      payload.couverts = updates.couverts ?? null;
-    }
-
-    const response = await supabase
-      .from('restaurant_tables')
-      .update(payload)
-      .eq('id', tableId)
-      .select('id, nom, capacite, statut, commande_id, couverts')
-      .single();
-
-    const row = unwrap<SupabaseTableRow>(response as SupabaseResponse<SupabaseTableRow>);
-    publishOrderChange();
-    return mapTableRowWithMeta(row);
-  },
-
-  deleteTable: async (tableId: string): Promise<void> => {
-    const response = await supabase.from('restaurant_tables').delete().eq('id', tableId);
-    unwrap(response as SupabaseResponse<unknown>);
-    publishOrderChange();
-  },
-
-  getIngredients: async (): Promise<Ingredient[]> => {
-    return fetchIngredients();
-  },
-
-  getProducts: async (): Promise<Product[]> => {
-    const [productRows, ingredients] = await Promise.all([
-      runProductsQueryWithFallback(query => query.neq('estado', 'archive')),
-      fetchIngredientsOrWarn('getProducts'),
-    ]);
-    const rows = unwrap<SupabaseProductRow[]>(productRows as SupabaseResponse<SupabaseProductRow[]>);
-    const ingredientMap = ingredients.length > 0
-      ? new Map(ingredients.map(ingredient => [ingredient.id, ingredient]))
-      : undefined;
-    return rows.map(row => mapProductRow(row, ingredientMap));
-  },
-
-  getBestSellerProducts: async (): Promise<Product[]> => {
-    const [productsResponse, ingredients] = await Promise.all([
-      runProductsQueryWithFallback((query, includeBestSellerColumns) => {
-        if (!includeBestSellerColumns) {
-          return query.limit(0);
-        }
-
-        return query.eq('is_best_seller', true).order('best_seller_rank', { ascending: true, nullsFirst: false }).limit(6);
-      }, { includeRecipes: false }),
-      fetchIngredientsOrWarn('getBestSellerProducts'),
-    ]);
-
-    const productRows = unwrap<SupabaseProductRow[]>(productsResponse as SupabaseResponse<SupabaseProductRow[]>);
-    const ingredientMap = ingredients.length > 0
-      ? new Map(ingredients.map(ingredient => [ingredient.id, ingredient]))
-      : undefined;
-
-    return productRows
-      .filter(row => row.estado !== 'archive')
-      .sort((a, b) => {
-        const rankA = a.best_seller_rank ?? Number.POSITIVE_INFINITY;
-        const rankB = b.best_seller_rank ?? Number.POSITIVE_INFINITY;
-        return rankA - rankB;
-      })
-      .map(row => mapProductRow(row, ingredientMap))
-      .filter(product => product.is_best_seller)
-      .slice(0, 6);
-  },
-
-  getCategories: async (): Promise<Category[]> => {
-    return fetchCategories();
-  },
-
-  getKitchenOrders: async (): Promise<KitchenTicket[]> => {
-    const response = await selectOrdersQuery()
-      .eq('estado_cocina', 'recibido')
-      .or('statut.eq.en_cours,type.eq.a_emporter');
-    const rows = unwrap<SupabaseOrderRow[]>(response as SupabaseResponse<SupabaseOrderRow[]>);
-    const orders = rows.map(mapOrderRow);
-
-    const tickets: KitchenTicket[] = [];
-
-    orders.forEach(order => {
-      const sentItems = order.items.filter(item => item.estado === 'enviado');
-      if (sentItems.length === 0) {
-        return;
-      }
-
-      const groups = sentItems.reduce((acc, item) => {
-        const key = item.date_envoi ?? order.date_envoi_cuisine ?? order.date_creation;
-        const group = acc.get(key) ?? [];
-        group.push(item);
-        acc.set(key, group);
-        return acc;
-      }, new Map<number, OrderItem[]>());
-
-      groups.forEach((items, key) => {
-        tickets.push({
-          ...order,
-          items,
-          date_envoi_cuisine: key,
-          ticketKey: `${order.id}-${key}`,
-        });
-      });
-    });
-
-    return tickets.sort((a, b) => {
-      const aTime = a.date_envoi_cuisine ?? a.date_creation;
-      const bTime = b.date_envoi_cuisine ?? b.date_creation;
-      return aTime - bTime;
-    });
-  },
-
-  getTakeawayOrders: async (): Promise<{ pending: Order[]; ready: Order[] }> => {
-    const response = await selectOrdersQuery().eq('type', 'a_emporter');
-    const rows = unwrap<SupabaseOrderRow[]>(response as SupabaseResponse<SupabaseOrderRow[]>);
-    const orders = rows.map(mapOrderRow);
-    return {
-      pending: orders.filter(order => order.statut === 'pendiente_validacion'),
-      ready: orders.filter(order => order.estado_cocina === 'listo'),
-    };
-  },
-
-  getOrderById: async (orderId: string): Promise<Order | undefined> => {
-    const order = await fetchOrderById(orderId);
-    return order ?? undefined;
-  },
-
-  createOrGetOrderByTableId: async (tableId: string): Promise<Order> => {
-    const tableResponse = await supabase
-      .from('restaurant_tables')
-      .select('id, nom, capacite, statut, commande_id, couverts')
-      .eq('id', tableId)
-      .maybeSingle();
-    const tableRow = unwrapMaybe<SupabaseTableRow>(tableResponse as SupabaseResponse<SupabaseTableRow | null>);
-
-    if (!tableRow) {
-      throw new Error('Table not found');
-    }
-
-    if (tableRow.commande_id) {
-      const existingOrder = await fetchOrderById(tableRow.commande_id);
-      if (existingOrder) {
-        return existingOrder;
-      }
-    }
-
-    const nowIso = new Date().toISOString();
-    const insertResponse = await supabase
-      .from('orders')
-      .insert({
-        type: 'sur_place',
-        table_id: tableRow.id,
-        table_nom: tableRow.nom,
-        couverts: tableRow.couverts ?? tableRow.capacite,
-        statut: 'en_cours',
-        estado_cocina: 'no_enviado',
-        date_creation: nowIso,
-        payment_status: 'unpaid',
-        total: 0,
-      })
-      .select('*')
-      .single();
-    const insertedRow = unwrap<SupabaseOrderRow>(insertResponse as SupabaseResponse<SupabaseOrderRow>);
-
-    await supabase
-      .from('restaurant_tables')
-      .update({
-        statut: 'en_cuisine',
-        commande_id: insertedRow.id,
-        couverts: tableRow.couverts ?? tableRow.capacite,
-      })
-      .eq('id', tableId);
-
-    publishOrderChange();
-    return mapOrderRow(insertedRow);
-  },
-
-  cancelUnsentTableOrder: async (orderId: string): Promise<void> => {
-    const existingOrder = await fetchOrderById(orderId);
-    if (!existingOrder) {
-      return;
-    }
-
-    const hasBeenSent = existingOrder.estado_cocina !== 'no_enviado'
-      || existingOrder.items.some(item => item.estado !== 'en_attente');
-
-    if (hasBeenSent) {
-      return;
-    }
-
-    await supabase.from('order_items').delete().eq('order_id', orderId);
-    await supabase.from('orders').delete().eq('id', orderId);
-
-    if (existingOrder.table_id) {
-      await supabase
-        .from('restaurant_tables')
-        .update({ statut: 'libre', commande_id: null, couverts: null })
-        .eq('id', existingOrder.table_id);
-    }
-
-    publishOrderChange();
-  },
-
-  updateOrder: async (
-    orderId: string,
-    updates: Partial<Order> & { removedItemIds?: string[] },
-    options?: PublishOrderChangeOptions,
-  ): Promise<Order> => {
-    const existingOrder = await fetchOrderById(orderId);
-    if (!existingOrder) {
-      throw new Error('Order not found');
-    }
-
-    let items = existingOrder.items;
-    if (updates.items) {
-      const payload = updates.items.map(item => {
-        const payloadItem: Record<string, unknown> = {
-          order_id: orderId,
-          produit_id: item.produitRef,
-          nom_produit: item.nom_produit,
-          prix_unitaire: item.prix_unitaire,
-          quantite: item.quantite,
-          excluded_ingredients: item.excluded_ingredients,
-          commentaire: item.commentaire,
-          estado: item.estado,
-          date_envoi: toIsoString(item.date_envoi) ?? null,
-        };
-
-        if (isUuid(item.id)) {
-          payloadItem.id = item.id;
-        }
-
-        return payloadItem;
-      });
-
-      if (payload.length > 0) {
-        await supabase.from('order_items').upsert(payload, { defaultToNull: false });
-      }
-      items = updates.items;
-    }
-
-    const { items: _, clientInfo, removedItemIds = [], ...rest } = updates;
-    const payload: Record<string, unknown> = {};
-
-    if (rest.type) payload.type = rest.type;
-    if (rest.table_id !== undefined) payload.table_id = rest.table_id;
-    if (rest.table_nom !== undefined) payload.table_nom = rest.table_nom;
-    if (rest.couverts !== undefined) payload.couverts = rest.couverts;
-    if (rest.statut) payload.statut = rest.statut;
-    if (rest.estado_cocina) payload.estado_cocina = rest.estado_cocina;
-    if (rest.payment_status) payload.payment_status = rest.payment_status;
-    if (rest.payment_method !== undefined) payload.payment_method = rest.payment_method;
-    if (rest.payment_receipt_url !== undefined) payload.payment_receipt_url = rest.payment_receipt_url;
-    if (rest.receipt_url !== undefined) payload.receipt_url = rest.receipt_url;
-    if (rest.total !== undefined) payload.total = rest.total;
-    if (rest.profit !== undefined) payload.profit = rest.profit;
-
-    if (rest.date_creation !== undefined) payload.date_creation = toIsoString(rest.date_creation);
-    if (rest.date_envoi_cuisine !== undefined) payload.date_envoi_cuisine = toIsoString(rest.date_envoi_cuisine);
-    if (rest.date_listo_cuisine !== undefined) payload.date_listo_cuisine = toIsoString(rest.date_listo_cuisine);
-    if (rest.date_servido !== undefined) payload.date_servido = toIsoString(rest.date_servido);
-
-    if (updates.items) {
-      payload.total = updates.items.reduce((sum, item) => sum + item.prix_unitaire * item.quantite, 0);
-    }
-
-    const persistedIdsToDelete = removedItemIds.filter(id => isUuid(id));
-    if (persistedIdsToDelete.length > 0) {
-      await supabase.from('order_items').delete().in('id', persistedIdsToDelete);
-    }
-
-    if (clientInfo) {
-      payload.client_nom = clientInfo?.nom ?? null;
-      payload.client_telephone = clientInfo?.telephone ?? null;
-      payload.client_adresse = clientInfo?.adresse ?? null;
-    }
-
-    if (Object.keys(payload).length > 0) {
-      await supabase.from('orders').update(payload).eq('id', orderId);
-    }
-
-    publishOrderChange({ includeNotifications: options?.includeNotifications ?? true });
-    const updatedOrder = await fetchOrderById(orderId);
-    if (!updatedOrder) {
-      throw new Error('Order not found after update');
-    }
-
-    if (updates.items) {
-      return {
-        ...updatedOrder,
-        items: reorderOrderItems(updates.items, updatedOrder.items),
-      };
-    }
-
-    return updatedOrder;
-  },
-
-  sendOrderToKitchen: async (orderId: string, itemIds?: string[]): Promise<Order> => {
-    const order = await fetchOrderById(orderId);
-    if (!order) {
-      throw new Error('Order not found');
-    }
-
-    const pendingItems = order.items.filter(item => item.estado === 'en_attente');
-
-    const itemsToSend = (() => {
-      if (!itemIds || itemIds.length === 0) {
-        return pendingItems;
-      }
-
-      const idsToSend = new Set(itemIds);
-      return pendingItems.filter(item => idsToSend.has(item.id));
-    })();
-
-    if (itemsToSend.length === 0) {
-      return order;
-    }
-
-    const persistedIds = itemsToSend.filter(item => isUuid(item.id)).map(item => item.id);
-    if (persistedIds.length === 0) {
-      return order;
-    }
-
-    const nowIso = new Date().toISOString();
-    await supabase
-      .from('order_items')
-      .update({ estado: 'enviado', date_envoi: nowIso })
-      .in('id', persistedIds);
-
-    await supabase
-      .from('orders')
-      .update({ estado_cocina: 'recibido', date_envoi_cuisine: nowIso })
-      .eq('id', orderId);
-
-    if (order.table_id) {
-      await supabase
-        .from('restaurant_tables')
-        .update({ statut: 'en_cuisine' })
-        .eq('id', order.table_id);
-    }
-
-    publishOrderChange();
-    const updatedOrder = await fetchOrderById(orderId);
-    if (!updatedOrder) {
-      throw new Error('Order not found after sending to kitchen');
-    }
-    return updatedOrder;
-  },
-
-  markOrderAsReady: async (orderId: string): Promise<Order> => {
-    const nowIso = new Date().toISOString();
-    await supabase
-      .from('orders')
-      .update({ estado_cocina: 'listo', date_listo_cuisine: nowIso })
-      .eq('id', orderId);
-
-    const order = await fetchOrderById(orderId);
-    if (order?.table_id) {
-      await supabase
-        .from('restaurant_tables')
-        .update({ statut: 'para_entregar' })
-        .eq('id', order.table_id);
-    }
-
-    publishOrderChange();
-    const updatedOrder = await fetchOrderById(orderId);
-    if (!updatedOrder) {
-      throw new Error('Order not found after ready update');
-    }
-    return updatedOrder;
-  },
-
-  markOrderAsServed: async (orderId: string): Promise<Order> => {
-    const existingOrder = await fetchOrderById(orderId);
-    if (!existingOrder) {
-      throw new Error('Order not found');
-    }
-
-    const nowIso = new Date().toISOString();
-    await supabase
-      .from('orders')
-      .update({ estado_cocina: 'servido', date_servido: nowIso })
-      .eq('id', orderId);
-
-    if (existingOrder.table_id) {
-      await supabase
-        .from('restaurant_tables')
-        .update({ statut: 'para_pagar' })
-        .eq('id', existingOrder.table_id);
-    }
-
-    publishOrderChange();
-    const updatedOrder = await fetchOrderById(orderId);
-    if (!updatedOrder) {
-      throw new Error('Order not found after serve update');
-    }
-    return updatedOrder;
-  },
-
-  finalizeOrder: async (orderId: string, paymentMethod: Order['payment_method'], receiptUrl?: string): Promise<Order> => {
-    const order = await fetchOrderById(orderId);
-    if (!order) {
-      throw new Error('Order not found');
-    }
-
-    const nowIso = new Date().toISOString();
-    await supabase
-      .from('orders')
-      .update({
-        statut: 'finalisee',
-        payment_status: 'paid',
-        payment_method: paymentMethod,
-        payment_receipt_url: receiptUrl ?? null,
-        date_servido: nowIso,
-      })
-      .eq('id', orderId);
-
-    if (order.table_id) {
-      await supabase
-        .from('restaurant_tables')
-        .update({ statut: 'libre', commande_id: null, couverts: null })
-        .eq('id', order.table_id);
-    }
-
-    publishOrderChange();
-    const updatedOrder = await fetchOrderById(orderId);
-    if (!updatedOrder) {
-      throw new Error('Order not found after finalization');
-    }
-    const totalProfit = await createSalesEntriesForOrder(updatedOrder);
-    return { ...updatedOrder, profit: totalProfit };
-  },
-
-  submitCustomerOrder: async (orderData: {
-    items: OrderItem[];
-    clientInfo: Order['clientInfo'];
-    receipt_url?: string;
-  }): Promise<Order> => {
-    const now = new Date();
-    const nowIso = now.toISOString();
-
-    const insertResponse = await supabase
-      .from('orders')
-      .insert({
-        type: 'a_emporter',
-        couverts: 1,
-        statut: 'pendiente_validacion',
-        estado_cocina: 'no_enviado',
-        date_creation: nowIso,
-        payment_status: 'unpaid',
-        total: orderData.items.reduce((sum, item) => sum + item.prix_unitaire * item.quantite, 0),
-        client_nom: orderData.clientInfo?.nom ?? null,
-        client_telephone: orderData.clientInfo?.telephone ?? null,
-        client_adresse: orderData.clientInfo?.adresse ?? null,
-        receipt_url: orderData.receipt_url ?? null,
-      })
-      .select('*')
-      .single();
-    const orderRow = unwrap<SupabaseOrderRow>(insertResponse as SupabaseResponse<SupabaseOrderRow>);
-
-    if (orderData.items.length > 0) {
-      await supabase.from('order_items').insert(
-        orderData.items.map(item => {
-          const payloadItem: Record<string, unknown> = {
-            order_id: orderRow.id,
-            produit_id: item.produitRef,
-            nom_produit: item.nom_produit,
-            prix_unitaire: item.prix_unitaire,
-            quantite: item.quantite,
-            excluded_ingredients: item.excluded_ingredients,
-            commentaire: item.commentaire,
-            estado: item.estado,
-            date_envoi: item.date_envoi ? new Date(item.date_envoi).toISOString() : null,
-          };
-
-          if (isUuid(item.id)) {
-            payloadItem.id = item.id;
-          }
-
-          return payloadItem;
-        }),
-        { defaultToNull: false },
-      );
-    }
-
-    publishOrderChange();
-    const enrichedOrder = await fetchOrderById(orderRow.id);
-    if (!enrichedOrder) {
-      throw new Error('Order not found after creation');
-    }
-    return enrichedOrder;
-  },
-
-  getCustomerOrderStatus: async (orderId: string): Promise<Order | null> => {
-    return fetchOrderById(orderId);
-  },
-
-  validateTakeawayOrder: async (orderId: string): Promise<Order> => {
-    const nowIso = new Date().toISOString();
-    await supabase
-      .from('orders')
-      .update({
-        statut: 'en_cours',
-        estado_cocina: 'recibido',
-        payment_status: 'paid',
-        date_envoi_cuisine: nowIso,
-      })
-      .eq('id', orderId);
-
-    await supabase
-      .from('order_items')
-      .update({ estado: 'enviado', date_envoi: nowIso })
-      .eq('order_id', orderId);
-
-    publishOrderChange();
-    const updatedOrder = await fetchOrderById(orderId);
-    if (!updatedOrder) {
-      throw new Error('Order not found after validation');
-    }
-    return updatedOrder;
-  },
-
-  markTakeawayAsDelivered: async (orderId: string): Promise<Order> => {
-    await supabase
-      .from('orders')
-      .update({
-        statut: 'finalisee',
-        estado_cocina: 'entregada',
-        payment_method: 'transferencia',
-      })
-      .eq('id', orderId);
-
-    publishOrderChange();
-    const updatedOrder = await fetchOrderById(orderId);
-    if (!updatedOrder) {
-      throw new Error('Order not found after delivery');
-    }
-    const totalProfit = await createSalesEntriesForOrder(updatedOrder);
-    return { ...updatedOrder, profit: totalProfit };
-  },
-
-  getNotificationCounts: async (): Promise<NotificationCounts> => {
-    const response = await selectOrdersQuery();
-    const rows = unwrap<SupabaseOrderRow[]>(response as SupabaseResponse<SupabaseOrderRow[]>);
-    const orders = rows.map(mapOrderRow);
-
-    return {
-      pendingTakeaway: orders.filter(order => order.type === 'a_emporter' && order.statut === 'pendiente_validacion').length,
-      readyTakeaway: orders.filter(order => order.type === 'a_emporter' && order.estado_cocina === 'listo').length,
-      kitchenOrders: orders.filter(order => order.estado_cocina === 'recibido').length,
-      lowStockIngredients: (await fetchIngredients()).filter(
-        ingredient => ingredient.stock_actuel <= ingredient.stock_minimum,
-      ).length,
-      readyForService: orders.filter(order => order.type === 'sur_place' && order.estado_cocina === 'listo').length,
-    };
-  },
-
-  generateDailyReport: async (): Promise<DailyReport> => {
-    const now = new Date();
-    const start = getBusinessDayStart(now);
-    const startIso = start.toISOString();
-
-    clearRoleLoginsBefore(startIso);
-
-    const [ordersResponse, categories, ingredients, productRowsResponse] = await Promise.all([
-      selectOrdersQuery().eq('statut', 'finalisee'),
-      fetchCategories(),
-      fetchIngredients(),
-      runProductsQueryWithFallback(query => query),
-    ]);
-    let roleLoginsResult: RoleLogin[] = [];
-    let roleLoginsUnavailable = false;
-    try {
-      roleLoginsResult = await fetchRoleLoginsSince(startIso);
-    } catch (error) {
-      console.warn('Failed to fetch role logins for daily report', error);
-      roleLoginsUnavailable = true;
-    }
-    const rows = unwrap<SupabaseOrderRow[]>(ordersResponse as SupabaseResponse<SupabaseOrderRow[]>);
-    const allOrders = rows.map(mapOrderRow);
-    const startTime = start.getTime();
-    const endTime = now.getTime();
-    const orders = allOrders.filter(order => {
-      const referenceDate = order.date_servido ?? order.date_listo_cuisine ?? order.date_creation;
-      return referenceDate >= startTime && referenceDate <= endTime;
-    });
-
-    const ventesDuJour = orders.reduce((sum, order) => sum + order.total, 0);
-    const clientsDuJour = orders.reduce((sum, order) => sum + order.couverts, 0);
-    const panierMoyen = orders.length > 0 ? ventesDuJour / orders.length : 0;
-
-    const ingredientMap = new Map(ingredients.map(ingredient => [ingredient.id, ingredient]));
-    const productRows = unwrap<SupabaseProductRow[]>(productRowsResponse as SupabaseResponse<SupabaseProductRow[]>);
-    const productMap = new Map(
-      productRows.map(row => {
-        const product = mapProductRow(row, ingredientMap);
-        return [product.id, product] as const;
-      }),
-    );
-
-    const categoryMap = new Map(categories.map(category => [category.id, category.nom]));
-
-    const soldProductsByCategory = new Map<string, { categoryName: string; products: SoldProduct[] }>();
-    orders.forEach(order => {
-      order.items.forEach(item => {
-        const product = productMap.get(item.produitRef);
-        const categoryName = product ? categoryMap.get(product.categoria_id) ?? 'Sans catégorie' : 'Sans catégorie';
-        const categoryId = product ? product.categoria_id : 'unknown';
-        const entry = soldProductsByCategory.get(categoryId) ?? { categoryName, products: [] };
-        const existingProduct = entry.products.find(productItem => productItem.id === item.produitRef);
-        if (existingProduct) {
-          existingProduct.quantity += item.quantite;
-          existingProduct.totalSales += item.prix_unitaire * item.quantite;
-        } else {
-          entry.products.push({
-            id: item.produitRef,
-            name: item.nom_produit,
-            quantity: item.quantite,
-            totalSales: item.prix_unitaire * item.quantite,
-          });
-        }
-        soldProductsByCategory.set(categoryId, entry);
-      });
-    });
-
-    soldProductsByCategory.forEach(category => {
-      category.products.sort((a, b) => b.quantity - a.quantity);
-    });
-
-    const ingredientsStockBas = ingredients.filter(
-      ingredient => ingredient.stock_actuel <= ingredient.stock_minimum,
-    );
-
-    return {
-      generatedAt: now.toISOString(),
-      startDate: start.toISOString(),
-      clientsDuJour,
-      panierMoyen,
-      ventesDuJour,
-      soldProducts: Array.from(soldProductsByCategory.values()),
-      lowStockIngredients: ingredientsStockBas,
-      roleLogins: roleLoginsResult,
-      roleLoginsUnavailable,
-    };
-  },
-
-  getSalesHistory: async (): Promise<Sale[]> => {
-    const response = await supabase.from('sales').select('*').order('sale_date', { ascending: false });
-    const rows = unwrap<SupabaseSaleRow[]>(response as SupabaseResponse<SupabaseSaleRow[]>);
-    return rows.map(mapSaleRow);
-  },
-
-  getFinalizedOrders: async (): Promise<Order[]> => {
-    const response = await selectOrdersQuery().eq('statut', 'finalisee');
-    const rows = unwrap<SupabaseOrderRow[]>(response as SupabaseResponse<SupabaseOrderRow[]>);
-    return rows.map(mapOrderRow);
-  },
-
-  addIngredient: async (
-    newIngredientData: Omit<Ingredient, 'id' | 'stock_actuel' | 'prix_unitaire'>,
-  ): Promise<Ingredient> => {
-    const response = await supabase
-      .from('ingredients')
-      .insert({
-        nom: newIngredientData.nom,
-        unite: newIngredientData.unite,
-        stock_minimum: newIngredientData.stock_minimum,
-        stock_actuel: 0,
-        prix_unitaire: 0,
-      })
-      .select('id, nom, unite, stock_minimum, stock_actuel, prix_unitaire')
-      .single();
-    const row = unwrap<SupabaseIngredientRow>(response as SupabaseResponse<SupabaseIngredientRow>);
-    notificationsService.publish('notifications_updated');
-    return mapIngredientRow(row);
-  },
-
-  updateIngredient: async (
-    ingredientId: string,
-    updates: Partial<Omit<Ingredient, 'id'>>,
-  ): Promise<Ingredient> => {
-    const response = await supabase
-      .from('ingredients')
-      .update(updates)
-      .eq('id', ingredientId)
-      .select('id, nom, unite, stock_minimum, stock_actuel, prix_unitaire')
-      .single();
-    const row = unwrap<SupabaseIngredientRow>(response as SupabaseResponse<SupabaseIngredientRow>);
-    notificationsService.publish('notifications_updated');
-    return mapIngredientRow(row);
-  },
-
-  deleteIngredient: async (ingredientId: string): Promise<{ success: boolean }> => {
-    const relatedRecipesResponse = await supabase
-      .from('product_recipes')
-      .select('ingredient_id, product_id, qte_utilisee')
-      .eq('ingredient_id', ingredientId)
-      .limit(1);
-
-    const relatedRecipes = unwrap<SupabaseRecipeRow[]>(
-      relatedRecipesResponse as SupabaseResponse<SupabaseRecipeRow[]>,
-    );
-
-    if (relatedRecipes.length > 0) {
-      throw new Error("Impossible de supprimer l'ingrédient car il est utilisé dans une recette.");
-    }
-
-    await supabase.from('ingredients').delete().eq('id', ingredientId);
-    notificationsService.publish('notifications_updated');
-    return { success: true };
-  },
-
-  resupplyIngredient: async (ingredientId: string, quantity: number, unitPrice: number): Promise<Ingredient> => {
-    const ingredientResponse = await supabase
-      .from('ingredients')
-      .select('id, nom, unite, stock_minimum, stock_actuel, prix_unitaire')
-      .eq('id', ingredientId)
-      .maybeSingle();
-    const ingredientRow = unwrapMaybe<SupabaseIngredientRow>(
-      ingredientResponse as SupabaseResponse<SupabaseIngredientRow | null>,
-    );
-    if (!ingredientRow) {
-      throw new Error('Ingredient not found');
-    }
-
-    const currentStockValue = ingredientRow.prix_unitaire * ingredientRow.stock_actuel;
-    const totalCost = quantity * unitPrice;
-    const newStock = ingredientRow.stock_actuel + quantity;
-    const newWeightedPrice = newStock > 0 ? (currentStockValue + totalCost) / newStock : 0;
-
-    await supabase
-      .from('ingredients')
-      .update({
-        stock_actuel: newStock,
-        prix_unitaire: Number.isFinite(newWeightedPrice) ? newWeightedPrice : 0,
-      })
-      .eq('id', ingredientId);
-
-    await supabase.from('purchases').insert({
-      ingredient_id: ingredientId,
-      quantite_achetee: quantity,
-      prix_total: totalCost,
-      date_achat: new Date().toISOString(),
-    });
-
-    notificationsService.publish('notifications_updated');
-    const refreshedIngredient = await supabase
-      .from('ingredients')
-      .select('id, nom, unite, stock_minimum, stock_actuel, prix_unitaire')
-      .eq('id', ingredientId)
-      .single();
-    const refreshedRow = unwrap<SupabaseIngredientRow>(refreshedIngredient as SupabaseResponse<SupabaseIngredientRow>);
-    return mapIngredientRow(refreshedRow);
-  },
-
-  addProduct: async (product: Omit<Product, 'id'>): Promise<Product> => {
-    const insertResponse = await supabase
-      .from('products')
-      .insert({
-        nom_produit: product.nom_produit,
-        description: product.description ?? null,
-        prix_vente: product.prix_vente,
-        categoria_id: product.categoria_id,
-        estado: product.estado,
-        image: normalizeCloudinaryImageUrl(product.image),
-        is_best_seller: product.is_best_seller,
-        best_seller_rank: product.is_best_seller ? product.best_seller_rank : null,
-      })
-      .select('id')
-      .single();
-    const insertedRow = unwrap<{ id: string }>(insertResponse as SupabaseResponse<{ id: string }>);
-
-    if (product.recipe.length > 0) {
-      await supabase.from('product_recipes').insert(
-        product.recipe.map(item => ({
-          product_id: insertedRow.id,
-          ingredient_id: item.ingredient_id,
-          qte_utilisee: item.qte_utilisee,
-        })),
-      );
-    }
-
-    notificationsService.publish('notifications_updated');
-    const productsResponse = await runProductsQueryWithFallback(
-      query => query.eq('id', insertedRow.id).single(),
-    );
-    const productRow = unwrap<SupabaseProductRow>(productsResponse as SupabaseResponse<SupabaseProductRow>);
-    const ingredients = await fetchIngredients();
-    const ingredientMap = new Map(ingredients.map(ingredient => [ingredient.id, ingredient]));
-    return mapProductRow(productRow, ingredientMap);
-  },
-
-  updateProduct: async (productId: string, updates: Partial<Product>): Promise<Product> => {
-    const { recipe, ...rest } = updates;
-
-    const updatePayload: Record<string, unknown> = {};
-
-    if (rest.nom_produit !== undefined) {
-      updatePayload.nom_produit = rest.nom_produit;
-    }
-
-    if (rest.description !== undefined) {
-      updatePayload.description = rest.description ?? null;
-    }
-
-    if (rest.prix_vente !== undefined) {
-      updatePayload.prix_vente = rest.prix_vente;
-    }
-
-    if (rest.categoria_id !== undefined) {
-      updatePayload.categoria_id = rest.categoria_id;
-    }
-
-    if (rest.estado !== undefined) {
-      updatePayload.estado = rest.estado;
-    }
-
-    if (rest.image !== undefined) {
-      updatePayload.image = normalizeCloudinaryImageUrl(rest.image);
-    }
-
-    if (rest.best_seller_rank !== undefined) {
-      updatePayload.best_seller_rank = rest.best_seller_rank;
-    }
-
-    if (rest.is_best_seller !== undefined) {
-      updatePayload.is_best_seller = rest.is_best_seller;
-      if (!rest.is_best_seller) {
-        updatePayload.best_seller_rank = null;
-      }
-    }
-
-    if (Object.keys(updatePayload).length > 0) {
-      const updateResponse = await supabase.from('products').update(updatePayload).eq('id', productId);
-      unwrap(updateResponse as SupabaseResponse<unknown>);
-    }
-
-    if (recipe) {
-      const deleteRecipeResponse = await supabase.from('product_recipes').delete().eq('product_id', productId);
-      unwrap(deleteRecipeResponse as SupabaseResponse<unknown>);
-      if (recipe.length > 0) {
-        const insertRecipeResponse = await supabase.from('product_recipes').insert(
-          recipe.map(item => ({
-            product_id: productId,
-            ingredient_id: item.ingredient_id,
-            qte_utilisee: item.qte_utilisee,
-          })),
-        );
-        unwrap(insertRecipeResponse as SupabaseResponse<unknown>);
-      }
-    }
-
-    notificationsService.publish('notifications_updated');
-    const productsResponse = await runProductsQueryWithFallback(
-      query => query.eq('id', productId).single(),
-    );
-    const productRow = unwrap<SupabaseProductRow>(productsResponse as SupabaseResponse<SupabaseProductRow>);
-    const ingredients = await fetchIngredients();
-    const ingredientMap = new Map(ingredients.map(ingredient => [ingredient.id, ingredient]));
-    return mapProductRow(productRow, ingredientMap);
-  },
-
-  deleteProduct: async (productId: string): Promise<void> => {
-    await supabase.from('product_recipes').delete().eq('product_id', productId);
-    await supabase.from('products').delete().eq('id', productId);
-    notificationsService.publish('notifications_updated');
-  },
-
-  addCategory: async (name: string): Promise<Category> => {
-    const response = await supabase
-      .from('categories')
-      .insert({ nom: name })
-      .select('id, nom')
-      .single();
-    const row = unwrap<SupabaseCategoryRow>(response as SupabaseResponse<SupabaseCategoryRow>);
-    notificationsService.publish('notifications_updated');
-    return mapCategoryRow(row);
-  },
-
-  deleteCategory: async (categoryId: string): Promise<void> => {
-    await supabase.from('categories').delete().eq('id', categoryId);
-    notificationsService.publish('notifications_updated');
-  },
-};
-
diff --git a/services/cloudinary.ts b/services/cloudinary.ts
index 36f307c..202bb02 100644
--- a/services/cloudinary.ts
+++ b/services/cloudinary.ts
@@ -137,15 +137,28 @@ const defaultProductImage = getEnv('VITE_CLOUDINARY_DEFAULT_PRODUCT_IMAGE') ?? '
 
 export const DEFAULT_PRODUCT_IMAGE = defaultProductImage;
 
-export const resolveProductImageUrl = (image?: string | null): string => {
+export const resolveProductImageUrl = (image?: string | null, width?: number, height?: number): string => {
   const normalized = normalizeCloudinaryImageUrl(image);
   if (normalized) {
-    return normalized;
+    // Add Cloudinary transformations for format, quality, and dimensions
+    const transformations = ["f_auto", "q_auto"];
+    if (width) {
+      transformations.push(`w_${width}`);
+    }
+    if (height) {
+      transformations.push(`h_${height}`);
+    }
+    // Insert transformations before the public ID in the URL path
+    const parts = normalized.split("/upload/");
+    if (parts.length === 2) {
+      return `${parts[0]}/upload/${transformations.join(",")}/${parts[1]}`;
+    }
+    return normalized; // Fallback if URL format is unexpected
   }
   if (DEFAULT_PRODUCT_IMAGE) {
     return DEFAULT_PRODUCT_IMAGE;
   }
-  return '';
+  return "";
 };
 
 export const uploadProductImage = async (
diff --git a/utils/siteStyleHelpers.ts b/utils/siteStyleHelpers.ts
index 32ce02a..f1c96a3 100644
--- a/utils/siteStyleHelpers.ts
+++ b/utils/siteStyleHelpers.ts
@@ -73,14 +73,14 @@ export const createHeroBackgroundStyle = (
   return base;
 };
 
-export const createTextStyle = (style: SectionStyle): CSSProperties => ({
-  color: style.textColor,
-  fontFamily: formatFontFamily(style.fontFamily),
+export const createTextStyle = (style: SectionStyle, globalStyle?: SiteContent["globalStyle"]): CSSProperties => ({
+  color: style.textColor ?? globalStyle?.primaryColor,
+  fontFamily: formatFontFamily(style.fontFamily ?? globalStyle?.fontFamily),
 });
 
-export const createBodyTextStyle = (style: SectionStyle): CSSProperties => ({
-  ...createTextStyle(style),
-  fontSize: style.fontSize,
+export const createBodyTextStyle = (style: SectionStyle, globalStyle?: SiteContent["globalStyle"]): CSSProperties => ({
+  ...createTextStyle(style, globalStyle),
+  fontSize: style.fontSize ?? globalStyle?.fontSize,
 });
 
 export const createElementTextStyle = (
